[
 "BOOTSTRAP",
 {
  "defaultCharset": "windows-1252",
  "pidString": "6936@DESKTOP-HP7QPF3",
  "systemProperties": {
   "awt.toolkit": "sun.awt.windows.WToolkit",
   "file.encoding": "Cp1252",
   "file.encoding.pkg": "sun.io",
   "file.separator": "\\",
   "java.awt.graphicsenv": "sun.awt.Win32GraphicsEnvironment",
   "java.awt.headless": "true",
   "java.awt.printerjob": "sun.awt.windows.WPrinterJob",
   "java.class.path": "C:\\Users\\kmala\\workspace\\Team3\\core\\build\\classes\\test;C:\\Users\\kmala\\workspace\\Team3\\core\\build\\resources\\test;C:\\Users\\kmala\\workspace\\Team3\\core\\build\\classes\\main;C:\\Users\\kmala\\workspace\\Team3\\core\\build\\resources\\main;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-core\\6.2.0\\849ee62525a294416802be2cacc66c80352f6f13\\lucene-core-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-analyzers-common\\6.2.0\\d254d52dd394b5079129f3d5f3bf4f2d44a5936e\\lucene-analyzers-common-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-backward-codecs\\6.2.0\\b625bb21456b3c0d1e5e431bced125cb060c1abd\\lucene-backward-codecs-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-grouping\\6.2.0\\9527fedfd5acc624b2bb3f862bd99fb8f470b053\\lucene-grouping-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-highlighter\\6.2.0\\7ca342372a3f45e32bbd21cecaa757e38eccb8a5\\lucene-highlighter-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-join\\6.2.0\\da0b8de98511abd4fe9c7d48a353d17854c5ed46\\lucene-join-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-memory\\6.2.0\\bc9e075b1ee051c8e5246c237c38d8e71dab8a66\\lucene-memory-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-misc\\6.2.0\\94ddde6312566a4da4a50a88e453b6c82c759b41\\lucene-misc-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-queries\\6.2.0\\dce47238f78e3e97d91dc6fefa9f46f07866bc2b\\lucene-queries-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-queryparser\\6.2.0\\17ef728ac15e668bfa1105321611548424637645\\lucene-queryparser-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-sandbox\\6.2.0\\520183f7b9aba77a26e224760c420a3844b0631a\\lucene-sandbox-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial\\6.2.0\\8dba929b66927b936fbc76103b109ad6c824daee\\lucene-spatial-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial-extras\\6.2.0\\3b5a6ef5cd90c0218a72e9e2f7e60104be2447da\\lucene-spatial-extras-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial3d\\6.2.0\\fcdb0567725722c5145149d1502848b6a96ec18d\\lucene-spatial3d-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-suggest\\6.2.0\\3d9d526c51f483d27f425c75d7e56bc0849242d6\\lucene-suggest-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.elasticsearch\\securesm\\1.1\\1e423447d020041534be94c0f31a49fbdc1f2950\\securesm-1.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\net.sf.jopt-simple\\jopt-simple\\5.0.2\\98cafc6081d5632b61be2c9e60650b64ddbc637c\\jopt-simple-5.0.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch\\hppc\\0.7.1\\8b5057f74ea378c0150a1860874a3ebdcb713767\\hppc-0.7.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\joda-time\\joda-time\\2.9.4\\1c295b462f16702ebe720bbb08f62e1ba80da41b\\joda-time-2.9.4.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.joda\\joda-convert\\1.2\\35ec554f0cd00c956cc69051514d9488b1374dec\\joda-convert-1.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.yaml\\snakeyaml\\1.15\\3b132bea69e8ee099f416044970997bde80f4ea6\\snakeyaml-1.15.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.core\\jackson-core\\2.8.1\\fd13b1c033741d48291315c6370f7d475a42dccf\\jackson-core-2.8.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-smile\\2.8.1\\5b73867bc12224946fc67fc8d49d9f5e698d7f\\jackson-dataformat-smile-2.8.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-yaml\\2.8.1\\eb63166c723b0b4b9fb5298fca232a2f6612ec34\\jackson-dataformat-yaml-2.8.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-cbor\\2.8.1\\3a6fb7e75c9972559a78cf5cfc5a48a41a13ea40\\jackson-dataformat-cbor-2.8.1.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.tdunning\\t-digest\\3.0\\84ccf145ac2215e6bfa63baa3101c0af41017cfc\\t-digest-3.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.hdrhistogram\\HdrHistogram\\2.1.6\\7495feb7f71ee124bd2a7e7d83590e296d71d80e\\HdrHistogram-2.1.6.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.locationtech.spatial4j\\spatial4j\\0.6\\21b15310bddcfd8c72611c180f20cf23279809a3\\spatial4j-0.6.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.vividsolutions\\jts\\1.13\\3ccfb9b60f04d71add996a666ceb8902904fd805\\jts-1.13.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-api\\2.6.2\\bd1b74a5d170686362091c7cf596bbc3adf5c09b\\log4j-api-2.6.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-core\\2.6.2\\a91369f655eb1639c6aece5c5eb5108db18306\\log4j-core-2.6.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-1.2-api\\2.6.2\\3b4c5a8b734b6a29b2f03380535a48da6284b210\\log4j-1.2-api-2.6.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\net.java.dev.jna\\jna\\4.2.2\\5012450aee579c3118ff09461d5ce210e0cdc2a9\\jna-4.2.2.jar;C:\\Users\\kmala\\workspace\\Team3\\test\\framework\\build\\distributions\\framework-5.0.0-alpha6-SNAPSHOT.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch.randomizedtesting\\randomizedtesting-runner\\2.3.2\\307965917fe8a22b7ee72deba39ef4b8e6ebc069\\randomizedtesting-runner-2.3.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\junit\\junit\\4.11\\4e031bb61df09069aeb2bffb4019e7a5034a4ee0\\junit-4.11.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.hamcrest\\hamcrest-all\\1.3\\63a21ebc981131004ad02e0434e799fd7f3a8d5a\\hamcrest-all-1.3.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-test-framework\\6.2.0\\f5026be3983acfb40d4092dbfbc015ec6e6addab\\lucene-test-framework-6.2.0.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-codecs\\6.2.0\\99f887266b0ad9f2c286b3976c5bc48c8cd36624\\lucene-codecs-6.2.0.jar;C:\\Users\\kmala\\workspace\\Team3\\client\\rest\\build\\distributions\\rest-5.0.0-alpha6-SNAPSHOT.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpclient\\4.5.2\\733db77aa8d9b2d68015189df76ab06304406e50\\httpclient-4.5.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore\\4.4.5\\e7501a1b34325abb00d17dde96150604a0658b54\\httpcore-4.4.5.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\commons-logging\\commons-logging\\1.1.3\\f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f\\commons-logging-1.1.3.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\commons-codec\\commons-codec\\1.10\\4b95f4897fa13f2cd904aee711aeafc0c5295cd8\\commons-codec-1.10.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.elasticsearch\\securemock\\1.2\\98201d4ad5ac93f6b415ae9172d52b5e7cda490e\\securemock-1.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpasyncclient\\4.1.2\\95aa3e6fb520191a0970a73cf09f62948ee614be\\httpasyncclient-4.1.2.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore-nio\\4.4.5\\f4be009e7505f6ceddf21e7960c759f413f15056\\httpcore-nio-4.4.5.jar;C:\\Users\\kmala\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch.randomizedtesting\\junit4-ant\\2.3.2\\dc8f03f6111974092491f35b8269eb0fc57f52f7\\junit4-ant-2.3.2.jar",
   "java.class.version": "52.0",
   "java.endorsed.dirs": "C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\endorsed",
   "java.ext.dirs": "C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\ext;C:\\Windows\\Sun\\Java\\lib\\ext",
   "java.home": "C:\\Program Files\\Java\\jdk1.8.0_102\\jre",
   "java.io.tmpdir": "./temp",
   "java.library.path": "C:\\Program Files\\Java\\jdk1.8.0_102\\bin;C:\\Windows\\Sun\\Java\\bin;C:\\Windows\\system32;C:\\Windows;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Tools\\curl-7.50.1\\bin;C:\\Program Files\\Git\\cmd;C:\\Tools\\gradle-2.13\\bin;C:\\Tools\\apache-maven-3.3.9\\bin;C:\\Program Files\\doxygen\\bin;C:\\Tools\\sonar-scanner-2.7\\bin;C:\\Windows\\system32\\config\\systemprofile\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Users\\kmala\\AppData\\Local\\Microsoft\\WindowsApps;;.",
   "java.runtime.name": "Java(TM) SE Runtime Environment",
   "java.runtime.version": "1.8.0_102-b14",
   "java.specification.name": "Java Platform API Specification",
   "java.specification.vendor": "Oracle Corporation",
   "java.specification.version": "1.8",
   "java.vendor": "Oracle Corporation",
   "java.vendor.url": "http://java.oracle.com/",
   "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
   "java.version": "1.8.0_102",
   "java.vm.info": "mixed mode",
   "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
   "java.vm.specification.name": "Java Virtual Machine Specification",
   "java.vm.specification.vendor": "Oracle Corporation",
   "java.vm.specification.version": "1.8",
   "java.vm.vendor": "Oracle Corporation",
   "java.vm.version": "25.102-b14",
   "jna.nosys": "true",
   "junit4.childvm.count": "3",
   "junit4.childvm.cwd": "C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1",
   "junit4.childvm.id": "1",
   "junit4.memory.total": "514850816",
   "junit4.pidString": "6936@DESKTOP-HP7QPF3",
   "junit4.processors": "4",
   "line.separator": "\r\n",
   "os.arch": "amd64",
   "os.name": "Windows 10",
   "os.version": "10.0",
   "path.separator": ";",
   "sun.arch.data.model": "64",
   "sun.boot.class.path": "C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\rt.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\sunrsasign.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\classes",
   "sun.boot.library.path": "C:\\Program Files\\Java\\jdk1.8.0_102\\jre\\bin",
   "sun.cpu.endian": "little",
   "sun.cpu.isalist": "amd64",
   "sun.desktop": "windows",
   "sun.io.unicode.encoding": "UnicodeLittle",
   "sun.java.command": "com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe -eventsfile C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\temp\\junit4-J1-20160918_124457_942.events @C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\temp\\junit4-J1-20160918_124457_942.suites -stdin",
   "sun.java.launcher": "SUN_STANDARD",
   "sun.jnu.encoding": "Cp1252",
   "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
   "sun.os.patch.level": "",
   "tests.artifact": "core",
   "tests.gradle": "true",
   "tests.ifNoTests": "fail",
   "tests.logger.level": "WARN",
   "tests.prefix": "tests",
   "tests.security.manager": "true",
   "tests.seed": "FD13852EF36FC81C",
   "tests.task": ":core:test",
   "user.country": "US",
   "user.dir": "C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1",
   "user.home": "C:\\Users\\kmala",
   "user.language": "en",
   "user.name": "kmala",
   "user.script": "",
   "user.timezone": "",
   "user.variant": ""
  }
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "children": [
    {
     "id": "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testForSingleDataNode",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testUnknownDiskUsage",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testFreeDiskPercentageAfterShardAssigned",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testCanRemainWithShardRelocatingAway",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThreshold",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThresholdWithAbsoluteSizes",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testAverageUsage",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testShardRelocationsTakenIntoAccount",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThresholdWithShardSizes",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195499371
 }
]

[
 "TEST_STARTED",
 "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,019][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding one master node, one data node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,472][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,524][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,530][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195513842,
  "executionTime": 2961
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,840][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,841][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,901][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,902][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,931][INFO ][org.elasticsearch.cluster.routing.allocation] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,932][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 1, unassigned: 0, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,933][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node1], [P], s[STARTED], a[id=_V1UIhCDQfKfoSk8HuvXeg]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195516805,
  "executionTime": 128
 }
]

[
 "TEST_STARTED",
 "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195516934,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,967][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195516956,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,981][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding two nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:16,981][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,010][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 1, unassigned: 1, initializing: 1, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,363][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:16.981Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=1Nt3-CDyTXKtAzRpgl-ewQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:16.981Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,364][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,364][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,372][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 1, unassigned: 1, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,372][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:16.981Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,373][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,373][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 1, unassigned: 1, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,373][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:16.981Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,374][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,375][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,378][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 0, initializing: 1, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,378][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=lOqb6iBWTd2qrMwpJKqKig], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:16.981Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,379][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,379][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,380][INFO ][org.elasticsearch.cluster.routing.allocation] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,381][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,386][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ], [test][0], node[node3], [R], s[STARTED], a[id=lOqb6iBWTd2qrMwpJKqKig]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,388][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> changing decider settings%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,397][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,398][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,399][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ], [test][0], node[node3], [R], s[STARTED], a[id=lOqb6iBWTd2qrMwpJKqKig]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,400][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> changing settings again%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,410][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,412][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,412][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=1Nt3-CDyTXKtAzRpgl-ewQ], [test][0], node[node3], [R], s[STARTED], a[id=lOqb6iBWTd2qrMwpJKqKig]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,413][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,414][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,465][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 1, relocating: 1, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,466][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node4], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=7wyL2SnxS36ys_j4rhgsQw, rId=1Nt3-CDyTXKtAzRpgl-ewQ], expected_shard_size[10]], relocating: [[test][0], node[node2], relocating [node4], [P], s[RELOCATING], a[id=1Nt3-CDyTXKtAzRpgl-ewQ, rId=7wyL2SnxS36ys_j4rhgsQw], expected_shard_size[10]], started: [[test][0], node[node3], [R], s[STARTED], a[id=lOqb6iBWTd2qrMwpJKqKig]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,466][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,467][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,468][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,469][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=7wyL2SnxS36ys_j4rhgsQw], [test][0], node[node3], [R], s[STARTED], a[id=lOqb6iBWTd2qrMwpJKqKig]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195516971,
  "executionTime": 498
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,501][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node1 and node2 node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,502][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,504][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 1, unassigned: 2, initializing: 1, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,504][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]], [test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=43k7987tRGmO09DW0npFZw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,506][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> nodeWithPrimary: node2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,506][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> nodeWithoutPrimary: node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,509][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,512][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 1, initializing: 2, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,512][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=43k7987tRGmO09DW0npFZw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10], [test][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=B3Il2YuGQd2IQgakzrfK1Q], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,513][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,514][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,518][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 2, unassigned: 1, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,523][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=43k7987tRGmO09DW0npFZw], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,528][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,528][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,530][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 1, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,531][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=rAWF48ysR9Syzx8x5piKLg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.501Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=43k7987tRGmO09DW0npFZw], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,532][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,532][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,533][INFO ][org.elasticsearch.cluster.routing.allocation] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,534][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,534][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=43k7987tRGmO09DW0npFZw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,535][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> changing decider settings%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,544][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,545][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,545][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=43k7987tRGmO09DW0npFZw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,545][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> changing settings again%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,608][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,609][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,609][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=43k7987tRGmO09DW0npFZw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,610][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,611][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,614][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 4, unassigned: 0, initializing: 1, relocating: 1, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,614][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node4], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=s3PE9PiMTdmd_5-jDprqBw, rId=43k7987tRGmO09DW0npFZw], expected_shard_size[10]], relocating: [[test][0], node[node2], relocating [node4], [P], s[RELOCATING], a[id=43k7987tRGmO09DW0npFZw, rId=s3PE9PiMTdmd_5-jDprqBw], expected_shard_size[10]], started: [[test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,615][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,615][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,617][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,617][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=s3PE9PiMTdmd_5-jDprqBw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg], [test][0], node[node1], [R], s[STARTED], a[id=B3Il2YuGQd2IQgakzrfK1Q]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,618][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node5%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,619][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,621][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 4, unassigned: 0, initializing: 1, relocating: 1, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,621][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node5], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=EEF35WiGRp-7wWacA3bDmw, rId=B3Il2YuGQd2IQgakzrfK1Q], expected_shard_size[10]], relocating: [[test][0], node[node1], relocating [node5], [R], s[RELOCATING], a[id=B3Il2YuGQd2IQgakzrfK1Q, rId=EEF35WiGRp-7wWacA3bDmw], expected_shard_size[10]], started: [[test][0], node[node4], [P], s[STARTED], a[id=s3PE9PiMTdmd_5-jDprqBw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,622][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,622][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,623][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> final cluster state:%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,623][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,623][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=s3PE9PiMTdmd_5-jDprqBw], [test][0], node[node5], [R], s[STARTED], a[id=EEF35WiGRp-7wWacA3bDmw], [test][0], node[node3], [R], s[STARTED], a[id=rAWF48ysR9Syzx8x5piKLg]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195517469,
  "executionTime": 155
 }
]

[
 "TEST_STARTED",
 "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195517624,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,654][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding two nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,655][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,657][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 4, unassigned: 0, initializing: 4, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,658][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test2][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=ux9eYIVMSDOBeFPl9n-Viw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.654Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[1], [test][0], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=cW0XSoQWTa-qUMYyiGsR9Q], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.654Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[14], [test2][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=eIuKTdu9S6eoxj8h5vgD5g], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.654Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[1], [test][0], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=Y8eKqPwXRXOYriicu5noiw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.654Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[14]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,661][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,661][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,664][INFO ][org.elasticsearch.cluster.routing.allocation] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0], [test][0], [test2][0], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,665][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 4, unassigned: 0, initializing: 0, relocating: 0, started: 4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,665][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [], relocating: [], started: [[test2][0], node[node2], [P], s[STARTED], a[id=ux9eYIVMSDOBeFPl9n-Viw], [test][0], node[node2], [R], s[STARTED], a[id=cW0XSoQWTa-qUMYyiGsR9Q], [test2][0], node[node1], [R], s[STARTED], a[id=eIuKTdu9S6eoxj8h5vgD5g], [test][0], node[node1], [P], s[STARTED], a[id=Y8eKqPwXRXOYriicu5noiw]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,666][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,792][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,897][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 5, unassigned: 0, initializing: 1, relocating: 1, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,897][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [], initializing: [[test][0], node[node3], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=jz_gfu0-TDqGQW9GP1CcSg, rId=cW0XSoQWTa-qUMYyiGsR9Q], expected_shard_size[14]], relocating: [[test][0], node[node2], relocating [node3], [R], s[RELOCATING], a[id=cW0XSoQWTa-qUMYyiGsR9Q, rId=jz_gfu0-TDqGQW9GP1CcSg], expected_shard_size[14]], started: [[test2][0], node[node2], [P], s[STARTED], a[id=ux9eYIVMSDOBeFPl9n-Viw], [test2][0], node[node1], [R], s[STARTED], a[id=eIuKTdu9S6eoxj8h5vgD5g], [test][0], node[node1], [P], s[STARTED], a[id=Y8eKqPwXRXOYriicu5noiw]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,897][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195517630,
  "executionTime": 283
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,963][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> adding node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,964][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,964][WARN ][org.elasticsearch.cluster.routing.allocation.decider] after allocating, node [node1] would have more than the allowed 29%25 free disk threshold (21%25 free), preventing allocation%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,965][INFO ][org.elasticsearch.cluster.routing.allocation] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,967][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,967][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> counts: total: 0, unassigned: 1, initializing: 0, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:45:17,967][INFO ][org.elasticsearch.cluster.routing.allocation.decider] --> unassigned: [[test][0], node[null], [P], recovery_source[new shard recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:45:17.963Z], delayed=false, allocation_status[deciders_no]]], initializing: [], relocating: [], started: []%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1474195517915,
  "executionTime": 54
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
  "startTimestamp": 1474195499371,
  "executionTime": 18762
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "displayName": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "children": [
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195518244
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1474195518297,
  "executionTime": 104
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1474195518401,
  "executionTime": 38
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1474195518439,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
  "startTimestamp": 1474195518244,
  "executionTime": 203
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "displayName": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "children": [
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testThatSerializationIncludesAllElements",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testDefaultConfiguration",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195518504
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,756][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,933][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.7gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,933][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,940][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,954][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:18,960][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,082][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,083][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,133][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[1]}, bound_addresses {local[1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,336][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{VwOlggTsTjayXihGdym0ew}{6NzGZjJnRWSKD-pqiV-mlg}{local}{local[1]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,349][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:42,548][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:43,249][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:44,530][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:45,778][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1474195518688,
  "executionTime": 27152
 }
]

[
 "TEST_STARTED",
 "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:45,864][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:45,933][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:45,950][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testThatSerializationIncludesAllElements]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1474195545840,
  "executionTime": 169
 }
]

[
 "TEST_STARTED",
 "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,023][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,185][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,203][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1474195546009,
  "executionTime": 253
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,279][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,445][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,470][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testDefaultConfiguration]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1474195546262,
  "executionTime": 268
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,531][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,535][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,535][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:45:46,551][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
  "startTimestamp": 1474195518504,
  "executionTime": 28108
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "displayName": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "children": [
    {
     "id": "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testAddingAClosedReader",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    },
    {
     "id": "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testMissingShard",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195546623
 }
]

[
 "TEST_STARTED",
 "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1474195546670,
  "executionTime": 861
 }
]

[
 "TEST_STARTED",
 "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1474195547531,
  "executionTime": 65
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1474195547596,
  "executionTime": 738
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
  "startTimestamp": 1474195546623,
  "executionTime": 1715
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.rest.RestUtilsTests",
   "displayName": "org.elasticsearch.rest.RestUtilsTests",
   "methodName": null,
   "className": "org.elasticsearch.rest.RestUtilsTests",
   "children": [
    {
     "id": "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testCrazyURL",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testDecodeQueryStringEdgeCases",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testDecodeQueryString",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testCorsSettingIsARegex",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195548346
 }
]

[
 "TEST_STARTED",
 "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1474195548370,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1474195548378,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1474195548381,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1474195548387,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.rest.RestUtilsTests",
  "startTimestamp": 1474195548346,
  "executionTime": 71
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
   "displayName": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
   "children": [
    {
     "id": "ID#testIllegalShardFailureRequests(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "displayName": "testIllegalShardFailureRequests(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "methodName": "testIllegalShardFailureRequests",
     "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
     "children": []
    },
    {
     "id": "ID#testTriviallySuccessfulTasksBatchedWithFailingTasks(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "displayName": "testTriviallySuccessfulTasksBatchedWithFailingTasks(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "methodName": "testTriviallySuccessfulTasksBatchedWithFailingTasks",
     "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateFailuresAreOkay(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "displayName": "testDuplicateFailuresAreOkay(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "methodName": "testDuplicateFailuresAreOkay",
     "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
     "children": []
    },
    {
     "id": "ID#testNonExistentShardsAreMarkedAsSuccessful(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "displayName": "testNonExistentShardsAreMarkedAsSuccessful(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "methodName": "testNonExistentShardsAreMarkedAsSuccessful",
     "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
     "children": []
    },
    {
     "id": "ID#testEmptyTaskListProducesSameClusterState(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "displayName": "testEmptyTaskListProducesSameClusterState(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
     "methodName": "testEmptyTaskListProducesSameClusterState",
     "className": "org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195548430
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalShardFailureRequests(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalShardFailureRequests(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
  "startTimestamp": 1474195548534,
  "executionTime": 163
 }
]

[
 "TEST_STARTED",
 "ID#testTriviallySuccessfulTasksBatchedWithFailingTasks(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-18 19:30:48,809 TEST-ShardFailedClusterStateTaskExecutorTests.testTriviallySuccessfulTasksBatchedWithFailingTasks-seed#[FD13852EF36FC81C] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:63)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.warn(AbstractLogger.java:2536)%0D%0A%09at org.elasticsearch.cluster.action.shard.ShardStateAction$ShardFailedClusterStateTaskExecutor.execute(ShardStateAction.java:320)%0D%0A%09at org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests.testTriviallySuccessfulTasksBatchedWithFailingTasks(ShardFailedClusterStateTaskExecutorTests.java:127)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:498)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTriviallySuccessfulTasksBatchedWithFailingTasks(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
  "startTimestamp": 1474195548697,
  "executionTime": 140
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateFailuresAreOkay(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateFailuresAreOkay(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
  "startTimestamp": 1474195548838,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistentShardsAreMarkedAsSuccessful(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistentShardsAreMarkedAsSuccessful(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
  "startTimestamp": 1474195548915,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyTaskListProducesSameClusterState(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyTaskListProducesSameClusterState(org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests)",
  "startTimestamp": 1474195548931,
  "executionTime": 37
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.action.shard.ShardFailedClusterStateTaskExecutorTests",
  "startTimestamp": 1474195548430,
  "executionTime": 551
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
   "displayName": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
   "children": [
    {
     "id": "ID#testFromXContent(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
     "children": []
    },
    {
     "id": "ID#testInvalidBuilderException(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "displayName": "testInvalidBuilderException(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "methodName": "testInvalidBuilderException",
     "className": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195549032
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
  "startTimestamp": 1474195549138,
  "executionTime": 1548
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidBuilderException(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidBuilderException(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
  "startTimestamp": 1474195550687,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
  "startTimestamp": 1474195550690,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.MultiPointBuilderTests)",
  "startTimestamp": 1474195550697,
  "executionTime": 29
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.builders.MultiPointBuilderTests",
  "startTimestamp": 1474195549032,
  "executionTime": 1697
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.serialization.DiffableTests",
   "displayName": "org.elasticsearch.cluster.serialization.DiffableTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.serialization.DiffableTests",
   "children": [
    {
     "id": "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testImmutableOpenIntMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    },
    {
     "id": "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testJKDMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    },
    {
     "id": "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testImmutableOpenMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195550978
 }
]

[
 "TEST_STARTED",
 "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1474195551015,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1474195551091,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1474195551099,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.serialization.DiffableTests",
  "startTimestamp": 1474195550978,
  "executionTime": 136
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.translog.TranslogVersionTests",
   "displayName": "org.elasticsearch.index.translog.TranslogVersionTests",
   "methodName": null,
   "className": "org.elasticsearch.index.translog.TranslogVersionTests",
   "children": [
    {
     "id": "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testTruncatedTranslog",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testV1ChecksummedTranslogVersion",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testV0LegacyTranslogVersion",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testCorruptedTranslogs",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195551224
 }
]

[
 "TEST_STARTED",
 "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1474195551253,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1474195551264,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1474195551272,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1474195551279,
  "executionTime": 18
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.translog.TranslogVersionTests",
  "startTimestamp": 1474195551224,
  "executionTime": 75
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "displayName": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "children": [
    {
     "id": "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "displayName": "testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "methodName": "testTwoPhaseIterator",
     "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
     "children": []
    },
    {
     "id": "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "displayName": "testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "methodName": "testRegularIterator",
     "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195551325
 }
]

[
 "TEST_STARTED",
 "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
  "startTimestamp": 1474195551338,
  "executionTime": 81
 }
]

[
 "TEST_STARTED",
 "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
  "startTimestamp": 1474195551419,
  "executionTime": 33
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
  "startTimestamp": 1474195551325,
  "executionTime": 129
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "displayName": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "children": [
    {
     "id": "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSetInvalidTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteProvidedTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailureWithNestedOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecutePropagateAllMetaDataUpdates",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteEmptyPipeline",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSuccess",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSuccessWithOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteBulkPipelineDoesNotExist",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testUpdatingStatsWhenRemovingPipelineWorks",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testBulkRequestExecution",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testStats",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailureWithOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteIndexPipelineDoesNotExist",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSetTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testBulkRequestExecutionWithFailures",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195551486
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195551529,
  "executionTime": 1614
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553144,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553162,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553209,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553219,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553224,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553228,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553233,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553248,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553321,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553328,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553332,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553341,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553365,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553371,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1474195553380,
  "executionTime": 21
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.PipelineExecutionServiceTests",
  "startTimestamp": 1474195551486,
  "executionTime": 1919
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.slice.TermsSliceQueryTests",
   "displayName": "org.elasticsearch.search.slice.TermsSliceQueryTests",
   "methodName": null,
   "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
   "children": [
    {
     "id": "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "displayName": "testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "methodName": "testSearch",
     "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "displayName": "testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195553477
 }
]

[
 "TEST_STARTED",
 "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
  "startTimestamp": 1474195553497,
  "executionTime": 544
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
  "startTimestamp": 1474195554042,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.slice.TermsSliceQueryTests",
  "startTimestamp": 1474195553477,
  "executionTime": 569
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.analyze.HunspellServiceTests",
   "displayName": "org.elasticsearch.indices.analyze.HunspellServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
   "children": [
    {
     "id": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testDicWithTwoAffs",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testLocaleDirectoryWithNodeLevelConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testLocaleDirectoryWithLocaleSpecificConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testDicWithNoAff",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195554054
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "28-09-18 06:45:54,237 TEST-HunspellServiceTests.testDicWithTwoAffs-seed#[FD13852EF36FC81C] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:63)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.error(AbstractLogger.java:743)%0D%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:143)%0D%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:106)%0D%0A%09at org.elasticsearch.indices.analyze.HunspellServiceTests.lambda$testDicWithTwoAffs$1(HunspellServiceTests.java:89)%0D%0A%09at org.apache.lucene.util.LuceneTestCase.expectThrows(LuceneTestCase.java:2677)%0D%0A%09at org.elasticsearch.indices.analyze.HunspellServiceTests.testDicWithTwoAffs(HunspellServiceTests.java:88)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:498)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1474195554081,
  "executionTime": 189
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1474195554270,
  "executionTime": 1898
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1474195556169,
  "executionTime": 2548
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1474195558717,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.analyze.HunspellServiceTests",
  "startTimestamp": 1474195554054,
  "executionTime": 4678
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "displayName": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "methodName": null,
   "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "children": [
    {
     "id": "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testIllegalOverheadSettings",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testNegativeSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testDisabledSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testMissingSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testEmptySettingsAreOkay",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195558743
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1474195558767,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1474195558839,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1474195558863,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1474195558869,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1474195558877,
  "executionTime": 9
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
  "startTimestamp": 1474195558743,
  "executionTime": 145
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.JarHellTests",
   "displayName": "org.elasticsearch.bootstrap.JarHellTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.JarHellTests",
   "children": [
    {
     "id": "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testLog4jLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testValidVersions",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testCrazyEclipseClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testXmlBeansLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDirAndJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testGoodESVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDifferentJars",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBaseDateTimeLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBadESVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testParseClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBadJDKVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testEmptyClassPathUnix",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testWithinSingleJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testRequiredJDKVersionIsOK",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testInvalidVersions",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDirsOnClasspath",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDuplicateClasspathLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testEmptyClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testParseClassPathUnix",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testRequiredJDKVersionTooOld",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195558899
 }
]

[
 "TEST_STARTED",
 "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195558936,
  "executionTime": 250
 }
]

[
 "TEST_STARTED",
 "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195559187,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195559189,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195559199,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195559255,
  "executionTime": 3436
 }
]

[
 "TEST_STARTED",
 "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195562691,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195562737,
  "executionTime": 190
 }
]

[
 "TEST_STARTED",
 "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195562927,
  "executionTime": 356
 }
]

[
 "TEST_STARTED",
 "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563283,
  "executionTime": 51
 }
]

[
 "TEST_STARTED",
 "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563335,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563341,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "message": "test is designed for unix-like systems only",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:D8848AB034702C0F]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.bootstrap.JarHellTests.testEmptyClassPathUnix(JarHellTests.java:265)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563388,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563413,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563453,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563491,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563494,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563511,
  "executionTime": 150
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563662,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "message": "test is designed for unix-like systems only",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:A097B5DF060371]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.bootstrap.JarHellTests.testParseClassPathUnix(JarHellTests.java:251)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563664,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1474195563668,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.JarHellTests",
  "startTimestamp": 1474195558899,
  "executionTime": 4857
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.recycler.QueueRecyclerTests",
   "displayName": "org.elasticsearch.common.recycler.QueueRecyclerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
   "children": [
    {
     "id": "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testDoubleRelease",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testReuse",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testClose",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testRecycle",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testDestroyWhenOverCapacity",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195563768
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1474195563800,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1474195563831,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1474195563863,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1474195563867,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1474195563869,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.recycler.QueueRecyclerTests",
  "startTimestamp": 1474195563768,
  "executionTime": 130
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.tasks.TaskIdTests",
   "displayName": "org.elasticsearch.tasks.TaskIdTests",
   "methodName": null,
   "className": "org.elasticsearch.tasks.TaskIdTests",
   "children": [
    {
     "id": "ID#testSerializationOfEmpty(org.elasticsearch.tasks.TaskIdTests)",
     "displayName": "testSerializationOfEmpty(org.elasticsearch.tasks.TaskIdTests)",
     "methodName": "testSerializationOfEmpty",
     "className": "org.elasticsearch.tasks.TaskIdTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.tasks.TaskIdTests)",
     "displayName": "testSerialization(org.elasticsearch.tasks.TaskIdTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.tasks.TaskIdTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195563905
 }
]

[
 "TEST_STARTED",
 "ID#testSerializationOfEmpty(org.elasticsearch.tasks.TaskIdTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerializationOfEmpty(org.elasticsearch.tasks.TaskIdTests)",
  "startTimestamp": 1474195563935,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.tasks.TaskIdTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.tasks.TaskIdTests)",
  "startTimestamp": 1474195563938,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.tasks.TaskIdTests",
  "startTimestamp": 1474195563905,
  "executionTime": 49
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "displayName": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testBuildWordScorer",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195563966
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1474195564005,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1474195564008,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1474195564011,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1474195564015,
  "executionTime": 164
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
  "startTimestamp": 1474195563966,
  "executionTime": 217
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testNumeric",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testParseFailsWithMultipleFields",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testBlendedRewriteMethod",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195564242
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:04,462][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{WAI9kgmVRg6hTJUvMyKwog}{local}{local[50]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:04,497][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:04,498][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,019][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,020][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,020][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,101][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,102][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,102][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,108][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,109][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,109][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,113][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,113][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,113][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,118][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,118][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,118][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,127][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,127][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,127][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,131][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,132][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,132][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,137][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,137][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,137][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,144][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,144][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:16:05,144][WARN ][org.elasticsearch.deprecation.index.mapper]  [HICmuHZ] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195564374,
  "executionTime": 791
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565165,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565184,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565193,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565216,
  "executionTime": 85
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565301,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565305,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565309,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565312,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565316,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565320,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565324,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1474195565327,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.PrefixQueryBuilderTests",
  "startTimestamp": 1474195564242,
  "executionTime": 1101
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.recovery.RecoveriesCollectionTests",
   "displayName": "org.elasticsearch.recovery.RecoveriesCollectionTests",
   "methodName": null,
   "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
   "children": [
    {
     "id": "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testRecoveryCancellation",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testResetRecovery",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testIndexingDuringFileRecovery",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testRecoveryTimeout",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testLastAccessTimeUpdate",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195565481
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1474195565534,
  "executionTime": 354
 }
]

[
 "TEST_STARTED",
 "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1474195565888,
  "executionTime": 1237
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,179][DEBUG][org.elasticsearch.index.shard] [s0] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,199][TRACE][org.elasticsearch.index.shard] [s0] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=MZlLLh2kTgqqrDyUBAoH1Q]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,253][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,254][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=WwgWbvlRQMW6etzMBhkQKg]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,282][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,283][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] starting recovery from store ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,326][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [post recovery from shard_store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,327][TRACE][org.elasticsearch.index.shard] [s1] [test][0] recovery completed from [shard_store], took [43ms]%0A    index    : files           [0] with total_size [0b], took[1ms]%0A             : recovered_files [0] with total_size [0b]%0A             : reusing_files   [0] with total_size [0b]%0A    verify_index    : took [0s], check_index [0s]%0A    translog : number_of_operations [0], took [41ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,327][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,327][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,328][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,426][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,426][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,427][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,428][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@d336075]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,439][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@49246c68]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,444][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@31395cea]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,445][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@30034c0c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,446][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@16514cd4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,447][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@3aa5fd72]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,448][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@6f2f2411]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,449][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@fef2fba]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,450][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@4d2cb16c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,451][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@1391713]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,452][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@5a3da6c9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,453][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@f115fe8]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,454][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@5c0a2b37]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,455][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@55797e4d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,456][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@5577b42]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,457][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@5fb9046b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,458][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@2411b614]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,459][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@161d692f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,460][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@3724fd59]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,461][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@4e603eaf]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,462][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@22221367]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,463][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@15a65440]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,468][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,668][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,924][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,924][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=Ri3QgJhvTsyS5FlmQfaP6w]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:07,946][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,029][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@63f64bd0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,037][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@38935ac8]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,068][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@1eb24cd3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,070][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@7d710158]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,072][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@1c2a7525]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,073][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@386d2bbc]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,074][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@74e9b906]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,075][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@74febf06]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,076][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@5d5300b5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,079][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@312dbd6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,080][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@7f56f07e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,081][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@42a2fdf1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,085][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@1821f7a6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,087][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@40cae8f7]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,089][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@668a8f30]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,090][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@72571cac]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,092][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@3fbbefd5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,093][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@7e68dd1f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,094][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@43789654]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,095][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@4f4ee25f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,097][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@310279a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,098][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@7e8bd26a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,099][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@1649516a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,100][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@c43c8ba]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,217][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][12]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,217][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@45d8c03d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,225][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][13]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,225][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@565e6a9b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,226][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,226][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@44877e22]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,227][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][15]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,227][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@4875ff7a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,228][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][16]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,228][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@e472b0a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,229][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,229][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@561c9a4b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,230][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][18]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,230][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@61119e94]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,231][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][19]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,232][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@4be9a090]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,232][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,232][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@3fc030dc]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,233][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][21]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,233][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@6d7310a7]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,240][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][22]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,241][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@465fdca7]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,241][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][23]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,242][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@1e6a7c9a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,579][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,579][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,579][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,582][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [147.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,849][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [147.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:08,861][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [147.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,085][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [147.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,087][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,087][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [0b] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,090][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,309][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:09,495][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1474195567125,
  "executionTime": 2684
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1474195569809,
  "executionTime": 228
 }
]

[
 "TEST_STARTED",
 "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1474195570037,
  "executionTime": 131
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.recovery.RecoveriesCollectionTests",
  "startTimestamp": 1474195565481,
  "executionTime": 4979
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "children": [
    {
     "id": "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testSingleShardMultipleAllocationFailures",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFirstAllocationFailureTwoNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailPrimaryStartedCheckReplicaElected",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testRebalanceFailure",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailedShardPrimaryRelocatingToAndFrom",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFirstAllocationFailureSingleNode",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailAllReplicasInitializingOnPrimaryFail",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195570471
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,536][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,538][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding 5 nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,542][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] failing shard on node [node0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,542][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] failing shard on node [node1]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570527,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,572][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,572][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,574][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the first shard, will start INITIALIZING on the second node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,575][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570555,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,584][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,585][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,586][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,587][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (backups)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,589][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,589][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the primary shard, will have no place to be rerouted to (single node), so stays unassigned%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,591][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570576,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570591,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,637][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,638][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,639][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,641][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (backups)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,643][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,643][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding third node and reroute%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,645][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Fail the shards on node 3%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570628,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,654][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,654][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,663][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,663][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,663][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,664][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,667][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node3 being initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,668][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,669][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node1 being relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,671][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570647,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,697][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,703][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding single node and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,705][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the first shard, will have no place to be rerouted to (single node), so stays unassigned%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,706][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570671,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,767][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:46:10,777][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1474195570707,
  "executionTime": 70
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
  "startTimestamp": 1474195570471,
  "executionTime": 310
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.settings.SettingsTests",
   "displayName": "org.elasticsearch.common.settings.SettingsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.settings.SettingsTests",
   "children": [
    {
     "id": "ID#testNames(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testNames(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testNames",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testReplacePropertiesPlaceholderIgnoresPrompt(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testReplacePropertiesPlaceholderIgnoresPrompt(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testReplacePropertiesPlaceholderIgnoresPrompt",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testReplacePropertiesPlaceholderByEnvironmentVariables(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testReplacePropertiesPlaceholderByEnvironmentVariables(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testReplacePropertiesPlaceholderByEnvironmentVariables",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testPrefixNormalization(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testPrefixNormalization(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testPrefixNormalization",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testUnFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testUnFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testUnFlattenedSettings",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testGetAsSettings(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testGetAsSettings(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testGetAsSettings",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testFallbackToFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testFallbackToFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testFallbackToFlattenedSettings",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testThatArraysAreOverriddenCorrectly(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testThatArraysAreOverriddenCorrectly(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testThatArraysAreOverriddenCorrectly",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    },
    {
     "id": "ID#testReplacePropertiesPlaceholderSystemProperty(org.elasticsearch.common.settings.SettingsTests)",
     "displayName": "testReplacePropertiesPlaceholderSystemProperty(org.elasticsearch.common.settings.SettingsTests)",
     "methodName": "testReplacePropertiesPlaceholderSystemProperty",
     "className": "org.elasticsearch.common.settings.SettingsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195570790
 }
]

[
 "TEST_STARTED",
 "ID#testNames(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNames(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195570935,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testReplacePropertiesPlaceholderIgnoresPrompt(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplacePropertiesPlaceholderIgnoresPrompt(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195570938,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReplacePropertiesPlaceholderByEnvironmentVariables(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplacePropertiesPlaceholderByEnvironmentVariables(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195570941,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testPrefixNormalization(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrefixNormalization(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195570977,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195570980,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195571048,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testGetAsSettings(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetAsSettings(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195571051,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFallbackToFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFallbackToFlattenedSettings(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195571055,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThatArraysAreOverriddenCorrectly(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatArraysAreOverriddenCorrectly(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195571057,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testReplacePropertiesPlaceholderSystemProperty(org.elasticsearch.common.settings.SettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplacePropertiesPlaceholderSystemProperty(org.elasticsearch.common.settings.SettingsTests)",
  "startTimestamp": 1474195571077,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.settings.SettingsTests",
  "startTimestamp": 1474195570790,
  "executionTime": 292
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "displayName": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "children": [
    {
     "id": "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testAllFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    },
    {
     "id": "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testNonDeletedFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    },
    {
     "id": "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testFilterFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195571090
 }
]

[
 "TEST_STARTED",
 "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1474195571145,
  "executionTime": 2889
 }
]

[
 "TEST_STARTED",
 "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1474195574034,
  "executionTime": 1546
 }
]

[
 "TEST_STARTED",
 "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1474195575580,
  "executionTime": 716
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
  "startTimestamp": 1474195571090,
  "executionTime": 5208
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195576308
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:46:16,399][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{wRFd5zfrQIWY-eXr3CIxpg}{local}{local[75]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1474195576441,
  "executionTime": 124
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1474195576565,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1474195576568,
  "executionTime": 35
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.PercentilesTests",
  "startTimestamp": 1474195576308,
  "executionTime": 299
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.StopAnalyzerTests",
   "displayName": "org.elasticsearch.index.analysis.StopAnalyzerTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.StopAnalyzerTests",
   "children": [
    {
     "id": "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
     "displayName": "testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
     "methodName": "testDefaultsCompoundAnalysis",
     "className": "org.elasticsearch.index.analysis.StopAnalyzerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195576630
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
  "startTimestamp": 1474195576644,
  "executionTime": 50
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.StopAnalyzerTests",
  "startTimestamp": 1474195576630,
  "executionTime": 67
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "displayName": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "children": [
    {
     "id": "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidUnescaped",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidDateMathFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_EscapeStatic",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidEmptyDateMathFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_Static",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_MultiParts",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testNormal",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_MixedArray",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomTimeZoneInIndexName",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_EscapeDateFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomTimeZoneInSetting",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidOpenEnded",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195576706
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576734,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576736,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576738,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576741,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576763,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576765,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576767,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576773,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576775,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576778,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:16:16,808][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] timezone: [+07:24], now [2016-09-18T00:00:00.784Z], name: [.marvel-2016.09.18]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576782,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576813,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:16:16,853][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] timezone: [-11:04], now [2016-09-18T00:00:00.852Z], name: [.marvel-2016.09.17]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576816,
  "executionTime": 38
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576854,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1474195576856,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
  "startTimestamp": 1474195576706,
  "executionTime": 154
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "displayName": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "children": [
    {
     "id": "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testDoubleRelease",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testReuse",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testClose",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testRecycle",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testDestroyWhenOverCapacity",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195576869
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1474195576938,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1474195576943,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1474195576947,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1474195576949,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1474195576952,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
  "startTimestamp": 1474195576869,
  "executionTime": 95
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.ParentFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.ParentFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195576974
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.ParentFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
  "startTimestamp": 1474195577311,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.ParentFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
  "startTimestamp": 1474195577366,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.ParentFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
  "startTimestamp": 1474195577369,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.ParentFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
  "startTimestamp": 1474195577372,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.ParentFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.ParentFieldTypeTests)",
  "startTimestamp": 1474195577389,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.ParentFieldTypeTests",
  "startTimestamp": 1474195576974,
  "executionTime": 422
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.BoostingQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
   "children": [
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testFromJsonEmptyQueryBody(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testFromJsonEmptyQueryBody",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testRewrite",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.BoostingQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195577404
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,598][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{Lrt_SkU-QQWo0Lvl06sdMQ}{local}{local[76]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,608][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,610][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,707][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,708][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,708][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,713][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,713][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,714][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,720][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,720][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,721][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,726][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,726][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,734][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,747][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,747][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,747][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,760][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,760][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,760][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,770][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,770][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,771][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,776][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,776][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,777][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,822][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,822][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,822][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,825][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,825][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,825][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,860][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,860][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,861][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,881][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,882][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,882][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,889][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,890][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,890][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:17,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [KfQqxcuI] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195577534,
  "executionTime": 570
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578105,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578112,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578127,
  "executionTime": 101
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578228,
  "executionTime": 114
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578343,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578347,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:18,355][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [1:36]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:18,355][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [1:75]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:46:18,356][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [1:75]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578353,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578360,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578369,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewrite(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578383,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.BoostingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.BoostingQueryBuilderTests)",
  "startTimestamp": 1474195578390,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.BoostingQueryBuilderTests",
  "startTimestamp": 1474195577404,
  "executionTime": 994
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "displayName": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "methodName": null,
   "className": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "children": [
    {
     "id": "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
     "displayName": "testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
     "methodName": "testBuildTable",
     "className": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195578405
 }
]

[
 "TEST_STARTED",
 "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
  "startTimestamp": 1474195578462,
  "executionTime": 384
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.rest.action.cat.RestIndicesActionTests",
  "startTimestamp": 1474195578405,
  "executionTime": 499
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.collect.EvictingQueueTests",
   "displayName": "org.elasticsearch.common.collect.EvictingQueueTests",
   "methodName": null,
   "className": "org.elasticsearch.common.collect.EvictingQueueTests",
   "children": [
    {
     "id": "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeZero",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeOne",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testCreateWithZeroSize",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testCreateWithNegativeSize",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeThree",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testEvictingAfterOne",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testEvictingAfterThree",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testAddAll",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195578921
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195578993,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579029,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579031,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579034,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579036,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579038,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579040,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1474195579042,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.collect.EvictingQueueTests",
  "startTimestamp": 1474195578921,
  "executionTime": 125
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchServiceTests",
   "displayName": "org.elasticsearch.search.SearchServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchServiceTests",
   "children": [
    {
     "id": "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearOnStop",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testSearchWhileIndexDeleted",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearIndexDelete",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testCloseSearchContextOnRewriteException",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearOnClose",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195579068
 }
]

[
 "TEST_STARTED",
 "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,315][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,471][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,471][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,486][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,489][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,489][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,949][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,950][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:19,950][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[2]}, bound_addresses {local[2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,043][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{C-xe6fW6RPSO6hVQNqVW_A}{oUppHNSkRHSz-LAnrbS3TQ}{local}{local[2]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,046][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,096][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,121][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,202][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:20,319][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/5Be7zFMPTau0BZOVw28W3A] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,608][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearOnStop]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,648][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,649][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,649][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,651][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,671][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,694][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,694][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,699][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,701][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,701][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,840][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,840][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,841][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[3]}, bound_addresses {local[3]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,844][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{n_hSiO-WRKi-UDZTR5rHDQ}{N9CmuWCZSL6BUeF7J5vxUw}{local}{local[3]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,845][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,899][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1474195579184,
  "executionTime": 2739
 }
]

[
 "TEST_STARTED",
 "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:21,930][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:22,040][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:22,061][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/beANDquQSxu2LEv_ApL_mg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,107][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testSearchWhileIndexDeleted]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,371][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,372][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,372][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,374][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,387][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,449][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,449][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,458][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,460][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,461][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,748][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,749][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,749][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[4]}, bound_addresses {local[4]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,753][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{syJ8XoAJQ9Sb0LX04kMpFw}{kHKy_31SQRKtJH8pvTvrNg}{local}{local[4]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,754][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,769][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1474195581923,
  "executionTime": 20867
 }
]

[
 "TEST_STARTED",
 "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,798][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,865][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:42,884][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/-w74ogWmQoCCIN4CX87Q-w] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,137][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearIndexDelete]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,138][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,139][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,139][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,142][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,152][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,173][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,173][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,177][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,180][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,180][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,341][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,342][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,342][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[5]}, bound_addresses {local[5]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,346][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{u7c0LnyfQZCNoZZwUNMRLA}{23RmFykUQmOTXgr5xrurMA}{local}{local[5]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,346][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,370][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1474195602790,
  "executionTime": 596
 }
]

[
 "TEST_STARTED",
 "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,394][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,543][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,566][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/4jiTxBjASpeKkV9IN79RXQ] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,746][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testCloseSearchContextOnRewriteException]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,797][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,798][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,798][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,800][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,815][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,840][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,840][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,851][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,857][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:43,857][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,032][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,033][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,033][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[6]}, bound_addresses {local[6]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,035][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{wJiQh_-bSDua5pdn0OdPbA}{Z7sSZrmxReaeH8x5CmpKCA}{local}{local[6]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,036][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,055][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1474195603386,
  "executionTime": 692
 }
]

[
 "TEST_STARTED",
 "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,086][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,196][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,217][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/7sAzb4aoS9iwF624_obTSg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,411][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearOnClose]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,447][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,448][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,448][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,459][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,472][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,517][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,517][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,576][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,585][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,586][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,742][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,742][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,742][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[7]}, bound_addresses {local[7]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,749][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{eqEYQyuRSPmuTowK_CnGNg}{94dVwgGcRTKAs56fz3ayLA}{local}{local[7]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,750][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,772][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1474195604078,
  "executionTime": 710
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,789][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,789][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,790][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:44,792][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchServiceTests",
  "startTimestamp": 1474195579068,
  "executionTime": 25982
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.env.ESFileStoreTests",
   "displayName": "org.elasticsearch.env.ESFileStoreTests",
   "methodName": null,
   "className": "org.elasticsearch.env.ESFileStoreTests",
   "children": [
    {
     "id": "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
     "displayName": "testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
     "methodName": "testNegativeSpace",
     "className": "org.elasticsearch.env.ESFileStoreTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605056
 }
]

[
 "TEST_STARTED",
 "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
  "startTimestamp": 1474195605080,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.env.ESFileStoreTests",
  "startTimestamp": 1474195605056,
  "executionTime": 39
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.StringFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.StringFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.StringFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.StringFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605104
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.StringFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.StringFieldTypeTests)",
  "startTimestamp": 1474195605132,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.StringFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.StringFieldTypeTests)",
  "startTimestamp": 1474195605135,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.StringFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.StringFieldTypeTests)",
  "startTimestamp": 1474195605137,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.StringFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.StringFieldTypeTests)",
  "startTimestamp": 1474195605140,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.StringFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.StringFieldTypeTests)",
  "startTimestamp": 1474195605143,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.StringFieldTypeTests",
  "startTimestamp": 1474195605104,
  "executionTime": 45
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testRewriteWithInnerName",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testIllegalArgument",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testRewriteWithInnerBoost",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605158
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,187][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{dqomeFLHTHODgOiGUgkKaA}{local}{local[77]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,196][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,197][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,221][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,221][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,221][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,223][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,224][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,224][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,227][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,227][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,227][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,229][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,229][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,229][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,232][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,232][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,232][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,236][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,237][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,237][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,242][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,242][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,242][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,245][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,245][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,246][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,250][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,250][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,250][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,252][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,252][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,252][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,255][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,256][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,256][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,260][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,261][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,261][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,263][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,263][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,263][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,267][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,267][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,267][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,272][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,272][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:45,272][WARN ][org.elasticsearch.deprecation.index.mapper]  [NK] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605180,
  "executionTime": 105
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605285,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605289,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605292,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605296,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605298,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605308,
  "executionTime": 233
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605541,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605545,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605551,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605576,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1474195605579,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.WrapperQueryBuilderTests",
  "startTimestamp": 1474195605158,
  "executionTime": 428
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.IdFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.IdFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
   "children": [
    {
     "id": "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testRangeQuery",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605593
 }
]

[
 "TEST_STARTED",
 "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605613,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605615,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605618,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605620,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605622,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1474195605624,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.IdFieldTypeTests",
  "startTimestamp": 1474195605593,
  "executionTime": 36
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.IndicesModuleTests",
   "displayName": "org.elasticsearch.indices.IndicesModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.IndicesModuleTests",
   "children": [
    {
     "id": "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateOtherPluginMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testFieldNamesIsLastWithPlugins",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateOtherPluginMetadataMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testBuiltinWithPlugins",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateBuiltinMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateBuiltinMetadataMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testBuiltinMappers",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testFieldNamesIsLast",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateFieldNamesMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605637
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605714,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605720,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605725,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605728,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605730,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605734,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605737,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605740,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1474195605742,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.IndicesModuleTests",
  "startTimestamp": 1474195605637,
  "executionTime": 111
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "children": [
    {
     "id": "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnPrecisionOutOfRange",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseValidFromStrings",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnBooleanPrecision",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseValidFromInts",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnNonIntPrecision",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605756
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1474195605785,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1474195605790,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1474195605792,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1474195605795,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1474195605797,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
  "startTimestamp": 1474195605756,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testValueForSearch(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testValueForSearch",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605854
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605878,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605930,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605935,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605943,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605946,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605948,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests)",
  "startTimestamp": 1474195605950,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyFloatFieldTypeTests",
  "startTimestamp": 1474195605854,
  "executionTime": 101
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "displayName": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "children": [
    {
     "id": "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNumberOfDelayedUnassigned",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNodeLeave",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testFindNextDelayedAllocation",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNewIndexRestored",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testExistingIndexRestored",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testRemainingDelayCalculation",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testReplicaAdded",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testDanglingIndexImported",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testStateTransitionMetaHandling",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testAllocationStatusSerialization",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testIndexCreated",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testFailedShard",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testIndexReopened",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testReasonOrdinalOrder",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testClusterRecovered",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195605968
 }
]

[
 "TEST_STARTED",
 "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,026][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,063][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606012,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,073][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,074][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606065,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,085][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,086][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606075,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606087,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606094,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606098,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,108][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606100,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606109,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606111,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606113,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606115,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606119,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,140][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:46:46,143][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606121,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606143,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606147,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1474195606149,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.UnassignedInfoTests",
  "startTimestamp": 1474195605968,
  "executionTime": 187
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "displayName": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "children": [
    {
     "id": "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testBreakerSettingsValidationNegativeOverhead",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    },
    {
     "id": "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testRegisterCustomBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    },
    {
     "id": "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testBreakerSettingsValidationWithValidSettings",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195606161
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1474195606258,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1474195606262,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1474195606268,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
  "startTimestamp": 1474195606161,
  "executionTime": 114
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.network.NetworkServiceTests",
   "displayName": "org.elasticsearch.common.network.NetworkServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.common.network.NetworkServiceTests",
   "children": [
    {
     "id": "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMulticastV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMultipleAddressesWithWildcard",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMultipleAddresses",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMulticastV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishMulticastV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishAnyLocalV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindAnyLocalV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindAnyLocalV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishMulticastV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishAnyLocalV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195606286
 }
]

[
 "TEST_STARTED",
 "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606315,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606356,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606358,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606361,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606363,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606366,
  "executionTime": 266
 }
]

[
 "TEST_STARTED",
 "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606632,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606634,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606639,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1474195606641,
  "executionTime": 251
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.network.NetworkServiceTests",
  "startTimestamp": 1474195606286,
  "executionTime": 607
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "displayName": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195606900
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1474195606922,
  "executionTime": 478
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1474195607400,
  "executionTime": 58
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1474195607459,
  "executionTime": 120
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
  "startTimestamp": 1474195606900,
  "executionTime": 685
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "displayName": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "children": [
    {
     "id": "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testFingerprint",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testReusableTokenStream",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testLimit",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testAsciifolding",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195607591
 }
]

[
 "TEST_STARTED",
 "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1474195607623,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1474195607644,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1474195607647,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1474195607650,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
  "startTimestamp": 1474195607591,
  "executionTime": 63
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "displayName": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "children": [
    {
     "id": "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
     "displayName": "testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
     "methodName": "testNullValueObject",
     "className": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195607660
 }
]

[
 "TEST_STARTED",
 "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,700][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,761][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,761][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,765][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,768][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,768][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,894][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,895][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,895][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[8]}, bound_addresses {local[8]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,898][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{ii5_j6s0Sn6QHVBwzYKEFA}{LNlztYrQQ7ewuFB5V3iRjQ}{local}{local[8]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,899][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,943][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:47,962][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,066][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,082][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [NullValueObjectMappingTests#testNullValueObject]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
  "startTimestamp": 1474195607692,
  "executionTime": 428
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,120][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,122][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,122][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:46:48,123][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.NullValueObjectMappingTests",
  "startTimestamp": 1474195607660,
  "executionTime": 470
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.ValueSourceTests",
   "displayName": "org.elasticsearch.ingest.ValueSourceTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.ValueSourceTests",
   "children": [
    {
     "id": "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testCopyDoesNotChangeProvidedList",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    },
    {
     "id": "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testDeepCopy",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    },
    {
     "id": "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testCopyDoesNotChangeProvidedMap",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608136
 }
]

[
 "TEST_STARTED",
 "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1474195608156,
  "executionTime": 58
 }
]

[
 "TEST_STARTED",
 "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1474195608214,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1474195608230,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.ValueSourceTests",
  "startTimestamp": 1474195608136,
  "executionTime": 98
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "children": [
    {
     "id": "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
     "displayName": "testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
     "methodName": "testElectReplicaAsPrimaryDuringRelocation",
     "className": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608241
 }
]

[
 "TEST_STARTED",
 "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,275][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,276][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,277][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the primary shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,278][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,279][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,279][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start another node and perform rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,280][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] find the replica shard that gets relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,280][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] kill the node [node2] of the primary shard for the relocating replica%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,281][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,281][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] make sure all the primary shards are active%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
  "startTimestamp": 1474195608268,
  "executionTime": 14
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
  "startTimestamp": 1474195608241,
  "executionTime": 43
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "children": [
    {
     "id": "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
     "displayName": "testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
     "methodName": "testRebalanceOnlyAfterAllShardsAreActive",
     "className": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608290
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,324][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,325][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start two nodes and fully start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,327][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start all the primary shards, replicas will start initializing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,328][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] now, start 8 more nodes, and check that no rebalancing/relocation have happened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,330][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start the replica shards, rebalancing should start%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,333][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][3], [test][4], [test][2], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,333][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete relocation, other half of relocation should happen%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:46:48,335][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete relocation, that's it!%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
  "startTimestamp": 1474195608315,
  "executionTime": 26
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
  "startTimestamp": 1474195608290,
  "executionTime": 54
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
   "displayName": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
   "children": [
    {
     "id": "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleFieldExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSingleFieldWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRawField(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRawField",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testWithLfAtEnd",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSingleFieldObject",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testObjectsInArrayWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testArrays(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testArrays",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsPropertyExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField4Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testNoFiltering",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecursiveObjectsPropertiesWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testNoMatch(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testNoMatch",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecursiveObjectsInArrayWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField4Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecursiveSameObjectWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleFieldWithWildcardInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsPropertyInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField1Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField3Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testMultipleFieldsExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField2Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField3Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleFieldWithWildcardExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleFieldInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField2Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testEmptyObject",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testRecurseField1Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "displayName": "testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
     "methodName": "testMultipleFieldsInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608357
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608391,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608417,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608419,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608422,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608425,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608430,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608433,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608435,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608439,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608442,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608445,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608448,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608452,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608455,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608457,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608463,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608467,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608470,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608472,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608475,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608478,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608481,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608484,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608487,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608489,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608491,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608494,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608496,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608502,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608512,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608515,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests)",
  "startTimestamp": 1474195608519,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.support.filtering.CborFilteringGeneratorTests",
  "startTimestamp": 1474195608357,
  "executionTime": 166
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
   "displayName": "org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
   "children": [
    {
     "id": "ID#testShrinkIndexSettings(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
     "displayName": "testShrinkIndexSettings(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
     "methodName": "testShrinkIndexSettings",
     "className": "org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
     "children": []
    },
    {
     "id": "ID#testErrorCondition(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
     "displayName": "testErrorCondition(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
     "methodName": "testErrorCondition",
     "className": "org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608531
 }
]

[
 "TEST_STARTED",
 "ID#testShrinkIndexSettings(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:48,572][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[IiOtVBbBaJ][1], [IiOtVBbBaJ][7], [IiOtVBbBaJ][3], [IiOtVBbBaJ][4], [IiOtVBbBaJ][2], [IiOtVBbBaJ][5], [IiOtVBbBaJ][6], [IiOtVBbBaJ][8], [IiOtVBbBaJ][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShrinkIndexSettings(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
  "startTimestamp": 1474195608560,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testErrorCondition(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:46:48,584][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[source][1], [source][4], [source][2], [source][3], [source][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testErrorCondition(org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests)",
  "startTimestamp": 1474195608574,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.shrink.TransportShrinkActionTests",
  "startTimestamp": 1474195608531,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.ShardUtilsTests",
   "displayName": "org.elasticsearch.index.shard.ShardUtilsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.ShardUtilsTests",
   "children": [
    {
     "id": "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
     "displayName": "testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
     "methodName": "testExtractShardId",
     "className": "org.elasticsearch.index.shard.ShardUtilsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608594
 }
]

[
 "TEST_STARTED",
 "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
  "startTimestamp": 1474195608615,
  "executionTime": 61
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.ShardUtilsTests",
  "startTimestamp": 1474195608594,
  "executionTime": 90
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.engine.LiveVersionMapTests",
   "displayName": "org.elasticsearch.index.engine.LiveVersionMapTests",
   "methodName": null,
   "className": "org.elasticsearch.index.engine.LiveVersionMapTests",
   "children": [
    {
     "id": "ID#testRamBytesUsed(org.elasticsearch.index.engine.LiveVersionMapTests)",
     "displayName": "testRamBytesUsed(org.elasticsearch.index.engine.LiveVersionMapTests)",
     "methodName": "testRamBytesUsed",
     "className": "org.elasticsearch.index.engine.LiveVersionMapTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195608690
 }
]

[
 "TEST_STARTED",
 "ID#testRamBytesUsed(org.elasticsearch.index.engine.LiveVersionMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRamBytesUsed(org.elasticsearch.index.engine.LiveVersionMapTests)",
  "startTimestamp": 1474195608717,
  "executionTime": 1410
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.engine.LiveVersionMapTests",
  "startTimestamp": 1474195608690,
  "executionTime": 1440
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "displayName": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "children": [
    {
     "id": "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
     "displayName": "testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
     "methodName": "testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown",
     "className": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610134
 }
]

[
 "TEST_STARTED",
 "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,182][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,248][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,248][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,252][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,254][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,255][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,368][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,368][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,369][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[9]}, bound_addresses {local[9]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,370][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{mqIbBbajTw2BX17xsPZdpg}{PvxWP_f5TXK3cnsXnRTWPQ}{local}{local[9]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,371][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,384][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,409][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [test-type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,472][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,570][INFO ][org.elasticsearch.index.query] [CommonTermsQueryParserTests#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
  "startTimestamp": 1474195610166,
  "executionTime": 436
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,602][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,603][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,603][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:46:50,605][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.CommonTermsQueryParserTests",
  "startTimestamp": 1474195610134,
  "executionTime": 481
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.iterable.IterablesTests",
   "displayName": "org.elasticsearch.common.util.iterable.IterablesTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.iterable.IterablesTests",
   "children": [
    {
     "id": "ID#testFlatten(org.elasticsearch.common.util.iterable.IterablesTests)",
     "displayName": "testFlatten(org.elasticsearch.common.util.iterable.IterablesTests)",
     "methodName": "testFlatten",
     "className": "org.elasticsearch.common.util.iterable.IterablesTests",
     "children": []
    },
    {
     "id": "ID#testGetOverList(org.elasticsearch.common.util.iterable.IterablesTests)",
     "displayName": "testGetOverList(org.elasticsearch.common.util.iterable.IterablesTests)",
     "methodName": "testGetOverList",
     "className": "org.elasticsearch.common.util.iterable.IterablesTests",
     "children": []
    },
    {
     "id": "ID#testGetOverIterable(org.elasticsearch.common.util.iterable.IterablesTests)",
     "displayName": "testGetOverIterable(org.elasticsearch.common.util.iterable.IterablesTests)",
     "methodName": "testGetOverIterable",
     "className": "org.elasticsearch.common.util.iterable.IterablesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610621
 }
]

[
 "TEST_STARTED",
 "ID#testFlatten(org.elasticsearch.common.util.iterable.IterablesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFlatten(org.elasticsearch.common.util.iterable.IterablesTests)",
  "startTimestamp": 1474195610639,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testGetOverList(org.elasticsearch.common.util.iterable.IterablesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetOverList(org.elasticsearch.common.util.iterable.IterablesTests)",
  "startTimestamp": 1474195610640,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGetOverIterable(org.elasticsearch.common.util.iterable.IterablesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetOverIterable(org.elasticsearch.common.util.iterable.IterablesTests)",
  "startTimestamp": 1474195610642,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.iterable.IterablesTests",
  "startTimestamp": 1474195610621,
  "executionTime": 26
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.search.SearchRequestBuilderTests",
   "displayName": "org.elasticsearch.action.search.SearchRequestBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
   "children": [
    {
     "id": "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testQueryBuilderQueryToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testThatToStringDoesntWipeRequestSource",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testSearchSourceBuilderToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testEmptySourceToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610652
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:46:50,699][INFO ][org.elasticsearch.plugins] [_client_] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:46:50,700][INFO ][org.elasticsearch.plugins] [_client_] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:46:50,733][INFO ][org.elasticsearch.transport] [_client_] publish_address {local[10]}, bound_addresses {local[10]}%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1474195610736,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1474195610738,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1474195610741,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1474195610743,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.search.SearchRequestBuilderTests",
  "startTimestamp": 1474195610652,
  "executionTime": 96
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
   "displayName": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
   "children": [
    {
     "id": "ID#testRoundTrip(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testRoundTrip(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testRoundTrip",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testEmptyAlias(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testEmptyAlias(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testEmptyAlias",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseAliasAndAliasesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseAliasAndAliasesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseAliasAndAliasesThrowsError",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseRemove(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseRemove(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseRemove",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseRemoveIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseRemoveIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseRemoveIndex",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testValidate(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testValidate(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testValidate",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseAdd(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseAdd(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseAdd",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseAddDefaultRouting(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseAddDefaultRouting(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseAddDefaultRouting",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testBadOptionsInNonIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testBadOptionsInNonIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testBadOptionsInNonIndex",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testParseIndexAndIndicesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testParseIndexAndIndicesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testParseIndexAndIndicesThrowsError",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    },
    {
     "id": "ID#testEmptyIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "displayName": "testEmptyIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
     "methodName": "testEmptyIndex",
     "className": "org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610795
 }
]

[
 "TEST_STARTED",
 "ID#testRoundTrip(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoundTrip(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610819,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAlias(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAlias(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610838,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParseAliasAndAliasesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseAliasAndAliasesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610842,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testParseRemove(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseRemove(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610851,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseRemoveIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseRemoveIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610854,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testValidate(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidate(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610872,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseAdd(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseAdd(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610875,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParseAddDefaultRouting(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseAddDefaultRouting(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610879,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBadOptionsInNonIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadOptionsInNonIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610883,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testParseIndexAndIndicesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseIndexAndIndicesThrowsError(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610896,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyIndex(org.elasticsearch.action.admin.indices.alias.AliasActionsTests)",
  "startTimestamp": 1474195610899,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.alias.AliasActionsTests",
  "startTimestamp": 1474195610795,
  "executionTime": 109
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterStateTests",
   "displayName": "org.elasticsearch.cluster.ClusterStateTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterStateTests",
   "children": [
    {
     "id": "ID#testSupersedes(org.elasticsearch.cluster.ClusterStateTests)",
     "displayName": "testSupersedes(org.elasticsearch.cluster.ClusterStateTests)",
     "methodName": "testSupersedes",
     "className": "org.elasticsearch.cluster.ClusterStateTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610910
 }
]

[
 "TEST_STARTED",
 "ID#testSupersedes(org.elasticsearch.cluster.ClusterStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSupersedes(org.elasticsearch.cluster.ClusterStateTests)",
  "startTimestamp": 1474195610936,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterStateTests",
  "startTimestamp": 1474195610910,
  "executionTime": 30
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.codecs.CodecTests",
   "displayName": "org.elasticsearch.codecs.CodecTests",
   "methodName": null,
   "className": "org.elasticsearch.codecs.CodecTests",
   "children": [
    {
     "id": "ID#testAcceptPostingsFormat(org.elasticsearch.codecs.CodecTests)",
     "displayName": "testAcceptPostingsFormat(org.elasticsearch.codecs.CodecTests)",
     "methodName": "testAcceptPostingsFormat",
     "className": "org.elasticsearch.codecs.CodecTests",
     "children": []
    },
    {
     "id": "ID#testAcceptDocValuesFormat(org.elasticsearch.codecs.CodecTests)",
     "displayName": "testAcceptDocValuesFormat(org.elasticsearch.codecs.CodecTests)",
     "methodName": "testAcceptDocValuesFormat",
     "className": "org.elasticsearch.codecs.CodecTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195610947
 }
]

[
 "TEST_STARTED",
 "ID#testAcceptPostingsFormat(org.elasticsearch.codecs.CodecTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:50,979][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,041][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,042][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,045][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,048][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,048][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,176][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,177][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,177][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[11]}, bound_addresses {local[11]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,179][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{q7XeaT7MTE-dWd_6r-toXw}{NVYNDiyESNGs0uc_nnaRUw}{local}{local[11]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,180][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,203][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,234][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-0] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,296][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,320][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,415][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,447][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,521][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,538][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-3] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,616][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-3][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,638][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-4] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,687][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-4][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,706][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-5] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,796][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-5][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,825][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-6] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,915][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-6][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:51,939][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-7] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,005][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-7][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,026][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-8] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,095][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-8][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,113][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-9] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,174][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-9][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,193][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-10] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,242][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-10][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,271][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-11] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,320][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-11][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,338][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-12] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,415][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-12][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,440][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-13] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,504][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-13][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,528][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-14] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,593][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-14][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,618][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-15] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,675][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-15][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,697][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-16] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,748][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-16][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,780][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-17] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,853][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-17][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:52,887][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-18] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,033][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-18][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,133][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-19] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,240][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-19][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,303][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-20] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,356][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-20][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,375][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-21] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,453][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-21][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:53,469][INFO ][org.elasticsearch.codecs ] [CodecTests#testAcceptPostingsFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAcceptPostingsFormat(org.elasticsearch.codecs.CodecTests)",
  "startTimestamp": 1474195610971,
  "executionTime": 5825
 }
]

[
 "TEST_STARTED",
 "ID#testAcceptDocValuesFormat(org.elasticsearch.codecs.CodecTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:56,803][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-0] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:56,868][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:56,885][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:56,941][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:56,959][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,021][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,038][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-3] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,090][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-3][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,105][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-4] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,166][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-4][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,185][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-5] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,258][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-5][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,295][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-6] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,387][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-6][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,430][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-7] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,544][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-7][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,640][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-8] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,818][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-8][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,850][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-9] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:57,949][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-9][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,001][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-10] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,062][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-10][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,080][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-11] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,142][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-11][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,160][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-12] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,209][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-12][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,241][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-13] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,302][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-13][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,326][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-14] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,419][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-14][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,464][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-15] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,527][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-15][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,545][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-16] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,614][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-16][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,644][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-17] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,759][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-17][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,779][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-18] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,830][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-18][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:58,868][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-19] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,131][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-19][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,225][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-20] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,310][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-20][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,336][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-21] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,412][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-21][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:46:59,508][INFO ][org.elasticsearch.codecs ] [CodecTests#testAcceptDocValuesFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAcceptDocValuesFormat(org.elasticsearch.codecs.CodecTests)",
  "startTimestamp": 1474195616796,
  "executionTime": 3704
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:47:00,500][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:47:00,501][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:47:00,501][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:47:00,502][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.codecs.CodecTests",
  "startTimestamp": 1474195610947,
  "executionTime": 9565
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
   "displayName": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
   "children": [
    {
     "id": "ID#testHandlingOfPath_StringName(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testHandlingOfPath_StringName(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testHandlingOfPath_StringName",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIndentIsPlatformIndependent(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testIndentIsPlatformIndependent(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testIndentIsPlatformIndependent",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCopyCurrentStructure(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testCopyCurrentStructure(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testCopyCurrentStructure",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWritingBinaryToStream(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testWritingBinaryToStream(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testWritingBinaryToStream",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testPrettyWithLfAtEnd(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testPrettyWithLfAtEnd(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testPrettyWithLfAtEnd",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRenderGeoPoint(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testRenderGeoPoint(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testRenderGeoPoint",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWriteFieldMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testWriteFieldMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testWriteFieldMapWithNullKeys",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testOverloadedList(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testOverloadedList(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testOverloadedList",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRaw(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testRaw(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testRaw",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testHandlingOfCollectionOfPaths(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testHandlingOfCollectionOfPaths(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testHandlingOfCollectionOfPaths",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testDateTypesConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testDateTypesConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testDateTypesConversion",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testHandlingOfPath(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testHandlingOfPath(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testHandlingOfPath",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapValueWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testWriteMapValueWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testWriteMapValueWithNullKeys",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testMissingEndObject(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testMissingEndObject",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testByteConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testByteConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testByteConversion",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testWriteMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testWriteMapWithNullKeys",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testHandlingOfPath_relative(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testHandlingOfPath_relative(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testHandlingOfPath_relative",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testMissingEndArray(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testMissingEndArray",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testReuseJsonGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testReuseJsonGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testReuseJsonGenerator",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testHandlingOfPath_absolute(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testHandlingOfPath_absolute(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testHandlingOfPath_absolute",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSimpleGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "displayName": "testSimpleGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
     "methodName": "testSimpleGenerator",
     "className": "org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195620522
 }
]

[
 "TEST_STARTED",
 "ID#testHandlingOfPath_StringName(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandlingOfPath_StringName(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620587,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIndentIsPlatformIndependent(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndentIsPlatformIndependent(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620591,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCopyCurrentStructure(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyCurrentStructure(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620593,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testWritingBinaryToStream(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWritingBinaryToStream(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620704,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPrettyWithLfAtEnd(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrettyWithLfAtEnd(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620706,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testRenderGeoPoint(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRenderGeoPoint(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620713,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testWriteFieldMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteFieldMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620716,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testOverloadedList(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOverloadedList(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620718,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRaw(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRaw(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620722,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testHandlingOfCollectionOfPaths(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandlingOfCollectionOfPaths(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620724,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDateTypesConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateTypesConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620726,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testHandlingOfPath(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandlingOfPath(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620729,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapValueWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapValueWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620731,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndObject(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620734,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testByteConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteConversion(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620739,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapWithNullKeys(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620742,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testHandlingOfPath_relative(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandlingOfPath_relative(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620744,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndArray(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620756,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testReuseJsonGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuseJsonGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620765,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testHandlingOfPath_absolute(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandlingOfPath_absolute(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620772,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGenerator(org.elasticsearch.common.xcontent.builder.XContentBuilderTests)",
  "startTimestamp": 1474195620792,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.builder.XContentBuilderTests",
  "startTimestamp": 1474195620522,
  "executionTime": 275
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "displayName": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testCoerceShell",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testCoerceHole",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195620804
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1474195620867,
  "executionTime": 59
 }
]

[
 "TEST_STARTED",
 "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1474195620927,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1474195620930,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1474195620947,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1474195620950,
  "executionTime": 147
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.builders.PolygonBuilderTests",
  "startTimestamp": 1474195620804,
  "executionTime": 302
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.ReplicaShardAllocatorTests",
   "displayName": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
   "methodName": null,
   "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
   "children": [
    {
     "id": "ID#testAsyncFetchOnAnythingButIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testAsyncFetchOnAnythingButIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testAsyncFetchOnAnythingButIndexCreation",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoAsyncFetchOnIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoAsyncFetchOnIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoAsyncFetchOnIndexCreation",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testDelayedAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testDelayedAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testDelayedAllocation",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNotCancellingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNotCancellingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNotCancellingRecovery",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testFileChecksumMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testFileChecksumMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testFileChecksumMatch",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testSyncIdMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testSyncIdMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testSyncIdMatch",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFullMatchAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testSimpleFullMatchAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testSimpleFullMatchAllocation",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testThrottleWhenAllocatingToMatchingNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testThrottleWhenAllocatingToMatchingNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testThrottleWhenAllocatingToMatchingNode",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNotCancellingRecoveryIfSyncedOnExistingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNotCancellingRecoveryIfSyncedOnExistingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNotCancellingRecoveryIfSyncedOnExistingRecovery",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoDataForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoDataForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoDataForReplicaOnAnyNode",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoMatchingFilesForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoMatchingFilesForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoMatchingFilesForReplicaOnAnyNode",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoPrimaryData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoPrimaryData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoPrimaryData",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoOrThrottleDecidersRemainsInUnassigned(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoOrThrottleDecidersRemainsInUnassigned(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoOrThrottleDecidersRemainsInUnassigned",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testNoAsyncFetchData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testNoAsyncFetchData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testNoAsyncFetchData",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    },
    {
     "id": "ID#testCancelRecoveryBetterSyncId(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "displayName": "testCancelRecoveryBetterSyncId(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
     "methodName": "testCancelRecoveryBetterSyncId",
     "className": "org.elasticsearch.gateway.ReplicaShardAllocatorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195621117
 }
]

[
 "TEST_STARTED",
 "ID#testAsyncFetchOnAnythingButIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsyncFetchOnAnythingButIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621183,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testNoAsyncFetchOnIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoAsyncFetchOnIndexCreation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621252,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDelayedAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayedAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621255,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testNotCancellingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotCancellingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621361,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFileChecksumMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileChecksumMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621366,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSyncIdMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSyncIdMatch(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621369,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFullMatchAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFullMatchAllocation(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621377,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testThrottleWhenAllocatingToMatchingNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThrottleWhenAllocatingToMatchingNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621382,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testNotCancellingRecoveryIfSyncedOnExistingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotCancellingRecoveryIfSyncedOnExistingRecovery(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621389,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNoDataForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDataForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621393,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoMatchingFilesForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoMatchingFilesForReplicaOnAnyNode(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621396,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNoPrimaryData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoPrimaryData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621400,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNoOrThrottleDecidersRemainsInUnassigned(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoOrThrottleDecidersRemainsInUnassigned(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621402,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoAsyncFetchData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoAsyncFetchData(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621405,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testCancelRecoveryBetterSyncId(org.elasticsearch.gateway.ReplicaShardAllocatorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancelRecoveryBetterSyncId(org.elasticsearch.gateway.ReplicaShardAllocatorTests)",
  "startTimestamp": 1474195621410,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.ReplicaShardAllocatorTests",
  "startTimestamp": 1474195621117,
  "executionTime": 300
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.IndicesQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
   "children": [
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.IndicesQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195621424
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,454][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{Sgl-0iMAS-ypzKY32Bys6w}{local}{local[149]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,462][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,462][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,480][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,481][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,481][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,483][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,483][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,483][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,486][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,486][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,486][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,488][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,488][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,488][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,490][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,490][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,490][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,493][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,494][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,494][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,495][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,495][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,495][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,497][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,497][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,497][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [bFZYcNTx] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,516][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621447,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,519][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,524][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,524][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,525][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,525][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,525][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,525][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,527][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,527][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,528][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,528][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,528][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,529][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,529][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,530][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,530][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,530][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,532][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,533][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,534][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,535][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,535][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,535][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,536][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,537][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,537][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,538][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,538][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,539][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,539][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,539][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,540][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,540][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,541][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,541][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,542][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,542][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,543][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,543][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,544][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621517,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,548][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,552][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,553][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,555][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,555][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,556][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,557][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,558][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,558][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,559][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,559][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,560][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,560][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,561][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,562][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,562][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,563][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,563][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,564][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,564][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621544,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,572][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,572][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,573][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,573][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621565,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,576][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621574,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,579][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,580][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,580][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,580][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,581][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,581][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,582][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,583][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,585][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,586][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,586][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,587][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,587][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,589][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,589][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,590][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,590][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,590][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,591][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,591][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621577,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,595][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621592,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,599][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621597,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,602][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,603][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,604][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,605][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,606][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,607][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,608][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,608][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,610][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,611][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,612][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,614][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,616][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,616][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,617][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,621][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,622][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,623][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,624][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,625][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621600,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.IndicesQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,630][WARN ][org.elasticsearch.deprecation.index.query] indices query is deprecated. Instead search on the '_index' field%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.IndicesQueryBuilderTests)",
  "startTimestamp": 1474195621627,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.IndicesQueryBuilderTests",
  "startTimestamp": 1474195621424,
  "executionTime": 213
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "children": [
    {
     "id": "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
     "displayName": "testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
     "methodName": "testRun",
     "className": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195621645
 }
]

[
 "TEST_STARTED",
 "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:47:01,870][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:11,950][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[tweets-2014-12-29:00][1], [tweets-2014-12-29:00][4], [tweets-2014-12-29:00][2], [tweets-2014-12-29:00][3], [tweets-2014-12-29:00][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
  "startTimestamp": 1474195621738,
  "executionTime": 70214
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
  "startTimestamp": 1474195621645,
  "executionTime": 70346
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "displayName": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "children": [
    {
     "id": "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "displayName": "testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "methodName": "testSingleTermWithOrds",
     "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
     "children": []
    },
    {
     "id": "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "displayName": "testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "methodName": "testEmptyTermsWithOrds",
     "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195691998
 }
]

[
 "TEST_STARTED",
 "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
  "startTimestamp": 1474195692048,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
  "startTimestamp": 1474195692074,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
  "startTimestamp": 1474195691998,
  "executionTime": 83
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.watcher.FileWatcherTests",
   "displayName": "org.elasticsearch.watcher.FileWatcherTests",
   "methodName": null,
   "className": "org.elasticsearch.watcher.FileWatcherTests",
   "children": [
    {
     "id": "ID#testFileReplacingDirectory(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testFileReplacingDirectory(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testFileReplacingDirectory",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testNoDirectoryOnInit(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testNoDirectoryOnInit(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testNoDirectoryOnInit",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testEmptyDirectory(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testEmptyDirectory(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testEmptyDirectory",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testSimpleDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testSimpleDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testSimpleDirectoryOperations",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testNoFileOnInit(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testNoFileOnInit(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testNoFileOnInit",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFileOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testSimpleFileOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testSimpleFileOperations",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    },
    {
     "id": "ID#testNestedDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "displayName": "testNestedDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
     "methodName": "testNestedDirectoryOperations",
     "className": "org.elasticsearch.watcher.FileWatcherTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692090
 }
]

[
 "TEST_STARTED",
 "ID#testFileReplacingDirectory(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileReplacingDirectory(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692142,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testNoDirectoryOnInit(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDirectoryOnInit(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692169,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyDirectory(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyDirectory(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692178,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692191,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testNoFileOnInit(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoFileOnInit(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692227,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFileOperations(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFileOperations(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692233,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testNestedDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedDirectoryOperations(org.elasticsearch.watcher.FileWatcherTests)",
  "startTimestamp": 1474195692240,
  "executionTime": 75
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.watcher.FileWatcherTests",
  "startTimestamp": 1474195692090,
  "executionTime": 289
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.transport.BoundTransportAddressTests",
   "displayName": "org.elasticsearch.common.transport.BoundTransportAddressTests",
   "methodName": null,
   "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "displayName": "testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
     "children": []
    },
    {
     "id": "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "displayName": "testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "methodName": "testBadBoundAddressArray",
     "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692386
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
  "startTimestamp": 1474195692421,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
  "startTimestamp": 1474195692428,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.transport.BoundTransportAddressTests",
  "startTimestamp": 1474195692386,
  "executionTime": 46
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
   "displayName": "org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashCode(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "displayName": "testEqualsAndHashCode(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "methodName": "testEqualsAndHashCode",
     "className": "org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "displayName": "testSerialization(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
     "children": []
    },
    {
     "id": "ID#testParsing(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "displayName": "testParsing(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
     "methodName": "testParsing",
     "className": "org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692442
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashCode(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashCode(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
  "startTimestamp": 1474195692460,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
  "startTimestamp": 1474195692492,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testParsing(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsing(org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests)",
  "startTimestamp": 1474195692504,
  "executionTime": 91
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequestTests",
  "startTimestamp": 1474195692442,
  "executionTime": 297
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.StringsTests",
   "displayName": "org.elasticsearch.common.StringsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.StringsTests",
   "children": [
    {
     "id": "ID#testEvilToString(org.elasticsearch.common.StringsTests)",
     "displayName": "testEvilToString(org.elasticsearch.common.StringsTests)",
     "methodName": "testEvilToString",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testSubstring(org.elasticsearch.common.StringsTests)",
     "displayName": "testSubstring(org.elasticsearch.common.StringsTests)",
     "methodName": "testSubstring",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)",
     "displayName": "testSplitStringToSet(org.elasticsearch.common.StringsTests)",
     "methodName": "testSplitStringToSet",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)",
     "displayName": "testCleanTruncate(org.elasticsearch.common.StringsTests)",
     "methodName": "testCleanTruncate",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692750
 }
]

[
 "TEST_STARTED",
 "ID#testEvilToString(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvilToString(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1474195692772,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSubstring(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSubstring(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1474195692776,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1474195692778,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1474195692780,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.StringsTests",
  "startTimestamp": 1474195692750,
  "executionTime": 34
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.SimulateProcessorResultTests",
   "displayName": "org.elasticsearch.action.ingest.SimulateProcessorResultTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.SimulateProcessorResultTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.action.ingest.SimulateProcessorResultTests)",
     "displayName": "testSerialization(org.elasticsearch.action.ingest.SimulateProcessorResultTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.ingest.SimulateProcessorResultTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692790
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.ingest.SimulateProcessorResultTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.ingest.SimulateProcessorResultTests)",
  "startTimestamp": 1474195692815,
  "executionTime": 14
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.SimulateProcessorResultTests",
  "startTimestamp": 1474195692790,
  "executionTime": 41
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692838
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:48:12,883][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{OZ5yhPs3RaaSvFtOPtmppQ}{local}{local[154]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1474195692895,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1474195692897,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1474195692899,
  "executionTime": 48
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.SamplerTests",
  "startTimestamp": 1474195692838,
  "executionTime": 114
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testDocValues",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testBwCompatDocValues",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testMultiFields",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195692960
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,001][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,033][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,033][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,045][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,050][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,050][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,413][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,413][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,414][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[12]}, bound_addresses {local[12]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,517][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{pM2POchZQbm1ogY8WfS2dQ}{m5nqwdsER5qn30emgXZ0wQ}{local}{local[12]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,524][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,718][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,738][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,938][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:13,966][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195692987,
  "executionTime": 1017
 }
]

[
 "TEST_STARTED",
 "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,011][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,136][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,175][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195694004,
  "executionTime": 210
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,221][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,314][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,335][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,395][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,503][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [BooleanFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195694214,
  "executionTime": 373
 }
]

[
 "TEST_STARTED",
 "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,595][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,660][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,676][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,793][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,807][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test_old] Expected a boolean for property [index] but got [no]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,808][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test_old] Expected a boolean for property [index] but got [not_analyzed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,808][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [BooleanFieldMapperTests#testBwCompatDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195694587,
  "executionTime": 273
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,865][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,935][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:14,971][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195694860,
  "executionTime": 158
 }
]

[
 "TEST_STARTED",
 "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,024][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,181][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,263][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testMultiFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1474195695019,
  "executionTime": 279
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,298][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,299][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,299][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:15,301][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.BooleanFieldMapperTests",
  "startTimestamp": 1474195692960,
  "executionTime": 2348
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "children": [
    {
     "id": "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDisableNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testKeywordFieldAsStringWithUnsupportedField",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testLimit",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIncludeInAll",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithCopyTo",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithIncludeInAll",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFileddataDisabled",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDefaultsForNotAnalyzed",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithFields",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIndexFalse",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIgnoreAbove",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithCopyTo",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithStore",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testAnalyzedFieldPositionIncrementWithoutPositions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithBoost",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testSearchQuoteAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoString",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testFielddataFilter",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithBoost",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testBwCompatDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFielddataFrequencyFilter",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testTermVectors",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testPositionOffsetGapDeprecation",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDisabledFielddata",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFields",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testSearchAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithPositionIncrementGap",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testTextFieldAsStringWithUnsupportedField",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithEagerGlobalOrdinals",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithSearchQuoteAnayzer",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testFielddataLoading",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testNonAnalyzedFieldPositionIncrement",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDefaultsForAnalyzed",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeStringIntoStringWithSimilarity",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithStore",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIndexOptions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithSimilarity",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithIndexOptions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoString",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195695319
 }
]

[
 "TEST_STARTED",
 "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,378][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,420][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,420][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,428][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,430][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,430][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,691][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,691][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,692][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[13]}, bound_addresses {local[13]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,710][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{VAB1nM7XRGKFHGzPVqVCew}{AqJK7ZkKT5KCd3GhnmE6YQ}{local}{local[13]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,711][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,765][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,788][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,937][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,954][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,967][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:15,968][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDisableNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195695369,
  "executionTime": 697
 }
]

[
 "TEST_STARTED",
 "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,085][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,205][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,245][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testKeywordFieldAsStringWithUnsupportedField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195696066,
  "executionTime": 227
 }
]

[
 "TEST_STARTED",
 "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,299][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,372][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,391][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testLimit]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195696293,
  "executionTime": 216
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,543][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,688][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,705][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,708][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Bo1NJqIVQT26Eflbn6mV7g] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,733][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,761][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195696510,
  "executionTime": 298
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,815][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,908][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,973][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:16,982][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/pvbDEJICSsqgIml9jEeqyg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,001][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,028][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithCopyTo]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195696808,
  "executionTime": 312
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,126][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,205][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,220][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,222][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/I5nX1L7-RaC0P6Wiv6yOZA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,240][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"include_in_all\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,263][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195697120,
  "executionTime": 186
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,313][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,384][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,397][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,399][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/RX_vQv8MQCq1v46ovbnu7A] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,422][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,562][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFileddataDisabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195697306,
  "executionTime": 336
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,652][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,733][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,752][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,755][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] [omit_norms] is deprecated, please use [norms] instead with the opposite boolean value%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,756][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDefaultsForNotAnalyzed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195697642,
  "executionTime": 143
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,792][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,840][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,854][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,857][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/DvLJcyfyStOMR36AWlpwww] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,870][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,898][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,903][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/DvLJcyfyStOMR36AWlpwww] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,930][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:17,959][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195697785,
  "executionTime": 226
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,018][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,073][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,088][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"no\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,090][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/4OOWgl3kQYqack3pZYhDwA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,346][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"index\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,381][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIndexFalse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195698011,
  "executionTime": 398
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,432][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,589][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,630][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"ignore_above\":128}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,639][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/4WTxaJUjRG617SPWfoc6Sg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,654][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"ignore_above\":128}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,672][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIgnoreAbove]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195698409,
  "executionTime": 323
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,738][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,791][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,811][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,813][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/33K_mbRGQQGXUAZ10_u6Fg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,827][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"copy_to\":\"another_field\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,846][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithCopyTo]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195698732,
  "executionTime": 152
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,891][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,946][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,969][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,971][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/xmCHqlWcQguDYS_fpXxmwg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:18,985][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"doc_values\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,003][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195698884,
  "executionTime": 152
 }
]

[
 "TEST_STARTED",
 "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,044][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,093][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,109][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699036,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,148][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,194][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,206][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,209][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/xzDPaF6KQF2Gx_srWx6xFQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,219][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"store\":true,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,231][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699142,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,268][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,387][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,402][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testAnalyzedFieldPositionIncrementWithoutPositions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699260,
  "executionTime": 166
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,433][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,480][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,506][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,509][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/LMNVpaoPTyifEPJbLb-DAA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,528][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,577][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"boost\":1.4}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,581][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/LMNVpaoPTyifEPJbLb-DAA] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,600][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699427,
  "executionTime": 244
 }
]

[
 "TEST_STARTED",
 "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,678][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,722][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,736][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testSearchQuoteAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699671,
  "executionTime": 90
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,769][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,838][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,858][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"norms\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,861][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/vPE0rhwwQUWHT-4fehZ3TA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,886][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"norms\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,915][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"norms\":{\"enabled\":true,\"loading\":\"pYcCV\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,916][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,917][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,942][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"norms\":{\"enabled\":true,\"loading\":\"KFtfZ\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,943][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,945][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,959][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699762,
  "executionTime": 230
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:19,999][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,067][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,083][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,086][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/r0A-3quOQO2v9HEiKDaFPA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,099][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,124][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195699992,
  "executionTime": 194
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,193][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,241][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,253][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,255][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/81YwmBDXRc2aY7BMRwMjng] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,269][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,284][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoString]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195700187,
  "executionTime": 156
 }
]

[
 "TEST_STARTED",
 "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,349][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,414][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,427][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testFielddataFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195700343,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,474][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,530][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,567][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,570][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/h27L2UDSRgOSV4tqZTBzZg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,584][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"boost\":1.5,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,609][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"boost\":1.4,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,612][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/h27L2UDSRgOSV4tqZTBzZg] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,625][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195700467,
  "executionTime": 188
 }
]

[
 "TEST_STARTED",
 "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,664][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,756][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,772][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,935][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:20,948][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [LegacyStringMappingTests#testBwCompatDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195700655,
  "executionTime": 347
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,008][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,076][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,090][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":{\"format\":\"pagedbytes\",\"filter\":{\"frequency\":{\"min\":0.001,\"max\":0.1,\"min_segment_size\":100}}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,093][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/yRvc0QnwT_a0tLBxxIj8Og] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,107][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fielddata_frequency_filter\":{\"min\":0.001,\"max\":0.1,\"min_segment_size\":100}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,125][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFielddataFrequencyFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195701002,
  "executionTime": 190
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,201][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,338][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,394][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"norms\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,396][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/J5_xhhbiRtyFcyydDFQszg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,410][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"norms\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,432][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195701193,
  "executionTime": 278
 }
]

[
 "TEST_STARTED",
 "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,478][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,542][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,611][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testTermVectors]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195701471,
  "executionTime": 200
 }
]

[
 "TEST_STARTED",
 "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,677][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,948][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:21,970][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testPositionOffsetGapDeprecation]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195701671,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,001][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,373][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,386][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDisabledFielddata]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195701995,
  "executionTime": 418
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,420][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,475][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,489][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,491][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ohvGgUUcSq-PDYjL-tdqEA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,504][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,521][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,524][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ohvGgUUcSq-PDYjL-tdqEA] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,553][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,575][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195702413,
  "executionTime": 198
 }
]

[
 "TEST_STARTED",
 "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,629][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,799][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,822][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testSearchAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195702611,
  "executionTime": 244
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,875][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,927][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,971][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"position_increment_gap\":5285}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,975][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/cCUSzBVHTQ2WjNnRgBUG4g] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:22,989][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"position_increment_gap\":5285,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,005][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithPositionIncrementGap]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195702855,
  "executionTime": 177
 }
]

[
 "TEST_STARTED",
 "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,037][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,093][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,105][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testTextFieldAsStringWithUnsupportedField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703032,
  "executionTime": 100
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,137][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,186][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,198][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":{\"format\":\"pagedbytes\",\"loading\":\"eager_global_ordinals\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,200][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Aljk7TL1Qjq7JUOT7g7wrg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,215][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"eager_global_ordinals\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,234][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithEagerGlobalOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703132,
  "executionTime": 135
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,274][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,322][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,335][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"analyzer\":\"standard\",\"search_analyzer\":\"whitespace\",\"search_quote_analyzer\":\"keyword\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,341][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Tp7rHSdNTi25_O85tabV0w] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,354][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"analyzer\":\"standard\",\"search_analyzer\":\"whitespace\",\"search_quote_analyzer\":\"keyword\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,455][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithSearchQuoteAnayzer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703267,
  "executionTime": 222
 }
]

[
 "TEST_STARTED",
 "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,495][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,548][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,561][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testFielddataLoading]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703489,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,612][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,665][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,677][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testNonAnalyzedFieldPositionIncrement]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703606,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,705][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,748][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,764][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDefaultsForAnalyzed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703699,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,811][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,850][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,859][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,861][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/m5nDOIr4QkChrytXupU7Gw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,897][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"similarity\":\"BM25\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,909][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeStringIntoStringWithSimilarity]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703806,
  "executionTime": 124
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,936][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,973][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,982][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,984][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/3nQgt7aiQ9CWBQq8SNjHiw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:23,995][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,007][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195703930,
  "executionTime": 104
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,040][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,086][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,095][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"index_options\":\"freqs\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,097][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/6pdxEA-GTMGLAOXmItwU8Q] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,109][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"index_options\":\"freqs\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,124][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195704034,
  "executionTime": 110
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,149][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,184][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,193][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,195][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/FkoKWP_HTeuyq4clxd5qrQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,204][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,215][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithSimilarity]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195704144,
  "executionTime": 95
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,244][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,280][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,294][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index_options\":\"offsets\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,296][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/UFg-C0pKSlSI4t82L87d3w] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,309][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"index_options\":\"offsets\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,360][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195704239,
  "executionTime": 150
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,396][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,449][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,461][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,462][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/p_FsYgb-QjS4vmeMnfGcOg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,487][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,498][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoString]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1474195704389,
  "executionTime": 133
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,522][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,523][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,523][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:24,524][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyStringMappingTests",
  "startTimestamp": 1474195695319,
  "executionTime": 9214
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "displayName": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "methodName": null,
   "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "children": [
    {
     "id": "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testFetchSource",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testSourceDisabled",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testMultipleFiltering",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testBasicFiltering",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704538
 }
]

[
 "TEST_STARTED",
 "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1474195704553,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1474195704555,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1474195704557,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1474195704559,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
  "startTimestamp": 1474195704538,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "displayName": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "children": [
    {
     "id": "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
     "displayName": "testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
     "methodName": "testCompareParsingTokens",
     "className": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704569
 }
]

[
 "TEST_STARTED",
 "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
  "startTimestamp": 1474195704586,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
  "startTimestamp": 1474195704569,
  "executionTime": 21
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.hppc.HppcMapsTests",
   "displayName": "org.elasticsearch.common.hppc.HppcMapsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.hppc.HppcMapsTests",
   "children": [
    {
     "id": "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
     "displayName": "testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
     "methodName": "testIntersection",
     "className": "org.elasticsearch.common.hppc.HppcMapsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704596
 }
]

[
 "TEST_STARTED",
 "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
  "startTimestamp": 1474195704657,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.hppc.HppcMapsTests",
  "startTimestamp": 1474195704596,
  "executionTime": 65
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ClassPermissionTests",
   "displayName": "org.elasticsearch.script.ClassPermissionTests",
   "methodName": null,
   "className": "org.elasticsearch.script.ClassPermissionTests",
   "children": [
    {
     "id": "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testImplies(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testImplies",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollectionStandard",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testEquals(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testStandard(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testStandard",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollectionWildcards",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testWildcards",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollection",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704692
 }
]

[
 "TEST_STARTED",
 "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704741,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704747,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704749,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704751,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704753,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704755,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1474195704758,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ClassPermissionTests",
  "startTimestamp": 1474195704692,
  "executionTime": 78
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "displayName": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "children": [
    {
     "id": "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
     "displayName": "testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
     "methodName": "testKnownValues",
     "className": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704776
 }
]

[
 "TEST_STARTED",
 "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
  "startTimestamp": 1474195704797,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
  "startTimestamp": 1474195704776,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.unit.DistanceUnitTests",
   "displayName": "org.elasticsearch.common.unit.DistanceUnitTests",
   "methodName": null,
   "className": "org.elasticsearch.common.unit.DistanceUnitTests",
   "children": [
    {
     "id": "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testFromString",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testSimpleDistanceUnit",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testDistanceUnitNames",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testReadWrite",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testDistanceUnitParsing",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704807
 }
]

[
 "TEST_STARTED",
 "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1474195704830,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1474195704832,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1474195704837,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1474195704839,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1474195704840,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.unit.DistanceUnitTests",
  "startTimestamp": 1474195704807,
  "executionTime": 37
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.rounding.TimeZoneRoundingTests",
   "displayName": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
   "methodName": null,
   "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
   "children": [
    {
     "id": "ID#testIntervalRounding_HalfDay_DST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testIntervalRounding_HalfDay_DST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testIntervalRounding_HalfDay_DST",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testLenientConversionDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testLenientConversionDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testLenientConversionDST",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testEdgeCasesTransition(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testEdgeCasesTransition(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testEdgeCasesTransition",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testUTCIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testUTCIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testUTCIntervalRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testDayIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testDayIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testDayIntervalRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeIntervalRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testIntervalRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testIntervalRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testIntervalRoundingRandom",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testUTCTimeUnitRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testUTCTimeUnitRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testUTCTimeUnitRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testDayRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testDayRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testDayRounding",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testIntervalRounding_NotDivisibleInteval(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testIntervalRounding_NotDivisibleInteval(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testIntervalRounding_NotDivisibleInteval",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeUnitRoundingDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeUnitRoundingDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeUnitRoundingDST",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeInterval_Kathmandu_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeInterval_Kathmandu_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeInterval_Kathmandu_DST_Start",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeIntervalCET_DST_End(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeIntervalCET_DST_End(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeIntervalCET_DST_End",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testRoundingRandom",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testAmbiguousHoursAfterDSTSwitch(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testAmbiguousHoursAfterDSTSwitch(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testAmbiguousHoursAfterDSTSwitch",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testTimeIntervalCET_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testTimeIntervalCET_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testTimeIntervalCET_DST_Start",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    },
    {
     "id": "ID#testIntervalRoundingMonotonic_CET(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "displayName": "testIntervalRoundingMonotonic_CET(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
     "methodName": "testIntervalRoundingMonotonic_CET",
     "className": "org.elasticsearch.common.rounding.TimeZoneRoundingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195704891
 }
]

[
 "TEST_STARTED",
 "ID#testIntervalRounding_HalfDay_DST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntervalRounding_HalfDay_DST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195704908,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testLenientConversionDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLenientConversionDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195704938,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testEdgeCasesTransition(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEdgeCasesTransition(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195704954,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testUTCIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUTCIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195704977,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testDayIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDayIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195704999,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTimeRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195705001,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTimeIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeIntervalRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195705003,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIntervalRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntervalRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195705006,
  "executionTime": 1334
 }
]

[
 "TEST_STARTED",
 "ID#testUTCTimeUnitRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUTCTimeUnitRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706341,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDayRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDayRounding(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706344,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIntervalRounding_NotDivisibleInteval(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntervalRounding_NotDivisibleInteval(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706347,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTimeUnitRoundingDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeUnitRoundingDST(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706349,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testTimeInterval_Kathmandu_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeInterval_Kathmandu_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706358,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testTimeIntervalCET_DST_End(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeIntervalCET_DST_End(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706365,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoundingRandom(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706369,
  "executionTime": 321
 }
]

[
 "TEST_STARTED",
 "ID#testAmbiguousHoursAfterDSTSwitch(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAmbiguousHoursAfterDSTSwitch(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706690,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testTimeIntervalCET_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeIntervalCET_DST_Start(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706696,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIntervalRoundingMonotonic_CET(org.elasticsearch.common.rounding.TimeZoneRoundingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntervalRoundingMonotonic_CET(org.elasticsearch.common.rounding.TimeZoneRoundingTests)",
  "startTimestamp": 1474195706698,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.rounding.TimeZoneRoundingTests",
  "startTimestamp": 1474195704891,
  "executionTime": 1812
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "displayName": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "children": [
    {
     "id": "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testFixedRejected",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testInheritContext",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testFixedForcedExecution",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testScaleDown",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testRejectionMessageAndShuttingDownFlag",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testScaleUp",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testGetTasks",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195706711
 }
]

[
 "TEST_STARTED",
 "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706730,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706736,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706740,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706744,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706814,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706819,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1474195706823,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.concurrent.EsExecutorsTests",
  "startTimestamp": 1474195706711,
  "executionTime": 117
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "displayName": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "children": [
    {
     "id": "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsOpenClosedIndicesTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testMultipleWildcards",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testAll",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsJustIndicesTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195706835
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1474195706854,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1474195706858,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1474195706864,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1474195706866,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1474195706875,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
  "startTimestamp": 1474195706835,
  "executionTime": 48
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.NestedQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.NestedQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
   "children": [
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testValidate",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195706892
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,965][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{fYFazQuDRhSRdq_xVQiL3Q}{local}{local[155]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,975][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,975][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,991][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,991][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,991][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,993][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,993][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,993][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,995][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,995][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,996][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,997][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,997][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,997][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,999][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,999][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:26,999][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,012][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,012][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,012][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,017][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,017][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,017][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,020][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,020][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,020][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,028][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,028][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,028][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,030][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,030][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,030][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,033][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,033][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,033][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,059][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,059][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,059][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,064][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,065][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,065][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,068][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,069][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,069][WARN ][org.elasticsearch.deprecation.index.mapper]  [pRrMhRL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195706924,
  "executionTime": 647
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707571,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707576,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707580,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707603,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707611,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707614,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707617,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707620,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707623,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1474195707632,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.NestedQueryBuilderTests",
  "startTimestamp": 1474195706892,
  "executionTime": 767
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "children": [
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testInvalidBounds",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195707665
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:27,688][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{gYl02fVxQlqSeX6ZerIvlA}{local}{local[156]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1474195707699,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1474195707712,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1474195707717,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1474195707721,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.HistogramTests",
  "startTimestamp": 1474195707665,
  "executionTime": 62
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.RoutingServiceTests",
   "displayName": "org.elasticsearch.cluster.routing.RoutingServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.RoutingServiceTests",
   "children": [
    {
     "id": "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
     "displayName": "testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
     "methodName": "testReroute",
     "className": "org.elasticsearch.cluster.routing.RoutingServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195707734
 }
]

[
 "TEST_STARTED",
 "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T12:48:27,750][INFO ][org.elasticsearch.cluster.routing] [node_s_0] --> performing fake reroute [test]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
  "startTimestamp": 1474195707747,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.RoutingServiceTests",
  "startTimestamp": 1474195707734,
  "executionTime": 23
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "children": [
    {
     "id": "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testDeadNodeWhileRelocatingOnFromNode",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    },
    {
     "id": "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testSimpleDeadNodeOnStartedPrimaryShard",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    },
    {
     "id": "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testDeadNodeWhileRelocatingOnToNode",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195707765
 }
]

[
 "TEST_STARTED",
 "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,784][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,786][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,787][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,787][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,787][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,787][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,787][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,788][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1474195707777,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,794][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,795][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,796][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,796][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,796][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail node with primary%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,796][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1474195707788,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,801][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,801][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,802][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,802][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,802][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,802][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:48:27,802][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node3 being initialized by killing node3%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1474195707797,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
  "startTimestamp": 1474195707765,
  "executionTime": 40
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.SpanTermQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
   "children": [
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testParseFailsWithMultipleFields(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testParseFailsWithMultipleFields",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.SpanTermQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195707811
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,833][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{m4kN_BC0SYW_MeKWtDPuqA}{local}{local[170]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,840][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,841][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,856][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,856][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,856][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,857][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,858][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,858][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,860][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,860][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,860][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,862][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,863][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,863][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,865][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,865][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,865][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,868][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,868][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,868][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,870][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,870][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,870][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,872][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,872][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,872][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,875][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,875][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,875][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,877][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,877][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,877][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,880][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,880][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,880][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,885][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,886][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:27,886][WARN ][org.elasticsearch.deprecation.index.mapper]  [ageFeORiW] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707828,
  "executionTime": 75
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707904,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707907,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707910,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707913,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707915,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707918,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707921,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707924,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707926,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.SpanTermQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanTermQueryBuilderTests)",
  "startTimestamp": 1474195707939,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.SpanTermQueryBuilderTests",
  "startTimestamp": 1474195707811,
  "executionTime": 135
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "children": [
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testClausesUnmodifiable",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testCollectPayloadsDeprecated",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195707953
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:27,993][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{0W743P7CRuG339-mRRGE6g}{local}{local[171]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,000][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,000][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,019][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,019][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,019][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,021][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,021][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,021][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,024][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,026][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,026][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,026][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,028][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,028][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,029][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,032][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,032][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,032][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,033][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,034][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,034][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,043][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,043][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,043][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,053][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,053][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,053][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,055][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,055][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,059][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,069][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,069][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,069][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,073][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,073][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,073][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,075][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,076][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,076][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,079][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,079][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,079][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,083][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,083][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,083][WARN ][org.elasticsearch.deprecation.index.mapper]  [Mbq] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195707979,
  "executionTime": 160
 }
]

[
 "TEST_STARTED",
 "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708139,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708148,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708159,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708174,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708215,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708218,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:28,226][WARN ][org.elasticsearch.deprecation.common] Deprecated field [collect_payloads] used, replaced by [no longer supported]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708223,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708226,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708229,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708237,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1474195708240,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.SpanNearQueryBuilderTests",
  "startTimestamp": 1474195707953,
  "executionTime": 689
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195708648
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:48:28,739][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{3940xZM-T1iawKEInTzDYg}{local}{local[172]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1474195708759,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1474195708761,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1474195708763,
  "executionTime": 20
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
  "startTimestamp": 1474195708648,
  "executionTime": 141
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "displayName": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "children": [
    {
     "id": "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiPoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_selfCrossingPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_envelope",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidMultiPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiDimensionShapes",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_geometryCollection",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_circle",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_OGCPolygonWithHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_orientationOption",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_OGCPolygonWithoutHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_simplePoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_polygonNoHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiLineString",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidMultipoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidPoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_lineString",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_polygonWithHole",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195708805
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708862,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708873,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708885,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708895,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708899,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708902,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708908,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708910,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708913,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708944,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708958,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708967,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708972,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708974,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708977,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708981,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708984,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708991,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708993,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1474195708998,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.GeoJSONShapeParserTests",
  "startTimestamp": 1474195708805,
  "executionTime": 201
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "displayName": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "children": [
    {
     "id": "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyNoPipelineId",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyFailures",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyIndexRedirect",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyAnyAction",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyBulkRedirect",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyNoIngestNodes",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709051
 }
]

[
 "TEST_STARTED",
 "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709071,
  "executionTime": 109
 }
]

[
 "TEST_STARTED",
 "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709180,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709185,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709189,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709198,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1474195709203,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
  "startTimestamp": 1474195709051,
  "executionTime": 157
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.sort.SortModeTests",
   "displayName": "org.elasticsearch.search.sort.SortModeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.sort.SortModeTests",
   "children": [
    {
     "id": "ID#testIllegalArgument(org.elasticsearch.search.sort.SortModeTests)",
     "displayName": "testIllegalArgument(org.elasticsearch.search.sort.SortModeTests)",
     "methodName": "testIllegalArgument",
     "className": "org.elasticsearch.search.sort.SortModeTests",
     "children": []
    },
    {
     "id": "ID#testSortMode(org.elasticsearch.search.sort.SortModeTests)",
     "displayName": "testSortMode(org.elasticsearch.search.sort.SortModeTests)",
     "methodName": "testSortMode",
     "className": "org.elasticsearch.search.sort.SortModeTests",
     "children": []
    },
    {
     "id": "ID#testParseNull(org.elasticsearch.search.sort.SortModeTests)",
     "displayName": "testParseNull(org.elasticsearch.search.sort.SortModeTests)",
     "methodName": "testParseNull",
     "className": "org.elasticsearch.search.sort.SortModeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709216
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArgument(org.elasticsearch.search.sort.SortModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArgument(org.elasticsearch.search.sort.SortModeTests)",
  "startTimestamp": 1474195709237,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSortMode(org.elasticsearch.search.sort.SortModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMode(org.elasticsearch.search.sort.SortModeTests)",
  "startTimestamp": 1474195709257,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseNull(org.elasticsearch.search.sort.SortModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseNull(org.elasticsearch.search.sort.SortModeTests)",
  "startTimestamp": 1474195709261,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.sort.SortModeTests",
  "startTimestamp": 1474195709216,
  "executionTime": 53
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.monitor.process.ProcessProbeTests",
   "displayName": "org.elasticsearch.monitor.process.ProcessProbeTests",
   "methodName": null,
   "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
   "children": [
    {
     "id": "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "displayName": "testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "methodName": "testProcessStats",
     "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
     "children": []
    },
    {
     "id": "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "displayName": "testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "methodName": "testProcessInfo",
     "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709276
 }
]

[
 "TEST_STARTED",
 "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
  "startTimestamp": 1474195709294,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
  "startTimestamp": 1474195709307,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.monitor.process.ProcessProbeTests",
  "startTimestamp": 1474195709276,
  "executionTime": 34
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.snapshots.SnapshotTests",
   "displayName": "org.elasticsearch.snapshots.SnapshotTests",
   "methodName": null,
   "className": "org.elasticsearch.snapshots.SnapshotTests",
   "children": [
    {
     "id": "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
     "displayName": "testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
     "methodName": "testSnapshotEquals",
     "className": "org.elasticsearch.snapshots.SnapshotTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
     "displayName": "testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.snapshots.SnapshotTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709315
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
  "startTimestamp": 1474195709338,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
  "startTimestamp": 1474195709340,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.snapshots.SnapshotTests",
  "startTimestamp": 1474195709315,
  "executionTime": 28
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryMalformedFieldNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testCustomWeightFactorQueryBuilderWithFunctionScore",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenMissingFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedQuery",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testParseSingleFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryMalformedArrayNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testRewrite",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testWeight1fStillProducesWeightFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testParseFunctionsArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedQueryFunctionFieldNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testRewriteWithFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedThrowsException",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessagesForMisplacedWeightsAndFunctions",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFieldValueFactorFactorArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709361
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,387][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{ZhhQHtzkTh-u4GaFX4VfjQ}{local}{local[194]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,395][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,395][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] loaded plugin [org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,412][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,412][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,412][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,413][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,413][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,413][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,416][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,416][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,416][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,418][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,419][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,419][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,420][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,420][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,421][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,423][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,423][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,423][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,424][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,425][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,428][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,430][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,430][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,430][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,433][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,434][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,434][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,435][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,435][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,435][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,437][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,437][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,437][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,441][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,441][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,441][WARN ][org.elasticsearch.deprecation.index.mapper]  [QP] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709381,
  "executionTime": 132
 }
]

[
 "TEST_STARTED",
 "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709514,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709516,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709524,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709527,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709532,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709543,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709546,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709548,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709551,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709573,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709576,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709578,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709614,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709616,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709619,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709624,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709632,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [5:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [9:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [5:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:29,638][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [9:20]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709636,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709639,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709641,
  "executionTime": 85
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709727,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709748,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709750,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709754,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709773,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1474195709775,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
  "startTimestamp": 1474195709361,
  "executionTime": 492
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.repositories.RepositoryDataTests",
   "displayName": "org.elasticsearch.repositories.RepositoryDataTests",
   "methodName": null,
   "className": "org.elasticsearch.repositories.RepositoryDataTests",
   "children": [
    {
     "id": "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testXContent",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testInitIndices",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testRemoveSnapshot",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testAddSnapshots",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testEqualsAndHashCode",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testResolveIndexId",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709863
 }
]

[
 "TEST_STARTED",
 "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709893,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709897,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709901,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709908,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709911,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1474195709913,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.repositories.RepositoryDataTests",
  "startTimestamp": 1474195709863,
  "executionTime": 53
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "children": [
    {
     "id": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery4",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQueryParsingExceptions",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testEmptyPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJsonCoerceDeprecated",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery1",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testInvalidClosedPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testInvalidOpenPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJsonIgnoreMalformedDeprecated",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery2",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery3",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testNullFieldName",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testDeprecatedXContent",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195709925
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:48:29,988][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{ZahucZ2ESHiQOOBMhHnHkA}{local}{local[195]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:48:29,996][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:48:29,996][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:11E7241696F18214]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testParsingAndToQuery4(GeoPolygonQueryBuilderTests.java:268)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195709971,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710010,
  "executionTime": 62
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710072,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710077,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710080,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710083,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:AE8871082EC0DF6]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testToQuery(GeoPolygonQueryBuilderTests.java:123)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710085,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:748ED0D567B519F2]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testParsingAndToQuery1(GeoPolygonQueryBuilderTests.java:211)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710088,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710091,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710118,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710121,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:49FCF6138B38CE9C]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testMustRewrite(GeoPolygonQueryBuilderTests.java:367)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710125,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710128,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710130,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:7E20583ECBB12652]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testParsingAndToQuery2(GeoPolygonQueryBuilderTests.java:227)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710133,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:CFFBF86D7B2685C4]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoPolygonQueryBuilderTests.testParsingAndToQuery3(GeoPolygonQueryBuilderTests.java:252)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710136,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710139,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710171,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710174,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710179,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710225,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1474195710228,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
  "startTimestamp": 1474195709925,
  "executionTime": 311
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195710245
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:48:30,312][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{osad_vtdSQq8UVyNUbNOmw}{local}{local[196]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1474195710321,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1474195710326,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:48:30,331][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"bucket_script\" : {%0A      \"buckets_path\" : {%0A        \"DcjPTWChxHKvcVmzrLeo\" : \"UBnFSwJnfcCZYmiEGOhLedtuoh\",%0A        \"qPKBSBHLEeHCQ\" : \"rTciLmBGryJlQVuJDGcsvpwuWzUklLwt\"%0A      },%0A      \"script\" : {%0A        \"file\" : \"script\",%0A        \"lang\" : \"my_lang\",%0A        \"params\" : {%0A          \"foo\" : \"bar\"%0A        }%0A      },%0A      \"format\" : \"djMQy\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:48:30,331][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"bucket_script\" : {%0A      \"buckets_path\" : {%0A        \"DcjPTWChxHKvcVmzrLeo\" : \"UBnFSwJnfcCZYmiEGOhLedtuoh\",%0A        \"qPKBSBHLEeHCQ\" : \"rTciLmBGryJlQVuJDGcsvpwuWzUklLwt\"%0A      },%0A      \"script\" : {%0A        \"file\" : \"script\",%0A        \"lang\" : \"my_lang\",%0A        \"params\" : {%0A          \"foo\" : \"bar\"%0A        }%0A      },%0A      \"format\" : \"djMQy\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1474195710329,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
  "startTimestamp": 1474195710245,
  "executionTime": 92
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "displayName": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "children": [
    {
     "id": "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testIllegalArgument",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195710345
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1474195710401,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1474195710407,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1474195710411,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.completion.RegexOptionsTests",
  "startTimestamp": 1474195710345,
  "executionTime": 70
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
   "displayName": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
   "children": [
    {
     "id": "ID#testRunSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testRunSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testRunSuccess",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    },
    {
     "id": "ID#testOnAfterSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testOnAfterSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testOnAfterSuccess",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    },
    {
     "id": "ID#testOnRejection(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testOnRejection(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testOnRejection",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    },
    {
     "id": "ID#testIsForceExecutuonDefaultsFalse(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testIsForceExecutuonDefaultsFalse(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testIsForceExecutuonDefaultsFalse",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    },
    {
     "id": "ID#testOnAfterFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testOnAfterFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testOnAfterFailure",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    },
    {
     "id": "ID#testRunFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "displayName": "testRunFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
     "methodName": "testRunFailure",
     "className": "org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195710424
 }
]

[
 "TEST_STARTED",
 "ID#testRunSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRunSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710468,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testOnAfterSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnAfterSuccess(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710480,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testOnRejection(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnRejection(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710521,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIsForceExecutuonDefaultsFalse(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsForceExecutuonDefaultsFalse(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710524,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testOnAfterFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnAfterFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710525,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRunFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRunFailure(org.elasticsearch.common.util.concurrent.AbstractRunnableTests)",
  "startTimestamp": 1474195710527,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.concurrent.AbstractRunnableTests",
  "startTimestamp": 1474195710424,
  "executionTime": 107
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.plugins.PluginInfoTests",
   "displayName": "org.elasticsearch.plugins.PluginInfoTests",
   "methodName": null,
   "className": "org.elasticsearch.plugins.PluginInfoTests",
   "children": [
    {
     "id": "ID#testReadFromPropertiesOldElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesOldElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesOldElasticsearchVersion",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesBadJavaVersionFormat(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesBadJavaVersionFormat(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesBadJavaVersionFormat",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesJavaVersionIncompatible(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesJavaVersionIncompatible(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesJavaVersionIncompatible",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromProperties(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromProperties(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromProperties",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesJavaVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesJavaVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesJavaVersionMissing",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesJvmMissingClassname(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesJvmMissingClassname(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesJvmMissingClassname",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesVersionMissing",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesBogusElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesBogusElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesBogusElasticsearchVersion",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testPluginListSorted(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testPluginListSorted(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testPluginListSorted",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesNameMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesNameMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesNameMissing",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesElasticsearchVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesElasticsearchVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesElasticsearchVersionMissing",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    },
    {
     "id": "ID#testReadFromPropertiesDescriptionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "displayName": "testReadFromPropertiesDescriptionMissing(org.elasticsearch.plugins.PluginInfoTests)",
     "methodName": "testReadFromPropertiesDescriptionMissing",
     "className": "org.elasticsearch.plugins.PluginInfoTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195710538
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesOldElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesOldElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195710556,
  "executionTime": 33
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesBadJavaVersionFormat(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesBadJavaVersionFormat(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195710590,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesJavaVersionIncompatible(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesJavaVersionIncompatible(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195710615,
  "executionTime": 282
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromProperties(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromProperties(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195710897,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesJavaVersionMissing(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesJavaVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195710910,
  "executionTime": 178
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesJvmMissingClassname(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesJvmMissingClassname(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711088,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesVersionMissing(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711139,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesBogusElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesBogusElasticsearchVersion(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711156,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testPluginListSorted(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginListSorted(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711170,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesNameMissing(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesNameMissing(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711179,
  "executionTime": 553
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesElasticsearchVersionMissing(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesElasticsearchVersionMissing(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711732,
  "executionTime": 64
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromPropertiesDescriptionMissing(org.elasticsearch.plugins.PluginInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromPropertiesDescriptionMissing(org.elasticsearch.plugins.PluginInfoTests)",
  "startTimestamp": 1474195711796,
  "executionTime": 17
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.plugins.PluginInfoTests",
  "startTimestamp": 1474195710538,
  "executionTime": 1576
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.CharFilterTests",
   "displayName": "org.elasticsearch.index.analysis.CharFilterTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.CharFilterTests",
   "children": [
    {
     "id": "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testHtmlStripCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    },
    {
     "id": "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testPatternReplaceCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    },
    {
     "id": "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testMappingCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712122
 }
]

[
 "TEST_STARTED",
 "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1474195712190,
  "executionTime": 226
 }
]

[
 "TEST_STARTED",
 "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1474195712417,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1474195712433,
  "executionTime": 19
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.CharFilterTests",
  "startTimestamp": 1474195712122,
  "executionTime": 384
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "children": [
    {
     "id": "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
     "displayName": "testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
     "methodName": "testPrioritizedIndicesAllocatedFirst",
     "className": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712512
 }
]

[
 "TEST_STARTED",
 "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
  "startTimestamp": 1474195712555,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
  "startTimestamp": 1474195712512,
  "executionTime": 58
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "displayName": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "children": [
    {
     "id": "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testWithNullArray",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testBadTypes",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testWithEmptyArray",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712579
 }
]

[
 "TEST_STARTED",
 "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712629,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712633,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712643,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712647,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712653,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1474195712659,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
  "startTimestamp": 1474195712579,
  "executionTime": 88
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.SecurityTests",
   "displayName": "org.elasticsearch.bootstrap.SecurityTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.SecurityTests",
   "children": [
    {
     "id": "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureNotExists",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testProcessExecution",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureRegularFile",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureExists",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712672
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1474195712699,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1474195712705,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1474195712708,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1474195712714,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.SecurityTests",
  "startTimestamp": 1474195712672,
  "executionTime": 65
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "children": [
    {
     "id": "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testBasicScoreProperties",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testGNDCornerCases",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testAssertions",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testScoreMutual",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testReduce",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testStreamResponse",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testBuilderAndParser",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712748
 }
]

[
 "TEST_STARTED",
 "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712787,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712795,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712797,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712799,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712801,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712815,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1474195712823,
  "executionTime": 35
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
  "startTimestamp": 1474195712748,
  "executionTime": 117
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "displayName": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "children": [
    {
     "id": "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "displayName": "testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "methodName": "testNestedSorting",
     "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "displayName": "testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195712883
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:32,957][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,028][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,028][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,032][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,035][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,035][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,143][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,143][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,143][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[14]}, bound_addresses {local[14]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,144][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{Mgh3P-3IQj-13SALJMm0HA}{7LQjC4ANQFWjhXPyqmzsUA}{local}{local[14]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,145][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,153][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,172][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,233][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,440][INFO ][org.elasticsearch.index.search.nested] [FloatNestedSortingTests#testNestedSorting]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
  "startTimestamp": 1474195712941,
  "executionTime": 573
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,522][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,577][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,601][INFO ][org.elasticsearch.index.search.nested] [FloatNestedSortingTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
  "startTimestamp": 1474195713514,
  "executionTime": 123
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,637][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,638][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,638][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:33,642][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.search.nested.FloatNestedSortingTests",
  "startTimestamp": 1474195712883,
  "executionTime": 776
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "displayName": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "children": [
    {
     "id": "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatFieldLevelBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    },
    {
     "id": "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatInvalidFieldLevelBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    },
    {
     "id": "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatFieldLevelMappingBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195713666
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,690][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,712][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,713][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,716][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,718][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:33,718][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,047][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,047][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,048][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[15]}, bound_addresses {local[15]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,050][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{4B72j4itRFSnRfPxDUlFhg}{vJsPN0LESIi6UIL_Jp54VA}{local}{local[15]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,050][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,062][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,080][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,136][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,155][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,162][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,162][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,162][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,164][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,167][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,174][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,198][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [FieldLevelBoostTests#testBackCompatFieldLevelBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1474195713681,
  "executionTime": 545
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,233][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,322][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,337][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,337][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,337][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,337][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,337][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,338][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,338][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,339][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [FieldLevelBoostTests#testBackCompatInvalidFieldLevelBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1474195714226,
  "executionTime": 172
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,405][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,456][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,472][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,522][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,566][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [FieldLevelBoostTests#testBackCompatFieldLevelMappingBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1474195714399,
  "executionTime": 212
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,612][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,612][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,612][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:48:34,614][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.FieldLevelBoostTests",
  "startTimestamp": 1474195713666,
  "executionTime": 960
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.MatchQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.MatchQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testSimpleMatchQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyFuzzyMatchQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testParseFailsWithMultipleFields",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testFuzzinessOnNonStringField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testExactOnUnsupportedField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyMatchPhrasePrefixQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testIllegalValues",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyMatchPhraseQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195714634
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,664][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{FCF9BsRoSP6SV35oUkx9zA}{local}{local[199]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,672][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,672][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:8C1CFDE33C888133]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testEqualsAndHashcode(AbstractQueryTestCase.java:732)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714654,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714686,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,691][WARN ][org.elasticsearch.deprecation.common] Deprecated field [fuzzy_match] used, expected [match] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,691][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714689,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714692,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:ECAFE79105874871]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.testFuzzinessOnNonStringField(MatchQueryBuilderTests.java:381)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714699,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:49FCF6138B38CE9C]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testMustRewrite(AbstractQueryTestCase.java:1006)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714701,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:A9CBE466D43DF580]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testSerialization(AbstractQueryTestCase.java:709)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714703,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:C7F78E21639317BA]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.testExactOnUnsupportedField(MatchQueryBuilderTests.java:402)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714705,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714707,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714710,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:AE8871082EC0DF6]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testToQuery(AbstractQueryTestCase.java:589)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714712,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,733][WARN ][org.elasticsearch.deprecation.common] Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,733][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714731,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714734,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,740][WARN ][org.elasticsearch.deprecation.common] Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:48:34,740][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714738,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:DC7BB0367AC828C6]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testFromXContent(AbstractQueryTestCase.java:273)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714741,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1474195714743,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.MatchQueryBuilderTests",
  "startTimestamp": 1474195714634,
  "executionTime": 116
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.RangeQueryRewriteTests",
   "displayName": "org.elasticsearch.index.query.RangeQueryRewriteTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
   "children": [
    {
     "id": "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteEmptyReader",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    },
    {
     "id": "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteMissingReader",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    },
    {
     "id": "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteMissingField",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195714756
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,789][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,825][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,825][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,828][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,830][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,830][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,930][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,930][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,931][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[16]}, bound_addresses {local[16]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,932][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{EYuWS_DjTA-noCeL4fWJ9Q}{nPxd_aQpSKadFxwBWK08og}{local}{local[16]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,933][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,945][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:34,962][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,043][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,059][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteEmptyReader]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1474195714779,
  "executionTime": 309
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,095][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,145][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,156][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteMissingReader]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1474195715089,
  "executionTime": 100
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,195][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,256][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,270][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteMissingField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1474195715189,
  "executionTime": 106
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,295][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,296][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,296][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:48:35,297][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.RangeQueryRewriteTests",
  "startTimestamp": 1474195714756,
  "executionTime": 548
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.XContentFactoryTests",
   "displayName": "org.elasticsearch.common.xcontent.XContentFactoryTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
   "children": [
    {
     "id": "ID#testGuessSmile(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testGuessSmile(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testGuessSmile",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testJsonFromBytesOptionallyPrecededByUtf8Bom(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testJsonFromBytesOptionallyPrecededByUtf8Bom(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testJsonFromBytesOptionallyPrecededByUtf8Bom",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testGuessYaml(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testGuessYaml(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testGuessYaml",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testCBORBasedOnMajorObjectDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testCBORBasedOnMajorObjectDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testCBORBasedOnMajorObjectDetection",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testEmptyStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testEmptyStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testEmptyStream",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testGuessCbor(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testGuessCbor(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testGuessCbor",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testCBORBasedOnMagicHeaderDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testCBORBasedOnMagicHeaderDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testCBORBasedOnMagicHeaderDetection",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testInvalidStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testInvalidStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testInvalidStream",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    },
    {
     "id": "ID#testGuessJson(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "displayName": "testGuessJson(org.elasticsearch.common.xcontent.XContentFactoryTests)",
     "methodName": "testGuessJson",
     "className": "org.elasticsearch.common.xcontent.XContentFactoryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195715308
 }
]

[
 "TEST_STARTED",
 "ID#testGuessSmile(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGuessSmile(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715322,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testJsonFromBytesOptionallyPrecededByUtf8Bom(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJsonFromBytesOptionallyPrecededByUtf8Bom(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715323,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGuessYaml(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGuessYaml(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715325,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCBORBasedOnMajorObjectDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCBORBasedOnMajorObjectDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715327,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyStream(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715328,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testGuessCbor(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGuessCbor(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715330,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testCBORBasedOnMagicHeaderDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCBORBasedOnMagicHeaderDetection(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715331,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidStream(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidStream(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715332,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testGuessJson(org.elasticsearch.common.xcontent.XContentFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGuessJson(org.elasticsearch.common.xcontent.XContentFactoryTests)",
  "startTimestamp": 1474195715333,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.XContentFactoryTests",
  "startTimestamp": 1474195715308,
  "executionTime": 27
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.BootstrapCheckTests",
   "displayName": "org.elasticsearch.bootstrap.BootstrapCheckTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
   "children": [
    {
     "id": "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testAlwaysEnforcedChecks",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testEnforceLimitsWhenBoundToNonLocalAddress",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testLogMessageInProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testClientJvmCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testFileDescriptorLimitsThrowsOnInvalidLimit",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxNumberOfThreadsCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testFileDescriptorLimits",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testNonProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testHeapSizeCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testNoLogMessageInNonProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testEnforceLimitsWhenPublishingToNonLocalAddress",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMightForkCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxMapCountCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testExceptionAggregation",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxSizeVirtualMemory",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testOnErrorCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMlockallCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testOnOutOfMemoryErrorCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testIgnoringSystemChecks",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195715498
 }
]

[
 "TEST_STARTED",
 "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715510,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715515,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715528,
  "executionTime": 62
 }
]

[
 "TEST_STARTED",
 "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,599][INFO ][org.elasticsearch.bootstrap] [testClientJvmCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,601][INFO ][org.elasticsearch.bootstrap] [testClientJvmCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715590,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715602,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,605][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,606][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,606][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715604,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,608][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,608][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,608][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715606,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715609,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,616][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,617][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,617][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715614,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715617,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715619,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,626][INFO ][org.elasticsearch.bootstrap] [testMightForkCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,626][INFO ][org.elasticsearch.bootstrap] [testMightForkCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,627][INFO ][org.elasticsearch.bootstrap] [testMightForkCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,627][WARN ][org.elasticsearch.bootstrap] [testMightForkCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715623,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,630][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,630][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,630][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715627,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,634][INFO ][org.elasticsearch.bootstrap] [testExceptionAggregation] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715631,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,637][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,638][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,638][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715635,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,641][INFO ][org.elasticsearch.bootstrap] [testOnErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,642][INFO ][org.elasticsearch.bootstrap] [testOnErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,642][WARN ][org.elasticsearch.bootstrap] [testOnErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715638,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,645][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,646][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,646][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,646][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715642,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,649][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,650][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,650][WARN ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,650][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,650][WARN ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715646,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T23:33:35,654][INFO ][org.elasticsearch.bootstrap] [testIgnoringSystemChecks] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1474195715651,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.BootstrapCheckTests",
  "startTimestamp": 1474195715498,
  "executionTime": 162
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.BigArraysTests",
   "displayName": "org.elasticsearch.common.util.BigArraysTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.BigArraysTests",
   "children": [
    {
     "id": "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testIntArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testFloatArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayHashCode",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testFloatArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testLongArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testMaxSizeExceededOnNew",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayEquals",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testObjectArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayBulkGet",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testMaxSizeExceededOnResize",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testDoubleArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testDoubleArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testLongArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayBulkSet",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195715669
 }
]

[
 "TEST_STARTED",
 "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,696][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,719][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,719][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,724][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,727][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,727][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,950][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,950][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,950][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[17]}, bound_addresses {local[17]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,958][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{ZW_-IxEhSaObjzPqtqt8VQ}{578QaZqlTTefc1iCrI4byg}{local}{local[17]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,959][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:35,992][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:36,321][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testIntArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195715688,
  "executionTime": 634
 }
]

[
 "TEST_STARTED",
 "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:36,616][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testFloatArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195716323,
  "executionTime": 294
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:36,689][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayHashCode]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195716617,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:36,694][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testFloatArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195716690,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:36,742][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195716695,
  "executionTime": 48
 }
]

[
 "TEST_STARTED",
 "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,009][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testLongArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195716744,
  "executionTime": 271
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,021][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 425984 [416kb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,024][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1671168 [1.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,027][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 3325952 [3.1mb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,029][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1671168 [1.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,032][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1662976 [1.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,035][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1671168 [1.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 414945 [405.2kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,037][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testMaxSizeExceededOnNew]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717015,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,046][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayEquals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717042,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,207][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testObjectArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717047,
  "executionTime": 161
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,434][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayBulkGet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717208,
  "executionTime": 227
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,441][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1703936 [1.6mb] for data of [<reused_arrays>] would be larger than configured breaker: 1301785 [1.2mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,445][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 114688 [112kb] for data of [<reused_arrays>] would be larger than configured breaker: 67911 [66.3kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,448][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 524288 [512kb] for data of [<reused_arrays>] would be larger than configured breaker: 292157 [285.3kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,452][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 2097152 [2mb] for data of [<reused_arrays>] would be larger than configured breaker: 1135190 [1mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,458][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 917504 [896kb] for data of [<reused_arrays>] would be larger than configured breaker: 798385 [779.6kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,463][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 2621440 [2.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 1953947 [1.8mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,464][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testMaxSizeExceededOnResize]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717435,
  "executionTime": 30
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,512][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testDoubleArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717465,
  "executionTime": 48
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:37,873][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717513,
  "executionTime": 362
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,015][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testDoubleArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195717875,
  "executionTime": 141
 }
]

[
 "TEST_STARTED",
 "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,023][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testLongArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195718016,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,076][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayBulkSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1474195718024,
  "executionTime": 53
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,077][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,078][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,078][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:18:38,083][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.BigArraysTests",
  "startTimestamp": 1474195715669,
  "executionTime": 2421
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.CancellableThreadsTests",
   "displayName": "org.elasticsearch.common.util.CancellableThreadsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.CancellableThreadsTests",
   "children": [
    {
     "id": "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
     "displayName": "testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
     "methodName": "testCancellableThreads",
     "className": "org.elasticsearch.common.util.CancellableThreadsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718096
 }
]

[
 "TEST_STARTED",
 "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
  "startTimestamp": 1474195718127,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.CancellableThreadsTests",
  "startTimestamp": 1474195718096,
  "executionTime": 43
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "displayName": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "children": [
    {
     "id": "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testNullPipelineId",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testParseWithProvidedPipeline",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testParseUsingPipelineStore",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testNonExistentPipelineId",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718145
 }
]

[
 "TEST_STARTED",
 "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1474195718164,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1474195718171,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1474195718197,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1474195718202,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
  "startTimestamp": 1474195718145,
  "executionTime": 74
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.ActiveShardCountTests",
   "displayName": "org.elasticsearch.action.support.ActiveShardCountTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.ActiveShardCountTests",
   "children": [
    {
     "id": "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelOne",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveZero",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveValueBased",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveRandom",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testValidate",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testParseString",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelDefault",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelAll",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testFromIntValue",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718226
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718248,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718250,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718253,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718255,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718258,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718259,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718263,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718265,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718267,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1474195718270,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.ActiveShardCountTests",
  "startTimestamp": 1474195718226,
  "executionTime": 52
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ActionModuleTests",
   "displayName": "org.elasticsearch.action.ActionModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ActionModuleTests",
   "children": [
    {
     "id": "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testSetupRestHandlerContainsKnownBuiltin",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCantOverwriteBuiltinAction",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCantOverwriteBuiltinRestHandler",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCanRegisterAction",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCanRegisterRestHandler",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testSetupActionsContainsKnownBuiltin",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718284
 }
]

[
 "TEST_STARTED",
 "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718299,
  "executionTime": 317
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718616,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718619,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718622,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718625,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1474195718628,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ActionModuleTests",
  "startTimestamp": 1474195718284,
  "executionTime": 349
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.ZenPingTests",
   "displayName": "org.elasticsearch.discovery.zen.ZenPingTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.ZenPingTests",
   "children": [
    {
     "id": "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
     "displayName": "testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
     "methodName": "testPingCollection",
     "className": "org.elasticsearch.discovery.zen.ZenPingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718639
 }
]

[
 "TEST_STARTED",
 "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
  "startTimestamp": 1474195718663,
  "executionTime": 31
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.ZenPingTests",
  "startTimestamp": 1474195718639,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "displayName": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "children": [
    {
     "id": "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "displayName": "testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "methodName": "testFilterByFrequency",
     "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "displayName": "testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195718703
 }
]

[
 "TEST_STARTED",
 "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,728][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,756][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,756][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,760][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,762][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,762][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,840][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,841][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,841][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[18]}, bound_addresses {local[18]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,842][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{WRPxcgzHQs6CRdUgjts6aQ}{_GL_oDRLSECTEt7mhK7s3g}{local}{local[18]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,843][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,854][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,871][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:38,925][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,047][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [FilterFieldDataTests#testFilterByFrequency]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "startTimestamp": 1474195718717,
  "executionTime": 407
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,152][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,271][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,296][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [FilterFieldDataTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "message": "No need to test empty usage here",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: No need to test empty usage here\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:3AAFAB4C613C80FF]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.fielddata.FilterFieldDataTests.testEmpty(FilterFieldDataTests.java:122)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: No need to test empty usage here",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "startTimestamp": 1474195719124,
  "executionTime": 216
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,341][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,341][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,341][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:48:39,343][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.FilterFieldDataTests",
  "startTimestamp": 1474195718703,
  "executionTime": 651
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.DiscoveryModuleTests",
   "displayName": "org.elasticsearch.discovery.DiscoveryModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
   "children": [
    {
     "id": "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterDefaults",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterMasterElectionService",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterDiscovery",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testLoadUnregisteredMasterElectionService",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195719366
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1474195719405,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1474195719443,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1474195719445,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1474195719449,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.DiscoveryModuleTests",
  "startTimestamp": 1474195719366,
  "executionTime": 87
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "displayName": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "children": [
    {
     "id": "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleMasterElection",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testFailingJoinsWhenNotMaster",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingJoinWithSameAddressButDifferentId",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testElectionWithConcurrentJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingJoinWithSameIdButDifferentNode",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleMasterElectionWithoutRequiredJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testMasterElectionTimeout",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testElectionBasedOnConflictingNodes",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleJoinAccumulation",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testNormalConcurrentJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testNewClusterStateOnExistingNodeJoin",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195719502
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,533][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,547][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,555][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,557][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{0Z0HNBygREWistnjjigy8w}{local}{local[test_0]} (id [1]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,564][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,566][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_0}{0}{0Z0HNBygREWistnjjigy8w}{local}{local[test_0]} (id [1]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,568][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{4Za35c3LSJSspshJAW-_Gg}{local}{local[test_1]} (id [2]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,568][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,568][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_1}{1}{4Za35c3LSJSspshJAW-_Gg}{local}{local[test_1]} (id [2]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,569][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{ScjWhmN9SZCkgtNAG82PAQ}{local}{local[test_2]} (id [3]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,569][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,569][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_2}{2}{ScjWhmN9SZCkgtNAG82PAQ}{local}{local[test_2]} (id [3]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,569][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{wfD9Y4KJTDOntkEsCtWrpw}{local}{local[test_3]} (id [4]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,570][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,570][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_3}{3}{wfD9Y4KJTDOntkEsCtWrpw}{local}{local[test_3]} (id [4]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,570][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{8GW34IdNTQC2lNofGRdgCQ}{local}{local[test_4]} (id [5]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,570][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,570][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_4}{4}{8GW34IdNTQC2lNofGRdgCQ}{local}{local[test_4]} (id [5]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,571][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,576][DEBUG][org.elasticsearch.discovery.zen] --> joining [2] unique master nodes. Total of [17] join requests%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [6]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [7]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [8]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [9]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,577][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [10]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [11]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [12]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [13]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [14]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [15]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [16]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [17]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [18]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [19]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [20]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [21]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_11}{11}{3Mrbt0f2T8GYDc2MzfF28Q}{local}{local[test_11]} (id [22]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] --> asserting master election didn't finish yet%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] --> joining [5] nodes, with repetition a total of [19]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [23]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [24]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [25]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [26]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [27]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_17}{17}{LKixPNF_SmK7sD29jN6ANA}{local}{local[test_17]} (id [28]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,579][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [29]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [30]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [31]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [32]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [33]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_20}{20}{s8J-L9LHQOuPgMsY03HqTQ}{local}{local[test_20]} (id [34]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [35]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [36]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [37]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [38]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [39]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,580][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,581][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [40]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,581][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,581][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_15}{15}{CPl21P2GSl2wNy0HUQqbqw}{local}{local[test_15]} (id [41]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,581][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,581][DEBUG][org.elasticsearch.discovery.zen] --> waiting for master election to with no exception%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,596][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [7], required [5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{2ELDsOuQRWuhbk9LA3agQg}{local}{local[204]}, added {{master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]},{master_15}{15}{CPl21P2GSl2wNy0HUQqbqw}{local}{local[test_15]},{data_20}{20}{s8J-L9LHQOuPgMsY03HqTQ}{local}{local[test_20]},{data_11}{11}{3Mrbt0f2T8GYDc2MzfF28Q}{local}{local[test_11]},{master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]},{master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]},{data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]},{data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]},{data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]},{data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]},{master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]},{master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]},{data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]},{data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]},{master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]},{data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]},{data_17}{17}{LKixPNF_SmK7sD29jN6ANA}{local}{local[test_17]},}, reason: zen-disco-elected-as-master ([17] nodes joined)[{master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]}, {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]}, {data_11}{11}{3Mrbt0f2T8GYDc2MzfF28Q}{local}{local[test_11]}, {data_17}{17}{LKixPNF_SmK7sD29jN6ANA}{local}{local[test_17]}, {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]}, {master_15}{15}{CPl21P2GSl2wNy0HUQqbqw}{local}{local[test_15]}, {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]}, {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]}, {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]}, {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]}, {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]}, {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]}, {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]}, {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]}, {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]}, {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]}, {data_20}{20}{s8J-L9LHQOuPgMsY03HqTQ}{local}{local[test_20]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [26]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [27]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [7]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [10]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [17]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [18]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,599][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_11}{11}{3Mrbt0f2T8GYDc2MzfF28Q}{local}{local[test_11]} (id [22]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_17}{17}{LKixPNF_SmK7sD29jN6ANA}{local}{local[test_17]} (id [28]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [8]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [9]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [20]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_15}{15}{CPl21P2GSl2wNy0HUQqbqw}{local}{local[test_15]} (id [41]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [25]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [32]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [30]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [40]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [11]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,600][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [16]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [13]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [19]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [33]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [36]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [6]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [12]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [24]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [29]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [35]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [14]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [15]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [21]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [31]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [38]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [39]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [23]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [37]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_20}{20}{s8J-L9LHQOuPgMsY03HqTQ}{local}{local[test_20]} (id [34]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,601][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [8])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] --> waiting on all joins to be processed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [6]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [7]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [8]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [9]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [10]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [11]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_8}{8}{K2qwhubpRoG1bvUrGrjs8g}{local}{local[test_8]} (id [12]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [13]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [14]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [15]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_10}{10}{CB314fClRnuFCYuaZQBsoQ}{local}{local[test_10]} (id [16]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [17]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_7}{7}{G7rs87VhRzqJ6lJiFMPasw}{local}{local[test_7]} (id [18]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_5}{5}{2BjSkutwQ_6uLP-TKv24jQ}{local}{local[test_5]} (id [19]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_9}{9}{MZSTrHlOQvGjjDS8NqJ_Zw}{local}{local[test_9]} (id [20]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_6}{6}{Dup0DZ1UTwm0-m4TEeZDgg}{local}{local[test_6]} (id [21]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,602][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_11}{11}{3Mrbt0f2T8GYDc2MzfF28Q}{local}{local[test_11]} (id [22]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [23]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [24]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [25]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [26]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_12}{12}{ia0YTouMSQOr2fRQo1Yg9A}{local}{local[test_12]} (id [27]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_17}{17}{LKixPNF_SmK7sD29jN6ANA}{local}{local[test_17]} (id [28]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [29]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [30]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [31]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{8qRG53sUSIemyM88Nitj1g}{local}{local[test_18]} (id [32]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [33]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_20}{20}{s8J-L9LHQOuPgMsY03HqTQ}{local}{local[test_20]} (id [34]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_16}{16}{da0iY3pYScCxsq9kPzaIUw}{local}{local[test_16]} (id [35]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_13}{13}{bpNFAYGiRha6ZNGzcv5Crw}{local}{local[test_13]} (id [36]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_21}{21}{08gJ3QpkRUuFkWmYX1W7Kw}{local}{local[test_21]} (id [37]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [38]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_19}{19}{gOJ9uOj6TRC7Uz02NdPvWQ}{local}{local[test_19]} (id [39]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_14}{14}{lpVxsmFQSI2bEEPuy9YWBQ}{local}{local[test_14]} (id [40]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_15}{15}{CPl21P2GSl2wNy0HUQqbqw}{local}{local[test_15]} (id [41]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][DEBUG][org.elasticsearch.discovery.zen] --> testing accumulation stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,603][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195719525,
  "executionTime": 79
 }
]

[
 "TEST_STARTED",
 "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,617][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,623][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,625][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{v2e4nvZFRY2ErfvhhnQsEg}{local}{local[test_0]} (id [42]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,625][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,625][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_0}{0}{v2e4nvZFRY2ErfvhhnQsEg}{local}{local[test_0]} (id [42]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] --> testing joins fail post accumulation%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{Hxv7CxVFSbmniBj_cnxPWg}{local}{local[test_1]} (id [43]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{1w7RUN_KTbKtHSEoSVWvPA}{local}{local[test_2]} (id [44]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{yKG0hw6BS1ms_JZR86QHgg}{local}{local[test_3]} (id [45]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{iONRMErhTzSy_JCZfYIOCw}{local}{local[test_4]} (id [46]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{4rAKbtelT9-uXZT7AvGUXA}{local}{local[test_5]} (id [47]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,626][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{4JL6cPPnQPCHdnEy2eJH3A}{local}{local[test_6]} (id [48]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_5}{5}{4rAKbtelT9-uXZT7AvGUXA}{local}{local[test_5]} (id [47]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_4}{4}{iONRMErhTzSy_JCZfYIOCw}{local}{local[test_4]} (id [46]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,627][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_2}{2}{1w7RUN_KTbKtHSEoSVWvPA}{local}{local[test_2]} (id [44]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,628][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_3}{3}{yKG0hw6BS1ms_JZR86QHgg}{local}{local[test_3]} (id [45]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,628][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_1}{1}{Hxv7CxVFSbmniBj_cnxPWg}{local}{local[test_1]} (id [43]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,628][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_6}{6}{4JL6cPPnQPCHdnEy2eJH3A}{local}{local[test_6]} (id [48]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{ElakqOvPQU2QOObUBOjD8g}{local}{local[207]}] not master for join request%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195719604,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,646][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{DLySh4Z6QSu4TkGy_ZucQw}{local}{local[208]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,652][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,654][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{node_12}{0azdIxsFR1uZ7xecpNu-Gw}{local}{local[211]},{node_10}{PCsscZQ6SjWbtyL0OqTcrA}{local}{local[209]},{node_11}{RP3yFkSSR6WOPCy0M4RUYQ}{local}{local[210]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,654][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{5JmGO_jqSHOSVz3qD7MeZg}{local}{local[208]} (id [49]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,655][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {other_node}{5JmGO_jqSHOSVz3qD7MeZg}{local}{local[208]} (id [49]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {other_node}{5JmGO_jqSHOSVz3qD7MeZg}{local}{local[208]}, found existing node {node}{DLySh4Z6QSu4TkGy_ZucQw}{local}{local[208]} with same address%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_102]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_102]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_102]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195719629,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,670][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{A3mKbdOMTjKXsSJyoZVnMw}{local}{local[212]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,677][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:39,679][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,203][INFO ][org.elasticsearch.discovery.zen] --> waiting to be elected as master (required joins [3])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,203][DEBUG][org.elasticsearch.discovery.zen] {master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,203][DEBUG][org.elasticsearch.discovery.zen] {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,203][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]} (id [51]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,203][DEBUG][org.elasticsearch.discovery.zen] {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]} (id [52]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]} (id [50]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][DEBUG][org.elasticsearch.discovery.zen] {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]} (id [53]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,204][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [4], required [3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{A3mKbdOMTjKXsSJyoZVnMw}{local}{local[212]}, added {{master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]},{master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]},{master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]},{master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]},}, reason: zen-disco-elected-as-master ([4] nodes joined)[{master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]}, {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]}, {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]}, {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][INFO ][org.elasticsearch.discovery.zen] --> waiting for joins to complete%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]} (id [50]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]} (id [52]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]} (id [51]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,205][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]} (id [53]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,206][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [5])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,206][INFO ][org.elasticsearch.discovery.zen] assert for [[{node}{A3mKbdOMTjKXsSJyoZVnMw}{local}{local[212]}, {master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]}, {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]}, {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]}, {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]}]] in:%0Acluster uuid: _na_%0Aversion: 6%0Astate uuid: JabrlqDoRQ-g_TqaLmoD_A%0Afrom_diff: false%0Ameta data version: 0%0Anodes: %0A   {node}{A3mKbdOMTjKXsSJyoZVnMw}{local}{local[212]}, local, master%0A   {master_1}{1}{MveXnVJpQseC-rYZHc3rNw}{local}{local[test_1]}%0A   {master_3}{3}{eqCOT0PES0qSqfNaHe8X5A}{local}{local[test_3]}%0A   {master_2}{2}{8xrhwzTsRVSRfezsDlC-sQ}{local}{local[test_2]}%0A   {master_0}{0}{Mp2q2sVhSMWqJGgC5YwRyw}{local}{local[test_0]}%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[node][V]%0A---- unassigned%0A%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195719657,
  "executionTime": 550
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,250][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{4JEB5iE5QO2PBeaxpf9NYw}{local}{local[213]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,259][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,261][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{node_10}{HGVt5tKNQsON-boiN8wXJw}{local}{local[214]},{node_11}{9_c7TiJ1RGmLzV1OpDo-8Q}{local}{local[215]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,262][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_name}{node_11}{f1-KkklWQZ-dNJr4LueeAw}{local}{local[215]} (id [54]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,262][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {other_name}{node_11}{f1-KkklWQZ-dNJr4LueeAw}{local}{local[215]} (id [54]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {other_name}{node_11}{f1-KkklWQZ-dNJr4LueeAw}{local}{local[215]}, found existing node {node_11}{9_c7TiJ1RGmLzV1OpDo-8Q}{local}{local[215]} with the same id but is a different node instance%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_102]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_102]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_102]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720207,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,268][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{1olo2QxhQXaekzbMPnLcKw}{local}{local[216]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,274][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,276][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {node}{1olo2QxhQXaekzbMPnLcKw}{local}{local[216]} (id [55]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,276][DEBUG][org.elasticsearch.discovery.zen] received a join request for an existing node [{node}{1olo2QxhQXaekzbMPnLcKw}{local}{local[216]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,276][DEBUG][org.elasticsearch.discovery.zen] future [join of {node}{1olo2QxhQXaekzbMPnLcKw}{local}{local[216]} (id [55]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,277][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {node}{uKr2tjf0RqKU9SAblIDmUQ}{local}{local[216]} (id [56]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,277][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {node}{uKr2tjf0RqKU9SAblIDmUQ}{local}{local[216]} (id [56]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {node}{uKr2tjf0RqKU9SAblIDmUQ}{local}{local[216]}, found existing node {node}{1olo2QxhQXaekzbMPnLcKw}{local}{local[216]} with the same id but is a different node instance%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_102]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_102]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_102]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720263,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,304][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{x_1QePmJRvKe58lqcZBkzw}{local}{local[217]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,310][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,311][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,311][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,313][DEBUG][org.elasticsearch.discovery.zen] --> requiredJoins is set to 0. verifying election finished%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,319][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [0], required [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,322][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{x_1QePmJRvKe58lqcZBkzw}{local}{local[217]}, reason: zen-disco-elected-as-master ([0] nodes joined)%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720278,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,333][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,338][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,340][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,340][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{9IyXbK_tSUqTnrYunlSYiA}{local}{local[test_0]} (id [57]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,341][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,341][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_0}{0}{9IyXbK_tSUqTnrYunlSYiA}{local}{local[test_0]} (id [57]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,344][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_1}{1}{sLdZh5L0QHCB-8dwwyP-7w}{local}{local[test_1]} (id [58]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,344][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,344][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_1}{1}{sLdZh5L0QHCB-8dwwyP-7w}{local}{local[test_1]} (id [58]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,344][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{uXwryPD8SyycIVM3Q5ki9A}{local}{local[test_2]} (id [59]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,345][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,345][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_2}{2}{uXwryPD8SyycIVM3Q5ki9A}{local}{local[test_2]} (id [59]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,345][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{S9fnsau9QBOpOL-0qYFqZA}{local}{local[test_3]} (id [60]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,345][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,345][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_3}{3}{S9fnsau9QBOpOL-0qYFqZA}{local}{local[test_3]} (id [60]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,348][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_4}{4}{krOuQGReTrSohtN71q14rQ}{local}{local[test_4]} (id [61]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,348][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,348][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_4}{4}{krOuQGReTrSohtN71q14rQ}{local}{local[test_4]} (id [61]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] --> joining [3] nodes, with repetition a total of [9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [62]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [63]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [64]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [65]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [66]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [67]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,349][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [68]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [69]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [70]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,350][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,351][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,354][TRACE][org.elasticsearch.discovery.zen] timed out waiting to be elected. waited [1ms]. pending master node joins [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,354][TRACE][org.elasticsearch.discovery.zen] stopping election ([timed out waiting to be elected])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [62]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [65]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [66]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [68]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [63]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [64]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,355][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [70]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [67]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] --> verifying election timed out%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] --> verifying all joins are failed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [62]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [69]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{qgCDZYVcSeuB9BGANGt3Pg}{local}{local[218]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [63]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [64]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [65]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [66]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [67]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{IQvq3pPURmSb7V8E0v9kOA}{local}{local[test_6]} (id [68]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{l3HFUbRvRxq0yAAbDf39HQ}{local}{local[test_5]} (id [69]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,356][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_7}{7}{09RyvG8aRRmU4aEFf3O4Ww}{local}{local[test_7]} (id [70]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720325,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,363][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{rYUZzi28QCGFn6JXmRys7Q}{local}{local[219]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,369][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,373][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{other_node}{c-aRiIC5RwKkKcmrckZgVQ}{local}{local[220]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,373][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,373][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{50qBnZdEQE-8qvH9Zw3zNw}{local}{local[220]} (id [71]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,373][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,374][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [1], required [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,375][DEBUG][org.elasticsearch.discovery.zen] removing existing node [{other_node}{c-aRiIC5RwKkKcmrckZgVQ}{local}{local[220]}], which conflicts with incoming join from [{other_node}{50qBnZdEQE-8qvH9Zw3zNw}{local}{local[220]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,375][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node}{rYUZzi28QCGFn6JXmRys7Q}{local}{local[219]}}, removed {{other_node}{c-aRiIC5RwKkKcmrckZgVQ}{local}{local[220]},}, added {{other_node}{50qBnZdEQE-8qvH9Zw3zNw}{local}{local[220]},}, reason: zen-disco-elected-as-master ([1] nodes joined)[{other_node}{50qBnZdEQE-8qvH9Zw3zNw}{local}{local[220]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,375][DEBUG][org.elasticsearch.discovery.zen] future [join of {other_node}{50qBnZdEQE-8qvH9Zw3zNw}{local}{local[220]} (id [71]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720357,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,391][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{7tRz8MivSTqz5vt6pytjbg}{local}{local[221]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,396][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{xeet4LDuTcSQ22Br89Ig4g}{local}{local[test_0]} (id [72]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_0}{0}{xeet4LDuTcSQ22Br89Ig4g}{local}{local[test_0]},}, reason: zen-disco-node-join[{master_0}{0}{xeet4LDuTcSQ22Br89Ig4g}{local}{local[test_0]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_0}{0}{xeet4LDuTcSQ22Br89Ig4g}{local}{local[test_0]} (id [72]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [2])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{TVggYX-SQAe7KYO4SyNJWA}{local}{local[test_1]} (id [73]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,398][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{ZOp2xwR2RMemum100S6NtQ}{local}{local[test_2]} (id [74]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{sLtg0ZfqSyKOSfggPETyOQ}{local}{local[test_3]} (id [75]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,399][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{J4lDZjRlR7a4Fzi11Ypejw}{local}{local[test_4]} (id [76]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,403][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_3}{3}{sLtg0ZfqSyKOSfggPETyOQ}{local}{local[test_3]},{master_1}{1}{TVggYX-SQAe7KYO4SyNJWA}{local}{local[test_1]},{data_4}{4}{J4lDZjRlR7a4Fzi11Ypejw}{local}{local[test_4]},{data_2}{2}{ZOp2xwR2RMemum100S6NtQ}{local}{local[test_2]},}, reason: zen-disco-node-join[{data_4}{4}{J4lDZjRlR7a4Fzi11Ypejw}{local}{local[test_4]}], zen-disco-election-stop [test][{data_2}{2}{ZOp2xwR2RMemum100S6NtQ}{local}{local[test_2]}, {data_3}{3}{sLtg0ZfqSyKOSfggPETyOQ}{local}{local[test_3]}, {master_1}{1}{TVggYX-SQAe7KYO4SyNJWA}{local}{local[test_1]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,403][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_2}{2}{ZOp2xwR2RMemum100S6NtQ}{local}{local[test_2]} (id [74]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,404][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{sLtg0ZfqSyKOSfggPETyOQ}{local}{local[test_3]} (id [75]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,404][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{TVggYX-SQAe7KYO4SyNJWA}{local}{local[test_1]} (id [73]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,404][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_4}{4}{J4lDZjRlR7a4Fzi11Ypejw}{local}{local[test_4]} (id [76]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,404][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_5}{5}{CyZqUHzlQKupT4xWZxLMLw}{local}{local[test_5]} (id [77]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,405][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_5}{5}{CyZqUHzlQKupT4xWZxLMLw}{local}{local[test_5]},}, reason: zen-disco-node-join[{master_5}{5}{CyZqUHzlQKupT4xWZxLMLw}{local}{local[test_5]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,405][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_5}{5}{CyZqUHzlQKupT4xWZxLMLw}{local}{local[test_5]} (id [77]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,405][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{uUkdrv92RmKuCMJKIuMFsg}{local}{local[test_6]} (id [78]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,405][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_6}{6}{uUkdrv92RmKuCMJKIuMFsg}{local}{local[test_6]},}, reason: zen-disco-node-join[{master_6}{6}{uUkdrv92RmKuCMJKIuMFsg}{local}{local[test_6]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,406][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_6}{6}{uUkdrv92RmKuCMJKIuMFsg}{local}{local[test_6]} (id [78]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,406][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_7}{7}{nDw4OpmUS7G2DBGbDumBwA}{local}{local[test_7]} (id [79]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,406][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_7}{7}{nDw4OpmUS7G2DBGbDumBwA}{local}{local[test_7]},}, reason: zen-disco-node-join[{data_7}{7}{nDw4OpmUS7G2DBGbDumBwA}{local}{local[test_7]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,406][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_7}{7}{nDw4OpmUS7G2DBGbDumBwA}{local}{local[test_7]} (id [79]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,407][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_8}{8}{C8HYNo2HS_ikHXZOUwG3nA}{local}{local[test_8]} (id [80]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,407][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_8}{8}{C8HYNo2HS_ikHXZOUwG3nA}{local}{local[test_8]},}, reason: zen-disco-node-join[{master_8}{8}{C8HYNo2HS_ikHXZOUwG3nA}{local}{local[test_8]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,407][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_8}{8}{C8HYNo2HS_ikHXZOUwG3nA}{local}{local[test_8]} (id [80]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720378,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,435][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{4_ZyvWreQOWBglKi7Y37zw}{local}{local[222]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,441][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,444][INFO ][org.elasticsearch.discovery.zen] --> waiting for joins to complete%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,450][DEBUG][org.elasticsearch.discovery.zen] {data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,450][DEBUG][org.elasticsearch.discovery.zen] {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,451][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]} (id [81]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,451][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]} (id [82]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,451][DEBUG][org.elasticsearch.discovery.zen] {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,451][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]} (id [83]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]},{master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]},{data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]},}, reason: zen-disco-node-join[{data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]}, {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]}, {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]} (id [81]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]} (id [82]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]} (id [83]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [2])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][DEBUG][org.elasticsearch.discovery.zen] {data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,452][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]} (id [84]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,453][DEBUG][org.elasticsearch.discovery.zen] {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,453][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]} (id [85]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,453][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]},{master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]},}, reason: zen-disco-node-join[{data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]}, {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]} (id [84]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]} (id [85]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][DEBUG][org.elasticsearch.discovery.zen] {data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]} (id [86]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]},}, reason: zen-disco-node-join[{data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,454][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]} (id [86]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,455][INFO ][org.elasticsearch.discovery.zen] assert for [[{node}{4_ZyvWreQOWBglKi7Y37zw}{local}{local[222]}, {data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]}, {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]}, {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]}, {data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]}, {data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]}, {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]}]] in:%0Acluster uuid: _na_%0Aversion: 7%0Astate uuid: NbE61LI2QA-Pbd1iSFK5JQ%0Afrom_diff: false%0Ameta data version: 0%0Anodes: %0A   {master_2}{2}{11UVMo2dT02EQh5gvUJevA}{local}{local[test_2]}%0A   {node}{4_ZyvWreQOWBglKi7Y37zw}{local}{local[222]}, local, master%0A   {data_0}{0}{RAx57CztQhqnWpQ-vpXeRA}{local}{local[test_0]}%0A   {data_3}{3}{mWpFYeXgQVyzzNoG6MYxkw}{local}{local[test_3]}%0A   {master_1}{1}{mIeMeV0dSNCdtK81XVdthw}{local}{local[test_1]}%0A   {data_5}{5}{t_48b6S6QNid7HXsFCa5vA}{local}{local[test_5]}%0A   {data_4}{4}{8oHpyCzNR6SxfbmDkEojtA}{local}{local[test_4]}%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[node][V]%0A---- unassigned%0A%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720408,
  "executionTime": 48
 }
]

[
 "TEST_STARTED",
 "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,462][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{UajWYDZNR56xoKpDWhndKg}{local}{local[223]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,470][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,472][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{other_node}{hkS45vLAS2Gz7ARDMuJveQ}{local}{local[224]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,472][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{hkS45vLAS2Gz7ARDMuJveQ}{local}{local[224]} (id [87]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,472][DEBUG][org.elasticsearch.discovery.zen] received a join request for an existing node [{other_node}{hkS45vLAS2Gz7ARDMuJveQ}{local}{local[224]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:48:40,472][DEBUG][org.elasticsearch.discovery.zen] future [join of {other_node}{hkS45vLAS2Gz7ARDMuJveQ}{local}{local[224]} (id [87]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1474195720456,
  "executionTime": 17
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.NodeJoinControllerTests",
  "startTimestamp": 1474195719502,
  "executionTime": 974
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.RefreshListenersTests",
   "displayName": "org.elasticsearch.index.shard.RefreshListenersTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.RefreshListenersTests",
   "children": [
    {
     "id": "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testConcurrentRefresh",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testTooMany",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testLotsOfThreads",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testAfterRefresh",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195720514
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1474195720555,
  "executionTime": 11827
 }
]

[
 "TEST_STARTED",
 "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1474195732382,
  "executionTime": 61
 }
]

[
 "TEST_STARTED",
 "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1474195732443,
  "executionTime": 6772
 }
]

[
 "TEST_STARTED",
 "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1474195739215,
  "executionTime": 47
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.RefreshListenersTests",
  "startTimestamp": 1474195720514,
  "executionTime": 18764
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.SingleObjectCacheTests",
   "displayName": "org.elasticsearch.common.util.SingleObjectCacheTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.SingleObjectCacheTests",
   "children": [
    {
     "id": "ID#testRefreshDoesntBlock(org.elasticsearch.common.util.SingleObjectCacheTests)",
     "displayName": "testRefreshDoesntBlock(org.elasticsearch.common.util.SingleObjectCacheTests)",
     "methodName": "testRefreshDoesntBlock",
     "className": "org.elasticsearch.common.util.SingleObjectCacheTests",
     "children": []
    },
    {
     "id": "ID#testRefresh(org.elasticsearch.common.util.SingleObjectCacheTests)",
     "displayName": "testRefresh(org.elasticsearch.common.util.SingleObjectCacheTests)",
     "methodName": "testRefresh",
     "className": "org.elasticsearch.common.util.SingleObjectCacheTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195739285
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshDoesntBlock(org.elasticsearch.common.util.SingleObjectCacheTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshDoesntBlock(org.elasticsearch.common.util.SingleObjectCacheTests)",
  "startTimestamp": 1474195739296,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRefresh(org.elasticsearch.common.util.SingleObjectCacheTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefresh(org.elasticsearch.common.util.SingleObjectCacheTests)",
  "startTimestamp": 1474195739298,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.SingleObjectCacheTests",
  "startTimestamp": 1474195739285,
  "executionTime": 16
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
   "displayName": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
   "children": [
    {
     "id": "ID#testWithoutCommonWordsMatch(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testWithoutCommonWordsMatch(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testWithoutCommonWordsMatch",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testQueryModeCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testQueryModeCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testQueryModeCommonGramsAnalysis",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testQueryModeSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testQueryModeSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testQueryModeSettings",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testCommonGramsAnalysis",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testDefault(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testDefault(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testDefault",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "displayName": "testSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
     "methodName": "testSettings",
     "className": "org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195739306
 }
]

[
 "TEST_STARTED",
 "ID#testWithoutCommonWordsMatch(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithoutCommonWordsMatch(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739314,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testQueryModeCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryModeCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739340,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testQueryModeSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryModeSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739439,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCommonGramsAnalysis(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739483,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testDefault(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefault(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739522,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSettings(org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests)",
  "startTimestamp": 1474195739529,
  "executionTime": 22
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests",
  "startTimestamp": 1474195739306,
  "executionTime": 322
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "displayName": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "children": [
    {
     "id": "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testFileHashCodeAndEquals",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testStageSequenceEnforcement",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testConcurrentModificationIndexFileDetailsMap",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testTimers",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testStart",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testTranslog",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testIndex",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195739641
 }
]

[
 "TEST_STARTED",
 "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739684,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739687,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739689,
  "executionTime": 133
 }
]

[
 "TEST_STARTED",
 "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739822,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739826,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739829,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:48:59,862][INFO ][org.elasticsearch.indices.recovery] [node_s_0] testing initial information%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:48:59,865][INFO ][org.elasticsearch.indices.recovery] [node_s_0] testing serialized information%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:48:59,927][INFO ][org.elasticsearch.indices.recovery] [node_s_0] testing post recovery%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1474195739860,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.recovery.RecoveryTargetTests",
  "startTimestamp": 1474195739641,
  "executionTime": 289
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195739950
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:00,049][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{wwJTtIM8TB-RjQ0j2u2oOA}{local}{local[226]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
  "startTimestamp": 1474195740062,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
  "startTimestamp": 1474195740064,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.GeoBoundsTests)",
  "startTimestamp": 1474195740066,
  "executionTime": 56
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.GeoBoundsTests",
  "startTimestamp": 1474195739950,
  "executionTime": 192
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195740153
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
  "startTimestamp": 1474195740192,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
  "startTimestamp": 1474195740196,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
  "startTimestamp": 1474195740204,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
  "startTimestamp": 1474195740212,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.GeoShapeFieldTypeTests)",
  "startTimestamp": 1474195740214,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.GeoShapeFieldTypeTests",
  "startTimestamp": 1474195740153,
  "executionTime": 69
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "displayName": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "children": [
    {
     "id": "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testMultiValuesDocsWithOverlappingStorageArrays",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    },
    {
     "id": "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testRandomValues",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    },
    {
     "id": "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testOrdinals",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195740228
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1474195740279,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1474195740281,
  "executionTime": 251
 }
]

[
 "TEST_STARTED",
 "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1474195740532,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
  "startTimestamp": 1474195740228,
  "executionTime": 318
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.ScriptQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
   "children": [
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonVerbose(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testFromJsonVerbose(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testFromJsonVerbose",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalConstructorArg(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testIllegalConstructorArg(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testIllegalConstructorArg",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.ScriptQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195740555
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,638][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{ILYWql-3SWSRYymy62W43A}{local}{local[227]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,647][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,648][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,668][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,668][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,669][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,675][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,675][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,675][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,677][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,677][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,677][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,683][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,683][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,683][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,684][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,684][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,685][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,689][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,689][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,689][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,691][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,691][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,692][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,693][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,694][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,694][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,698][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,698][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,699][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,700][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,700][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,700][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,728][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,728][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,728][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,740][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,740][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,740][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,743][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,743][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,743][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,745][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,745][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,745][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,748][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,748][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:00,749][WARN ][org.elasticsearch.deprecation.index.mapper]  [CbH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740621,
  "executionTime": 153
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740774,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740780,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740790,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740804,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740808,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonVerbose(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonVerbose(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740810,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalConstructorArg(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalConstructorArg(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740812,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740815,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740818,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.ScriptQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.ScriptQueryBuilderTests)",
  "startTimestamp": 1474195740841,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.ScriptQueryBuilderTests",
  "startTimestamp": 1474195740555,
  "executionTime": 904
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
   "children": [
    {
     "id": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery4(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery4",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLeftRightCanBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testLeftRightCanBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testLeftRightCanBeFlipped",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidationNullType(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testValidationNullType(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testValidationNullType",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testBrokenCoordinateCannotBeSet(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testBrokenCoordinateCannotBeSet(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testBrokenCoordinateCannotBeSet",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidationNullTypeString(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testValidationNullTypeString(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testValidationNullTypeString",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery2(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery2",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testTopBottomCannotBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testTopBottomCannotBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testTopBottomCannotBeFlipped",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testTopBottomCanBeFlippedOnIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testTopBottomCanBeFlippedOnIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testTopBottomCanBeFlippedOnIgnoreMalformed",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonCoerceFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testFromJsonCoerceFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testFromJsonCoerceFails",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery6(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery6(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery6",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testBrokenCoordinateCanBeSetWithIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testBrokenCoordinateCanBeSetWithIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testBrokenCoordinateCanBeSetWithIgnoreMalformed",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidationNullFieldname(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testValidationNullFieldname(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testValidationNullFieldname",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidation(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testValidation(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testValidation",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery3(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery3",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery1(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery1",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNormalization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testNormalization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testNormalization",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testExceptionOnMissingTypes(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testExceptionOnMissingTypes(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testExceptionOnMissingTypes",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testStrictnessDefault(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testStrictnessDefault(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testStrictnessDefault",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonIgnoreMalformedFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testFromJsonIgnoreMalformedFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testFromJsonIgnoreMalformedFails",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery5(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "displayName": "testParsingAndToQuery5(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
     "methodName": "testParsingAndToQuery5",
     "className": "org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195741471
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:01,529][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{CUledufGQIiSdbF7QvYE4A}{local}{local[228]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:01,539][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:01,539][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:11E7241696F18214]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery4(GeoBoundingBoxQueryBuilderTests.java:382)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741504,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testLeftRightCanBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLeftRightCanBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741575,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testValidationNullType(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidationNullType(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741582,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:AE8871082EC0DF6]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testToQuery(GeoBoundingBoxQueryBuilderTests.java:118)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741585,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBrokenCoordinateCannotBeSet(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBrokenCoordinateCannotBeSet(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741587,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741593,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testValidationNullTypeString(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidationNullTypeString(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741601,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:49FCF6138B38CE9C]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testMustRewrite(GeoBoundingBoxQueryBuilderTests.java:523)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741604,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:7E20583ECBB12652]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery2(GeoBoundingBoxQueryBuilderTests.java:350)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741607,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741610,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testTopBottomCannotBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:01,649][INFO ][org.elasticsearch.index.query] top: -63.021240803559806 bottom: -67.80219168545452%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopBottomCannotBeFlipped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741629,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741651,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741655,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTopBottomCanBeFlippedOnIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopBottomCanBeFlippedOnIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741657,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonCoerceFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonCoerceFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741659,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery6(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery6(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:91D8B56947D398D5]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery6(GeoBoundingBoxQueryBuilderTests.java:408)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery6(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741662,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741674,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBrokenCoordinateCanBeSetWithIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBrokenCoordinateCanBeSetWithIgnoreMalformed(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741677,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidationNullFieldname(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidationNullFieldname(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741680,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741684,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741710,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidation(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidation(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741713,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:CFFBF86D7B2685C4]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery3(GeoBoundingBoxQueryBuilderTests.java:369)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741720,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:748ED0D567B519F2]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery1(GeoBoundingBoxQueryBuilderTests.java:337)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741723,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNormalization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testNormalization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:D94CEE72123BB736]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testNormalization(GeoBoundingBoxQueryBuilderTests.java:227)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormalization(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741727,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionOnMissingTypes(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionOnMissingTypes(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741729,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testStrictnessDefault(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStrictnessDefault(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741732,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonIgnoreMalformedFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonIgnoreMalformedFails(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741734,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741738,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery5(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParsingAndToQuery5(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:F2E6C7BF8AF4E00B]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests.testParsingAndToQuery5(GeoBoundingBoxQueryBuilderTests.java:395)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery5(org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests)",
  "startTimestamp": 1474195741763,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.GeoBoundingBoxQueryBuilderTests",
  "startTimestamp": 1474195741471,
  "executionTime": 301
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "displayName": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "children": [
    {
     "id": "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testChangeSearchAnalyzerToDefault",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testDoNotRepeatOriginalMapping",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "test1Merge",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeObjectDynamic",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeObjectAndNested",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeSearchAnalyzer",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testConcurrentMergeTest",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195741780
 }
]

[
 "TEST_STARTED",
 "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,821][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,852][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,852][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,856][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,858][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:01,858][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,015][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,016][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,016][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[19]}, bound_addresses {local[19]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,022][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{bSh-zwDXS0mu7BPbigXzNg}{XCqlT3VgQwmEyFmqs1HDUw}{local}{local[19]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,023][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,040][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,058][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,128][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,145][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testChangeSearchAnalyzerToDefault]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195741812,
  "executionTime": 366
 }
]

[
 "TEST_STARTED",
 "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,184][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,252][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,395][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testDoNotRepeatOriginalMapping]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195742178,
  "executionTime": 320
 }
]

[
 "TEST_STARTED",
 "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,505][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,633][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,649][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#test1Merge]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195742498,
  "executionTime": 187
 }
]

[
 "TEST_STARTED",
 "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,692][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,764][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,782][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeObjectDynamic]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195742686,
  "executionTime": 142
 }
]

[
 "TEST_STARTED",
 "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,834][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,923][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,937][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeObjectAndNested]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195742828,
  "executionTime": 158
 }
]

[
 "TEST_STARTED",
 "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:02,992][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:03,046][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:03,060][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeSearchAnalyzer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195742986,
  "executionTime": 110
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:03,102][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:03,167][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:05,927][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testConcurrentMergeTest]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1474195743096,
  "executionTime": 2941
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:06,037][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:06,038][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:06,038][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T05:49:06,040][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.DocumentMapperMergeTests",
  "startTimestamp": 1474195741780,
  "executionTime": 4266
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "children": [
    {
     "id": "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testTermQuery",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195746055
 }
]

[
 "TEST_STARTED",
 "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746090,
  "executionTime": 255
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746345,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746348,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746351,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746354,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1474195746356,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.TypeFieldTypeTests",
  "startTimestamp": 1474195746055,
  "executionTime": 305
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.ParseFieldTests",
   "displayName": "org.elasticsearch.common.ParseFieldTests",
   "methodName": null,
   "className": "org.elasticsearch.common.ParseFieldTests",
   "children": [
    {
     "id": "ID#testAllDeprecated(org.elasticsearch.common.ParseFieldTests)",
     "displayName": "testAllDeprecated(org.elasticsearch.common.ParseFieldTests)",
     "methodName": "testAllDeprecated",
     "className": "org.elasticsearch.common.ParseFieldTests",
     "children": []
    },
    {
     "id": "ID#testParse(org.elasticsearch.common.ParseFieldTests)",
     "displayName": "testParse(org.elasticsearch.common.ParseFieldTests)",
     "methodName": "testParse",
     "className": "org.elasticsearch.common.ParseFieldTests",
     "children": []
    },
    {
     "id": "ID#testGetAllNamesIncludedDeprecated(org.elasticsearch.common.ParseFieldTests)",
     "displayName": "testGetAllNamesIncludedDeprecated(org.elasticsearch.common.ParseFieldTests)",
     "methodName": "testGetAllNamesIncludedDeprecated",
     "className": "org.elasticsearch.common.ParseFieldTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195746366
 }
]

[
 "TEST_STARTED",
 "ID#testAllDeprecated(org.elasticsearch.common.ParseFieldTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:06,438][WARN ][org.elasticsearch.deprecation.common] Deprecated field [like_text] used, replaced by [like]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllDeprecated(org.elasticsearch.common.ParseFieldTests)",
  "startTimestamp": 1474195746435,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParse(org.elasticsearch.common.ParseFieldTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:06,442][WARN ][org.elasticsearch.deprecation.common] Deprecated field [barFoo] used, expected [foo_bar] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:06,442][WARN ][org.elasticsearch.deprecation.common] Deprecated field [bar_foo] used, expected [foo_bar] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:06,442][WARN ][org.elasticsearch.deprecation.common] Deprecated field [Foobar] used, expected [foo_bar] instead%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse(org.elasticsearch.common.ParseFieldTests)",
  "startTimestamp": 1474195746440,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testGetAllNamesIncludedDeprecated(org.elasticsearch.common.ParseFieldTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetAllNamesIncludedDeprecated(org.elasticsearch.common.ParseFieldTests)",
  "startTimestamp": 1474195746443,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.ParseFieldTests",
  "startTimestamp": 1474195746366,
  "executionTime": 88
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "displayName": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "methodName": null,
   "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "children": [
    {
     "id": "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testAppendWhileRecovering",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testSimpleReplication",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testSimpleAppendOnlyReplication",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testIndexingDuringFileRecovery",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195746462
 }
]

[
 "TEST_STARTED",
 "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1474195746539,
  "executionTime": 1151
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1474195747691,
  "executionTime": 689
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1474195748381,
  "executionTime": 442
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,847][DEBUG][org.elasticsearch.index.shard] [s0] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,849][TRACE][org.elasticsearch.index.shard] [s0] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=2OaDlwbSQZmf8Gjx5V8qIg]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,878][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,878][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=KifLbGCvSAG89zZSTxH_ig]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,886][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,886][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] starting recovery from store ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,907][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [post recovery from shard_store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,907][TRACE][org.elasticsearch.index.shard] [s1] [test][0] recovery completed from [shard_store], took [21ms]%0A    index    : files           [0] with total_size [0b], took[0s]%0A             : recovered_files [0] with total_size [0b]%0A             : reusing_files   [0] with total_size [0b]%0A    verify_index    : took [0s], check_index [0s]%0A    translog : number_of_operations [0], took [20ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,907][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,907][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,908][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,911][TRACE][org.elasticsearch.index.replication] [s1] [test][0] captured translog id [-1] for recovery%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,913][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: recovering [segments_1], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,913][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,926][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: prepare remote engine for translog%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: remote engine start took [35.2ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: took [0s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] snapshot translog for recovery. current size is [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase2] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: sending transaction log operations%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] no translog operations to send to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase2] to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: took [178.2micros]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] finalizing recovery to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,961][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] finalizing recovery to {s1}{s1}{uYkPRu7gRZyPrpe0StOemQ}{local}{local[s1]}: took [71.3micros]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,962][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,962][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,962][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,962][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@62ff65ff]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,969][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][1], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,969][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][1], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,970][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@63f67b10]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,974][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@7745b449]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,974][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][2], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,974][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][2], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,974][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@12d3fd49]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,975][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@3483a5e9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,975][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][3], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,975][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][3], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,975][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@29088ea0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,976][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@1b3495a3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,976][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][4], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,976][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][4], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,976][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@326a2a81]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,976][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@31d65597]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][5], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][5], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@5bea628a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@546cef70]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][6], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,977][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][6], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,978][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@5fe74c19]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,978][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@103d1bc3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,978][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][7], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,978][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][7], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,978][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@2e47d27c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,979][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@3e101495]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,979][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][8], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,979][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][8], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,979][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@4bd0ef1e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,979][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@6c2cd751]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,980][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][9], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,980][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][9], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,980][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@5b36681f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,980][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@35419715]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,981][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][10], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,981][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][10], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,981][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@5ce32124]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,981][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@3064369f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,982][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][11], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,982][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][11], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,982][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@2fe5532a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:08,983][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,262][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,484][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,484][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=3H8ngCAcRjyX4NILDaKYQA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,507][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,535][TRACE][org.elasticsearch.index.replication] [s2] [test][0] captured translog id [2] for recovery%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,582][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: recovering [_0.cfe], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,582][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: recovering [_0.si], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,582][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: recovering [_0.cfs], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,582][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: recovering [segments_2], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,584][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: recovering_files [4] with total_size [2.5kb], reusing_files [0] with total_size [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,736][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@718e7b1d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,741][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][12], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,742][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][12], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,742][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@46b49915]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,746][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][12], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-18 18:49:09,750 TEST-IndexLevelReplicationTests.testIndexingDuringFileRecovery-seed#[FD13852EF36FC81C] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.logParent(LoggerConfig.java:381)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:376)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:49)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.trace(AbstractLogger.java:2215)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation$1.onFailure(ReplicationOperation.java:193)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:494)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:479)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica(ReplicationOperation.java:184)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas(ReplicationOperation.java:168)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:129)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.index(ESIndexLevelReplicationTestCase.java:277)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.indexDocs(ESIndexLevelReplicationTestCase.java:259)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase.testIndexingDuringFileRecovery(ESIndexLevelReplicationTestCase.java:158)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:498)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(Tes"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,756][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@3900509a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,756][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][13], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,757][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][13], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,757][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@29da939b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,757][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][13], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-18 18:49:09,759 TEST-IndexLevelReplicationTests.testIndexingDuringFileRecovery-seed#[FD13852EF36FC81C] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.logParent(LoggerConfig.java:381)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:376)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:49)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.trace(AbstractLogger.java:2215)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation$1.onFailure(ReplicationOperation.java:193)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:494)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:479)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica(ReplicationOperation.java:184)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas(ReplicationOperation.java:168)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:129)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.index(ESIndexLevelReplicationTestCase.java:277)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.indexDocs(ESIndexLevelReplicationTestCase.java:259)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase.testIndexingDuringFileRecovery(ESIndexLevelReplicationTestCase.java:158)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:498)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(Tes"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,763][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@2498bf72]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,763][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][14], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,763][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][14], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,763][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@52e64140]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,764][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][14], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,765][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@7bbe60ee]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,766][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][15], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,766][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][15], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,766][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@5f64e96a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,769][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][15], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,771][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@2ced1388]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,771][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][16], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,771][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][16], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,771][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@29338d8f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,772][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][16], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,774][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@2c6c4a52]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,775][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][17], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,775][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][17], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,775][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@689810ea]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,775][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][17], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,777][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@53ee06f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,777][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][18], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,777][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][18], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,777][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@653a1c3c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,777][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][18], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,780][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@2c6c61cb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,780][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][19], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,780][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][19], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,780][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@3ef96cb1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,781][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][19], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,785][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@3148ec27]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,785][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][20], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,786][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][20], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,786][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@7557971d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,786][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][20], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,789][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@507e35e9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,789][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][21], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,789][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][21], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,789][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@6eebe8b5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,790][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][21], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,792][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@6774ba5e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,792][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][22], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,792][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][22], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,792][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@1a0b7d05]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,793][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][22], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,794][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@3e7d2787]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,794][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][23], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,795][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=KifLbGCvSAG89zZSTxH_ig] for request [index {[test][type][23], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,795][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@70f0a6b6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,795][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3H8ngCAcRjyX4NILDaKYQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-09-18T10:49:09.465Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][23], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,808][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: prepare remote engine for translog%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,850][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: remote engine start took [42.2ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,851][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: took [0s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,851][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] snapshot translog for recovery. current size is [12]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,864][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase2] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: sending transaction log operations%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,865][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][12]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,865][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@3726bcec]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,869][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][13]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,869][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@38af634e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,869][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,869][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@7d61c3d2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,869][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][15]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,870][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@683aad7f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,870][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][16]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,870][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@1e1ff65b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,870][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,870][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@68861312]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][18]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@7a913163]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][19]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@27541f72]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@221d3d48]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][21]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,871][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@4e247f53]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,872][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][22]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,872][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@743c5a8a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,872][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][23]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,872][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@329cf06d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,881][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] sent final batch of [12][312b] (total: [12]) translog operations to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,881][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase2] to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: took [17ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:09,881][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] finalizing recovery to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,106][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] finalizing recovery to {s2}{s2}{fe5Nk9DbRVmSRWa-_s8Jkg}{local}{local[s2]}: took [225.2ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,106][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,106][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,106][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,106][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [147.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,255][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [147.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,256][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [147.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,393][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [147.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,394][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,394][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [0b] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,394][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,405][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:49:10,417][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1474195748823,
  "executionTime": 1627
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.replication.IndexLevelReplicationTests",
  "startTimestamp": 1474195746462,
  "executionTime": 4102
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
   "displayName": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
   "children": [
    {
     "id": "ID#testReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "displayName": "testReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
     "children": []
    },
    {
     "id": "ID#testwriteTo(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "displayName": "testwriteTo(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "methodName": "testwriteTo",
     "className": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
     "children": []
    },
    {
     "id": "ID#testInvalidReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "displayName": "testInvalidReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
     "methodName": "testInvalidReadFrom",
     "className": "org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195750571
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
  "startTimestamp": 1474195750596,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testwriteTo(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testwriteTo(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
  "startTimestamp": 1474195750598,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
  "startTimestamp": 1474195750600,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidReadFrom(org.elasticsearch.search.aggregations.SubAggCollectionModeTests)",
  "startTimestamp": 1474195750602,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.SubAggCollectionModeTests",
  "startTimestamp": 1474195750571,
  "executionTime": 35
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.RootObjectMapperTests",
   "displayName": "org.elasticsearch.index.mapper.RootObjectMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
   "children": [
    {
     "id": "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDateFormatters",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testNumericDetection",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDynamicTemplates",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDateDetection",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195750613
 }
]

[
 "TEST_STARTED",
 "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,666][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,709][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,709][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,718][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,721][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,721][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,892][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,892][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,892][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[20]}, bound_addresses {local[20]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,895][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{bWHDMr0SQJK6RqriAUXT7Q}{h8aDhGu-Tluh1J6CKLz99w}{local}{local[20]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,895][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,907][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:10,926][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,011][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,039][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDateFormatters]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1474195750658,
  "executionTime": 552
 }
]

[
 "TEST_STARTED",
 "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,216][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,350][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,369][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testNumericDetection]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1474195751210,
  "executionTime": 214
 }
]

[
 "TEST_STARTED",
 "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,430][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,523][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,545][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDynamicTemplates]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1474195751424,
  "executionTime": 156
 }
]

[
 "TEST_STARTED",
 "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,588][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,697][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,708][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDateDetection]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1474195751580,
  "executionTime": 156
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,736][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,737][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,737][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T11:49:11,739][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.RootObjectMapperTests",
  "startTimestamp": 1474195750613,
  "executionTime": 1132
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "children": [
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIncludeInAll",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNoDocValues",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNotIndexed",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testStore",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIgnoreMalformed",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIllegalScalingFactor",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testCoerce",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testMissingScalingFactor",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195751751
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,772][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,794][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,794][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,824][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,827][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:11,827][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,096][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,097][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,098][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[21]}, bound_addresses {local[21]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,100][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{nZLQvNyRQVGXePuLfg-O9w}{3Jamckx3Tkm4o4RoL4NoQg}{local}{local[21]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,101][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,148][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,186][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,254][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,272][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195751763,
  "executionTime": 602
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,372][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,424][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,443][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752365,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,477][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,570][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,585][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752471,
  "executionTime": 159
 }
]

[
 "TEST_STARTED",
 "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,635][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,688][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,712][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNoDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752630,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,752][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,803][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,815][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNotIndexed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752746,
  "executionTime": 97
 }
]

[
 "TEST_STARTED",
 "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,850][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,910][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,928][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752843,
  "executionTime": 119
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:12,968][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,022][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,041][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIgnoreMalformed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195752962,
  "executionTime": 120
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,089][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,542][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,557][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIllegalScalingFactor]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195753082,
  "executionTime": 514
 }
]

[
 "TEST_STARTED",
 "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,602][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,662][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,679][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testCoerce]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195753596,
  "executionTime": 202
 }
]

[
 "TEST_STARTED",
 "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,805][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,856][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,881][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testMissingScalingFactor]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195753798,
  "executionTime": 131
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,936][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:13,993][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,010][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,056][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,086][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [ScaledFloatFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1474195753929,
  "executionTime": 202
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,131][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,132][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,132][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T15:49:14,134][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
  "startTimestamp": 1474195751751,
  "executionTime": 2395
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "children": [
    {
     "id": "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
     "displayName": "testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
     "methodName": "testSameHost",
     "className": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195754152
 }
]

[
 "TEST_STARTED",
 "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:14,174][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding two nodes with the same host%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:14,176][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> start all primary shards, no replica will be started since its on the same host%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:14,177][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> add another node, with a different host, replicas will be allocating%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
  "startTimestamp": 1474195754167,
  "executionTime": 10
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
  "startTimestamp": 1474195754152,
  "executionTime": 27
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "displayName": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "children": [
    {
     "id": "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testEvaluateConditions",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testValidation",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testCreateIndexRequest",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testGenerateRolloverIndexName",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testCreateUpdateAliasRequest",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195754185
 }
]

[
 "TEST_STARTED",
 "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1474195754205,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1474195754213,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1474195754215,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1474195754217,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1474195754219,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
  "startTimestamp": 1474195754185,
  "executionTime": 43
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "displayName": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "methodName": null,
   "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "children": [
    {
     "id": "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testDifferentCompressedRepresentation",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    },
    {
     "id": "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    },
    {
     "id": "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testHashCode",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195754234
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1474195754262,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1474195754265,
  "executionTime": 1500
 }
]

[
 "TEST_STARTED",
 "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1474195755765,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.compress.DeflateCompressedXContentTests",
  "startTimestamp": 1474195754234,
  "executionTime": 1535
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "displayName": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
     "displayName": "testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195755775
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
  "startTimestamp": 1474195755822,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
  "startTimestamp": 1474195755775,
  "executionTime": 51
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.TransportServiceHandshakeTests",
   "displayName": "org.elasticsearch.transport.TransportServiceHandshakeTests",
   "methodName": null,
   "className": "org.elasticsearch.transport.TransportServiceHandshakeTests",
   "children": [
    {
     "id": "ID#testIgnoreMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "displayName": "testIgnoreMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "methodName": "testIgnoreMismatchedClusterName",
     "className": "org.elasticsearch.transport.TransportServiceHandshakeTests",
     "children": []
    },
    {
     "id": "ID#testMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "displayName": "testMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "methodName": "testMismatchedClusterName",
     "className": "org.elasticsearch.transport.TransportServiceHandshakeTests",
     "children": []
    },
    {
     "id": "ID#testIncompatibleVersions(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "displayName": "testIncompatibleVersions(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "methodName": "testIncompatibleVersions",
     "className": "org.elasticsearch.transport.TransportServiceHandshakeTests",
     "children": []
    },
    {
     "id": "ID#testConnectToNodeLight(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "displayName": "testConnectToNodeLight(org.elasticsearch.transport.TransportServiceHandshakeTests)",
     "methodName": "testConnectToNodeLight",
     "className": "org.elasticsearch.transport.TransportServiceHandshakeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195755836
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:16,587][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:17,143][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9301}, bound_addresses {127.0.0.1:9301}, {[::1]:9301}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
  "startTimestamp": 1474195755885,
  "executionTime": 1347
 }
]

[
 "TEST_STARTED",
 "ID#testMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:17,925][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:18,578][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9301}, bound_addresses {127.0.0.1:9301}, {[::1]:9301}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMismatchedClusterName(org.elasticsearch.transport.TransportServiceHandshakeTests)",
  "startTimestamp": 1474195757232,
  "executionTime": 1358
 }
]

[
 "TEST_STARTED",
 "ID#testIncompatibleVersions(org.elasticsearch.transport.TransportServiceHandshakeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:19,168][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:19,976][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9301}, bound_addresses {127.0.0.1:9301}, {[::1]:9301}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncompatibleVersions(org.elasticsearch.transport.TransportServiceHandshakeTests)",
  "startTimestamp": 1474195758590,
  "executionTime": 1392
 }
]

[
 "TEST_STARTED",
 "ID#testConnectToNodeLight(org.elasticsearch.transport.TransportServiceHandshakeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:20,613][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}, {[::1]:9300}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:21,529][INFO ][org.elasticsearch.test.transport] publish_address {127.0.0.1:9301}, bound_addresses {127.0.0.1:9301}, {[::1]:9301}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConnectToNodeLight(org.elasticsearch.transport.TransportServiceHandshakeTests)",
  "startTimestamp": 1474195759983,
  "executionTime": 1562
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.TransportServiceHandshakeTests",
  "startTimestamp": 1474195755836,
  "executionTime": 5711
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "displayName": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    },
    {
     "id": "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testToXContent",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195761553
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1474195761567,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1474195761569,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1474195761572,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
  "startTimestamp": 1474195761553,
  "executionTime": 23
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.internal.InternalSearchHitTests",
   "displayName": "org.elasticsearch.search.internal.InternalSearchHitTests",
   "methodName": null,
   "className": "org.elasticsearch.search.internal.InternalSearchHitTests",
   "children": [
    {
     "id": "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
     "displayName": "testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
     "methodName": "testSerializeShardTarget",
     "className": "org.elasticsearch.search.internal.InternalSearchHitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195761582
 }
]

[
 "TEST_STARTED",
 "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
  "startTimestamp": 1474195761600,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.internal.InternalSearchHitTests",
  "startTimestamp": 1474195761582,
  "executionTime": 32
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195761620
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1474195761640,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1474195761642,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1474195761643,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1474195761646,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1474195761648,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.SourceFieldTypeTests",
  "startTimestamp": 1474195761620,
  "executionTime": 32
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "children": [
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMinFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testSumFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testThatUnrecognizedFromStringThrowsException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testNoneFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testThatNullFromStringThrowsException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testAvgFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromJsonEmptyQueryBody",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testNonDefaultSimilarity",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMaxFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testToQueryInnerQueryType",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testIllegalValues",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195761661
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:21,709][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{yh3PxZxdQkyXmebK6L7VLw}{local}{local[232]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:21,716][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:21,716][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761703,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761743,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761746,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761749,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761752,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761755,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761757,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761784,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761786,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761789,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761791,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:21,795][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:21,796][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761793,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761796,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761805,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761809,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761811,
  "executionTime": 53
 }
]

[
 "TEST_STARTED",
 "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761864,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761866,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761869,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761872,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1474195761877,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.HasChildQueryBuilderTests",
  "startTimestamp": 1474195761661,
  "executionTime": 233
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "displayName": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "children": [
    {
     "id": "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testWaitForActiveShards",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testIndexDeletedAfterPrimaryOperation",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testReplication",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testAddedReplicaAfterPrimaryOperation",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testDemotedPrimary",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testReplicationWithShadowIndex",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195761903
 }
]

[
 "TEST_STARTED",
 "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761945,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761954,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761974,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761980,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761984,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1474195761991,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.replication.ReplicationOperationTests",
  "startTimestamp": 1474195761903,
  "executionTime": 98
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testValueForSearch",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762007
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762059,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762062,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762066,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762068,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762074,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762076,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1474195762077,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
  "startTimestamp": 1474195762007,
  "executionTime": 74
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.VersionTypeTests",
   "displayName": "org.elasticsearch.index.VersionTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.VersionTypeTests",
   "children": [
    {
     "id": "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testVersionValidation",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testForceVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testInternalVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testExternalGTEVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testExternalVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testUpdateVersion",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762091
 }
]

[
 "TEST_STARTED",
 "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762111,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762113,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762114,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762115,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762116,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1474195762118,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.VersionTypeTests",
  "startTimestamp": 1474195762091,
  "executionTime": 31
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
   "children": [
    {
     "id": "ID#testInSyncAllocationIdsUpdated(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "displayName": "testInSyncAllocationIdsUpdated(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "methodName": "testInSyncAllocationIdsUpdated",
     "className": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testPrimaryFailureBatchedWithReplicaFailure(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "displayName": "testPrimaryFailureBatchedWithReplicaFailure(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "methodName": "testPrimaryFailureBatchedWithReplicaFailure",
     "className": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testInSyncIdsNotGrowingWithoutBounds(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "displayName": "testInSyncIdsNotGrowingWithoutBounds(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "methodName": "testInSyncIdsNotGrowingWithoutBounds",
     "className": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testDeadNodesBeforeReplicaFailed(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "displayName": "testDeadNodesBeforeReplicaFailed(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
     "methodName": "testDeadNodesBeforeReplicaFailed",
     "className": "org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762127
 }
]

[
 "TEST_STARTED",
 "ID#testInSyncAllocationIdsUpdated(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,143][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] creating an index with 1 shard, 2 replicas%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,144][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] adding three nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,145][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,145][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,146][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,146][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove a node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,146][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,146][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove all remaining nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,147][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,148][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [reroute commands]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,148][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,148][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,149][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInSyncAllocationIdsUpdated(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
  "startTimestamp": 1474195762136,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryFailureBatchedWithReplicaFailure(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,156][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] creating an index with 1 shard, 1 replica%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,157][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,157][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,158][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,158][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,158][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Failing [shard id [[test][0]], allocation id [sjEVdgwWR6a0gIdd2GKqyw], primary term [0], message [dummy], shard id [[test][0]], allocation id [3UhrPSXYQIeeKQfeL6XaEg], primary term [1], message [dummy]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,159][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [shards failed [[test][0], [test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryFailureBatchedWithReplicaFailure(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
  "startTimestamp": 1474195762150,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testInSyncIdsNotGrowingWithoutBounds(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,165][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] creating an index with 1 shard, 1 replica%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,166][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,166][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,166][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,167][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,167][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove a node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,167][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,167][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] add back node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,167][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,172][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,172][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove the node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,172][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,172][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] add back node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,172][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove the node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] add back node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,173][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,174][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove the node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,174][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,174][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] add back node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,174][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,174][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,175][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove the node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,175][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,175][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] add back node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,175][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,175][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,176][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove the node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,176][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInSyncIdsNotGrowingWithoutBounds(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
  "startTimestamp": 1474195762159,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testDeadNodesBeforeReplicaFailed(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,189][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] creating an index with 1 shard, 1 replica%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,189][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,189][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start primary shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,190][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start replica shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,190][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,190][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] remove replica node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,191][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:22,191][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail replica (for which there is no shard routing in the CS anymore)%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeadNodesBeforeReplicaFailed(org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests)",
  "startTimestamp": 1474195762182,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.InSyncAllocationIdTests",
  "startTimestamp": 1474195762127,
  "executionTime": 67
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762200
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T21:49:22,280][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{2tG_Sk9fS8mk98OLYOpYNA}{local}{local[304]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1474195762291,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1474195762293,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1474195762295,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
  "startTimestamp": 1474195762200,
  "executionTime": 111
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.term.SuggestModeTests",
   "displayName": "org.elasticsearch.search.suggest.term.SuggestModeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
   "children": [
    {
     "id": "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testWriteTo",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testFromString",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762319
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1474195762346,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1474195762356,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1474195762358,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1474195762359,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.term.SuggestModeTests",
  "startTimestamp": 1474195762319,
  "executionTime": 47
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "children": [
    {
     "id": "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testMultiIndexUnevenNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testSingleIndexStartedShard",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testSingleIndexShardFailed",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testMultiIndexEvenDistribution",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762374
 }
]

[
 "TEST_STARTED",
 "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,388][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table with 10 indices%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,389][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Starting 3 nodes and rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,390][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start two more nodes, things should remain the same%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,392][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test9][0], [test6][0], [test3][0], [test0][0], [test2][0], [test5][0], [test8][0], [test4][0], [test1][0], [test7][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,392][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Now, mark the relocated as started%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1474195762383,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,399][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,399][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding one node and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Rerouting again, nothing should change%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,400][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Starting another node and making sure nothing changed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Killing node1 where the shard is, checking the shard is relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,401][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,401][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start another node, make sure that things remain the same (shard is in node2 and initializing)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,401][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shard on node 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,401][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1474195762393,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,407][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,407][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding one node and rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,407][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as failed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,408][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1474195762402,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,413][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table with 50 indices%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,414][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding 25 nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,429][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding additional 25 nodes, nothing should change%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,436][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T14:49:22,452][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test30][0], [test9][0], [test3][0], [test8][0], [test7][0], [test29][0], [test28][0], [test6][0], [test27][0], [test5][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1474195762408,
  "executionTime": 44
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
  "startTimestamp": 1474195762374,
  "executionTime": 82
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.index.IndexRequestTests",
   "displayName": "org.elasticsearch.action.index.IndexRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.index.IndexRequestTests",
   "children": [
    {
     "id": "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testIndexRequestOpTypeFromString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsLong",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testReadBogusString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testIndexingRejectsLongIds",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testWaitForActiveShards",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsTimeValue",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testCreateOperationRejectsVersions",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testAutoGenIdTimestampIsSet",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testValidateTTL",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762463
 }
]

[
 "TEST_STARTED",
 "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762479,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762482,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762484,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762486,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762490,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762493,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762494,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762496,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762498,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1474195762500,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.index.IndexRequestTests",
  "startTimestamp": 1474195762463,
  "executionTime": 41
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.IpFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.IpFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
   "children": [
    {
     "id": "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNotIndexed",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testStore",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testIgnoreMalformed",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testIncludeInAll",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testSerializeDefaults",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNoDocValues",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195762518
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,611][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,663][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,663][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,667][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,670][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,670][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,989][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,989][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:22,990][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[22]}, bound_addresses {local[22]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,021][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{x_pLY5eHS_WW64ZcXUdDRA}{zzztvcs3QyuPRJwAbHFQ4w}{local}{local[22]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,025][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,226][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,244][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,287][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,314][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNotIndexed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195762603,
  "executionTime": 739
 }
]

[
 "TEST_STARTED",
 "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,349][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,409][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,422][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195763343,
  "executionTime": 104
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,454][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,536][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,559][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195763447,
  "executionTime": 149
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,602][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,677][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,695][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,740][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,762][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [IpFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195763596,
  "executionTime": 268
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,871][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,940][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:23,956][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testIgnoreMalformed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195763864,
  "executionTime": 140
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,010][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,061][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,079][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195764004,
  "executionTime": 141
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,153][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,272][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,285][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195764146,
  "executionTime": 738
 }
]

[
 "TEST_STARTED",
 "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,892][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,955][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:24,978][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testSerializeDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195764884,
  "executionTime": 169
 }
]

[
 "TEST_STARTED",
 "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,073][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,129][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,148][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNoDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1474195765053,
  "executionTime": 150
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,204][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,205][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,205][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:25,206][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.IpFieldMapperTests",
  "startTimestamp": 1474195762518,
  "executionTime": 2700
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
   "displayName": "org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
   "children": [
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
     "children": []
    },
    {
     "id": "ID#testToXContext(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "displayName": "testToXContext(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "methodName": "testToXContext",
     "className": "org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
     "children": []
    },
    {
     "id": "ID#testNullCategoryIsIllegal(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "displayName": "testNullCategoryIsIllegal(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
     "methodName": "testNullCategoryIsIllegal",
     "className": "org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195765228
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
  "startTimestamp": 1474195765275,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testToXContext(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToXContext(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
  "startTimestamp": 1474195765281,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNullCategoryIsIllegal(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullCategoryIsIllegal(org.elasticsearch.search.suggest.completion.CategoryQueryContextTests)",
  "startTimestamp": 1474195765285,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.completion.CategoryQueryContextTests",
  "startTimestamp": 1474195765228,
  "executionTime": 61
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testConversions",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testTermQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testRangeQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testHalfFloatRange",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195765296
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765312,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765314,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765318,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765320,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765322,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765325,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765326,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765328,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765330,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1474195765332,
  "executionTime": 1390
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.NumberFieldTypeTests",
  "startTimestamp": 1474195765296,
  "executionTime": 1430
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ExceptionSerializationTests",
   "displayName": "org.elasticsearch.ExceptionSerializationTests",
   "methodName": null,
   "className": "org.elasticsearch.ExceptionSerializationTests",
   "children": [
    {
     "id": "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIOException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIOException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testTimestampParsingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testFileSystemExceptions",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testNoLongerPrimaryShardException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRecoveryEngineException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIllegalShardRoutingStateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRecoverFilesRecoveryException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexTemplateAlreadyExistsException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testThatIdsAreUnique",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testFailedNodeException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testQueryShardException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testInvalidIndexTemplateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testThatIdsArePositive",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testClusterBlockException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testBatchOperationException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testNotSerializableExceptionWrapper",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testElasticsearchRemoteException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIds(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIds(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIds",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexTemplateMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testActionTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIllegalIndexShardStateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testWithRestHeadersException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testActionNotFoundTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testParsingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testInterruptedException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testAliasesMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRoutingMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testCircuitBreakingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchPhaseExecutionException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchContextMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testConnectTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testAlreadyExpiredException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRepositoryException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexFailedEngineException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testElasticsearchSecurityException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSnapshotException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchParseException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testExceptionRegistration",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195766739
 }
]

[
 "TEST_STARTED",
 "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766765,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766773,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766778,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766819,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766837,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766853,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766866,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766878,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766883,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766886,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766890,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766895,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766900,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766903,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766908,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766913,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766920,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766938,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIds(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIds(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766941,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766946,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766959,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766964,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766973,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766983,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766986,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195766993,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767009,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767013,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767019,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767025,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767033,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767038,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767044,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767050,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767058,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767069,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767074,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767080,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1474195767084,
  "executionTime": 8642
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ExceptionSerializationTests",
  "startTimestamp": 1474195766739,
  "executionTime": 8991
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.DynamicTemplateTests",
   "displayName": "org.elasticsearch.index.mapper.DynamicTemplateTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
   "children": [
    {
     "id": "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testParseUnknownMatchType",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testMatchAllTemplate",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testParseUnknownParam",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testMatchTypeTemplate",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195775735
 }
]

[
 "TEST_STARTED",
 "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:35,755][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] Ignoring unrecognized match_mapping_type: [short]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1474195775753,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1474195775756,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1474195775758,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1474195775759,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1474195775762,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.DynamicTemplateTests",
  "startTimestamp": 1474195775735,
  "executionTime": 30
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "displayName": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "children": [
    {
     "id": "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "displayName": "testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "methodName": "testIsTimeout",
     "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
     "children": []
    },
    {
     "id": "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "displayName": "testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "methodName": "testClusterHealth",
     "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195775770
 }
]

[
 "TEST_STARTED",
 "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
  "startTimestamp": 1474195775793,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
  "startTimestamp": 1474195775795,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
  "startTimestamp": 1474195775770,
  "executionTime": 29
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "displayName": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "children": [
    {
     "id": "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "displayName": "testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "methodName": "testGeoGetLatLon",
     "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
     "children": []
    },
    {
     "id": "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "displayName": "testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "methodName": "testGeoDistance",
     "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195775803
 }
]

[
 "TEST_STARTED",
 "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
  "startTimestamp": 1474195775818,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
  "startTimestamp": 1474195775820,
  "executionTime": 103
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.ScriptDocValuesTests",
  "startTimestamp": 1474195775803,
  "executionTime": 122
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
   "displayName": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
   "children": [
    {
     "id": "ID#testBigInteger(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testBigInteger(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testBigInteger",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testMissingEndObject(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testMissingEndObject",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawField(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testRawField(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testRawField",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testBasics(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testMissingEndArray(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testMissingEndArray",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawValue(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "displayName": "testRawValue(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
     "methodName": "testRawValue",
     "className": "org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195775929
 }
]

[
 "TEST_STARTED",
 "ID#testBigInteger(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBigInteger(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775944,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndObject(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775946,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRawField(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawField(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775948,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775952,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndArray(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775954,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRawValue(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawValue(org.elasticsearch.common.xcontent.yaml.YamlXContentTests)",
  "startTimestamp": 1474195775956,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.yaml.YamlXContentTests",
  "startTimestamp": 1474195775929,
  "executionTime": 32
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.MinTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.MinTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.MinTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.MinTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.MinTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.MinTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.MinTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195775966
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:49:35,987][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{DmdVUbBQRVWbPlvDtlwBqQ}{local}{local[364]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.MinTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.MinTests)",
  "startTimestamp": 1474195776000,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.MinTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.MinTests)",
  "startTimestamp": 1474195776004,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.MinTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.MinTests)",
  "startTimestamp": 1474195776006,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.MinTests",
  "startTimestamp": 1474195775966,
  "executionTime": 50
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.IngestMetadataTests",
   "displayName": "org.elasticsearch.ingest.IngestMetadataTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.IngestMetadataTests",
   "children": [
    {
     "id": "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
     "displayName": "testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.ingest.IngestMetadataTests",
     "children": []
    },
    {
     "id": "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
     "displayName": "testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
     "methodName": "testDiff",
     "className": "org.elasticsearch.ingest.IngestMetadataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776021
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
  "startTimestamp": 1474195776035,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
  "startTimestamp": 1474195776047,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.IngestMetadataTests",
  "startTimestamp": 1474195776021,
  "executionTime": 30
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.joda.DateMathParserTests",
   "displayName": "org.elasticsearch.common.joda.DateMathParserTests",
   "methodName": null,
   "className": "org.elasticsearch.common.joda.DateMathParserTests",
   "children": [
    {
     "id": "ID#testOnlyCallsNowIfNecessary(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testOnlyCallsNowIfNecessary(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testOnlyCallsNowIfNecessary",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testRounding(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testRounding(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testRounding",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testBasicMath(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testBasicMath(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testBasicMath",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testMultipleAdjustments(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testMultipleAdjustments(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testMultipleAdjustments",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testTimestamps(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testTimestamps(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testTimestamps",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testLenientEmptyMath(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testLenientEmptyMath(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testLenientEmptyMath",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testTimezone(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testTimezone(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testTimezone",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testIllegalMathFormat(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testIllegalMathFormat(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testIllegalMathFormat",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testBasicDates(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testBasicDates(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testBasicDates",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testRoundingDoesNotAffectExactDate(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testRoundingDoesNotAffectExactDate(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testRoundingDoesNotAffectExactDate",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testNow(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testNow(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testNow",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testIllegalDateFormat(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testIllegalDateFormat(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testIllegalDateFormat",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    },
    {
     "id": "ID#testThatUnixTimestampMayNotHaveTimeZone(org.elasticsearch.common.joda.DateMathParserTests)",
     "displayName": "testThatUnixTimestampMayNotHaveTimeZone(org.elasticsearch.common.joda.DateMathParserTests)",
     "methodName": "testThatUnixTimestampMayNotHaveTimeZone",
     "className": "org.elasticsearch.common.joda.DateMathParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776058
 }
]

[
 "TEST_STARTED",
 "ID#testOnlyCallsNowIfNecessary(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnlyCallsNowIfNecessary(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776095,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRounding(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRounding(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776097,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBasicMath(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicMath(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776102,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleAdjustments(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleAdjustments(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776105,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testTimestamps(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimestamps(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776108,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testLenientEmptyMath(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLenientEmptyMath(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776111,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTimezone(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimezone(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776113,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalMathFormat(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalMathFormat(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776115,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBasicDates(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicDates(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776118,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRoundingDoesNotAffectExactDate(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoundingDoesNotAffectExactDate(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776121,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNow(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNow(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776126,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalDateFormat(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalDateFormat(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776128,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThatUnixTimestampMayNotHaveTimeZone(org.elasticsearch.common.joda.DateMathParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatUnixTimestampMayNotHaveTimeZone(org.elasticsearch.common.joda.DateMathParserTests)",
  "startTimestamp": 1474195776130,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.joda.DateMathParserTests",
  "startTimestamp": 1474195776058,
  "executionTime": 75
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.AllocationIdTests",
   "displayName": "org.elasticsearch.cluster.routing.AllocationIdTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
   "children": [
    {
     "id": "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testSuccessfulRelocation",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testReinitializing",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testCancelRelocation",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testMoveToUnassigned",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testShardToStarted",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776139
 }
]

[
 "TEST_STARTED",
 "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,149][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,151][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- relocate the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,151][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- finalize the relocation%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776148,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,153][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,153][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- reinitializing shard%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776152,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776154,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,158][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,158][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- relocate the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,158][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- cancel relocation%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776157,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,160][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,160][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- move to unassigned%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776159,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,162][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- create unassigned shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,162][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- initialize the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T16:49:36,162][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- start the shard%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1474195776161,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.AllocationIdTests",
  "startTimestamp": 1474195776139,
  "executionTime": 25
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.apache.lucene.util.SloppyMathTests",
   "displayName": "org.apache.lucene.util.SloppyMathTests",
   "methodName": null,
   "className": "org.apache.lucene.util.SloppyMathTests",
   "children": [
    {
     "id": "ID#testSloppyMath(org.apache.lucene.util.SloppyMathTests)",
     "displayName": "testSloppyMath(org.apache.lucene.util.SloppyMathTests)",
     "methodName": "testSloppyMath",
     "className": "org.apache.lucene.util.SloppyMathTests",
     "children": []
    },
    {
     "id": "ID#testAccuracy(org.apache.lucene.util.SloppyMathTests)",
     "displayName": "testAccuracy(org.apache.lucene.util.SloppyMathTests)",
     "methodName": "testAccuracy",
     "className": "org.apache.lucene.util.SloppyMathTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776170
 }
]

[
 "TEST_STARTED",
 "ID#testSloppyMath(org.apache.lucene.util.SloppyMathTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:49:36,258][INFO ][org.elasticsearch.org.apache.lucene.util.SloppyMathTests] testing SloppyMath with m at \"-86.09421140086967, -89.04435781997643\"%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:49:36,277][INFO ][org.elasticsearch.org.apache.lucene.util.SloppyMathTests] testing SloppyMath with km at \"37.65320048013029, 118.39448367577852\"%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:49:36,284][INFO ][org.elasticsearch.org.apache.lucene.util.SloppyMathTests] testing SloppyMath with in at \"-29.81383995129492, -176.99181429045254\"%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T07:49:36,286][INFO ][org.elasticsearch.org.apache.lucene.util.SloppyMathTests] testing SloppyMath with mi at \"29.36820577460299, -53.91742767125639\"%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSloppyMath(org.apache.lucene.util.SloppyMathTests)",
  "startTimestamp": 1474195776256,
  "executionTime": 33
 }
]

[
 "TEST_STARTED",
 "ID#testAccuracy(org.apache.lucene.util.SloppyMathTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAccuracy(org.apache.lucene.util.SloppyMathTests)",
  "startTimestamp": 1474195776289,
  "executionTime": 354
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.apache.lucene.util.SloppyMathTests",
  "startTimestamp": 1474195776170,
  "executionTime": 475
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "displayName": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "children": [
    {
     "id": "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testBigInteger",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testMissingEndObject",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testRawField",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testMissingEndArray",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testRawValue",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776650
 }
]

[
 "TEST_STARTED",
 "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776673,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776675,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776677,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776680,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776683,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1474195776685,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.smile.SmileXContentTests",
  "startTimestamp": 1474195776650,
  "executionTime": 43
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "displayName": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "methodName": null,
   "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "children": [
    {
     "id": "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testSortValues",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testNumericTermDocsFreqs",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testOrdering",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testBoost",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testNRTSearchOnClosedWriter",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testSimpleNumericOps",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776698
 }
]

[
 "TEST_STARTED",
 "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776726,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776758,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776790,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776798,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776867,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1474195776872,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.deps.lucene.SimpleLuceneTests",
  "startTimestamp": 1474195776698,
  "executionTime": 184
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.IndexShardTests",
   "displayName": "org.elasticsearch.index.shard.IndexShardTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.IndexShardTests",
   "children": [
    {
     "id": "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testOperationLocksOnReplicaShards",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDelayedOperationsBeforeAndAfterRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testFailIfIndexNotPresentInRecoverFromStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testTranslogRecoverySyncsTranslog",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testStressRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardStats",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testLockTryingToDelete",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDeleteIndexPreventsNewOperations",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testStressMaybeFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRestoreShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMaybeFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardHasMemoryBufferOnTranslogRecover",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearcherWrapperWorksWithGlobaOrdinals",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingOperationsListeners",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromLocalShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDurableFlagHasEffect",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverIntoLeftover",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testPersistenceStateMetadataPersistence",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testExpectedShardSizeIsPresent",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testUpdatePriority",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardStateMetaHashCodeEquals",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testAsyncFsync",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromCleanStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testWriteShardState",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexDirIsDeletedWhenShardRemoved",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testOperationLocksOnPrimaryShards",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingOperationListnenersIsInvokedOnRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoveryFailsAfterMovingToRelocatedState",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearchIsReleaseIfWrapperFails",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSnapshotStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingBufferDuringInternalRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testFailShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexCanChangeCustomDataPath",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingBufferDuringPeerRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMinimumCompatVersion",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testAcquireIndexCommit",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testLockingBeforeAndAfterRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearcherWrapperIsUsed",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMarkAsInactiveTriggersSyncedFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195776892
 }
]

[
 "TEST_STARTED",
 "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,918][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,940][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,940][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,944][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,946][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:36,946][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,055][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,055][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,055][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[23]}, bound_addresses {local[23]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,057][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{FqVF_Z2AQyuTwiF04G_e_A}{E-SsE3yaT5Kgh48wJUuGYQ}{local}{local[23]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,058][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,075][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,098][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,176][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,196][WARN ][org.elasticsearch.index.shard] [node_s_0] [test][0] suspect illegal state: trying to move shard from primary mode to replica mode%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,218][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] updated shard routing to [test][0], node[FqVF_Z2AQyuTwiF04G_e_A], relocating [otherNode], [R], s[RELOCATING], a[id=JgK2RVGjSrqFrluykIaPjg, rId=ZuhrB924RS6h35aU615V0Q]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,219][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testOperationLocksOnReplicaShards]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195776910,
  "executionTime": 349
 }
]

[
 "TEST_STARTED",
 "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,266][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,362][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,384][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDelayedOperationsBeforeAndAfterRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195777260,
  "executionTime": 157
 }
]

[
 "TEST_STARTED",
 "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,423][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,493][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,562][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/qOLC8DFgTy69QzoEhGty1A] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:37,942][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testFailIfIndexNotPresentInRecoverFromStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195777417,
  "executionTime": 573
 }
]

[
 "TEST_STARTED",
 "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:38,006][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [testindexfortranslogsync] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:38,593][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[testindexfortranslogsync][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:38,609][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [testindexfortranslogsync/kXGTh7p5RdunjodG-nNUBQ] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:38,847][INFO ][org.elasticsearch.index.shard] [node_s_0] [testindexfortranslogsync][0] [IndexShardTests#testTranslogRecoverySyncsTranslog]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195777990,
  "executionTime": 1674
 }
]

[
 "TEST_STARTED",
 "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:39,673][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:39,832][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:39,865][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testStressRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195779664,
  "executionTime": 233
 }
]

[
 "TEST_STARTED",
 "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:39,908][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,018][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,036][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardStats]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
  "message": "Some path weirdness on windows",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: Some path weirdness on windows\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:69B102A50E7B6D68]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeFalse(RandomizedTest.java:635)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeFalse(LuceneTestCase.java:849)\r\n\tat org.elasticsearch.index.shard.IndexShardTests.testShardStats(IndexShardTests.java:803)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: Some path weirdness on windows",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195779897,
  "executionTime": 166
 }
]

[
 "TEST_STARTED",
 "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,070][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,125][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,144][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> paths: [[C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\aWKWREQrTiqUAQ8eKSa7uQ\\0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,152][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testLockTryingToDelete]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195780064,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,187][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,258][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,314][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDeleteIndexPreventsNewOperations]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195780180,
  "executionTime": 138
 }
]

[
 "TEST_STARTED",
 "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,325][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,380][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,403][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,404][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:40,419][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/HtauqzaTRcCXY6k_iSyXsQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,634][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testStressMaybeFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195780318,
  "executionTime": 5393
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,718][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,773][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,788][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_target] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,861][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_target][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,874][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Ji_hDrw8SOOapLE9YVXpHg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:45,977][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_target/R-EdxcbISGmiv3sOvsmyJg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,213][INFO ][org.elasticsearch.index.shard] [node_s_0] [test_target][0] [IndexShardTests#testRestoreShard]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195785712,
  "executionTime": 547
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,266][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,308][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,322][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/hr06M8hfS7Gtr6WwFQCzpg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,512][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverFromStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195786260,
  "executionTime": 277
 }
]

[
 "TEST_STARTED",
 "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,544][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,590][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,606][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,606][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,619][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/lpNa3KLqSOyxuCrXxFpIQA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,760][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> current translog size: [43] num_ops [0] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6999fb6d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,766][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [133b] to [43b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,766][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [133b] to [43b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,793][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size after delete: [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@7b29df41]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,793][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@c5181b4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,795][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@5b703fcc]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,798][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6e962034]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,802][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6e8b95df]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,811][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6e57e59b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,827][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [43] num_ops [0] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@348329c2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,827][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMaybeFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195786537,
  "executionTime": 319
 }
]

[
 "TEST_STARTED",
 "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,863][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,910][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:46,924][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/qL8DObKqTsmvrhjhWIhEzA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,280][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardHasMemoryBufferOnTranslogRecover]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195786856,
  "executionTime": 442
 }
]

[
 "TEST_STARTED",
 "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,303][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,340][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,350][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/8-Jah2jwSAWu94fP6bQLRQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,454][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/8-Jah2jwSAWu94fP6bQLRQ] update_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,654][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearcherWrapperWorksWithGlobaOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195787299,
  "executionTime": 374
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,678][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_iol] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,720][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_iol][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:47,730][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_iol/KO_Z25tqR6qLr23YOeKFXg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,055][INFO ][org.elasticsearch.index.shard] [node_s_0] [test_iol][0] [IndexShardTests#testIndexingOperationsListeners]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195787673,
  "executionTime": 403
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,083][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,127][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,144][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,195][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,214][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,266][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index_2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,278][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/ydeSNhNlRaykB_zQtu-UMw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,580][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_1/7zuxehX7Tsawujez0aUNvw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,770][INFO ][org.elasticsearch.index.shard] [node_s_0] [index_1][0] [IndexShardTests#testRecoverFromLocalShard]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,793][WARN ][org.elasticsearch.indices] [index/ydeSNhNlRaykB_zQtu-UMw] failed to delete index%0D%0Ajava.io.IOException: Could not remove the following files (in the order of attempts):%0A   C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index\\_0.cfs: java.nio.file.AccessDeniedException: C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index\\_0.cfs%0A   C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index\\_1.cfs: java.nio.file.AccessDeniedException: C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index\\_1.cfs%0A   C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index: java.nio.file.DirectoryNotEmptyException: C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0\\index%0A   C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0: java.nio.file.DirectoryNotEmptyException: C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw\\0%0A   C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw: java.nio.file.DirectoryNotEmptyException: C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\tempDir-001\\data\\nodes\\0\\indices\\ydeSNhNlRaykB_zQtu-UMw%0A%0A%09at org.apache.lucene.util.IOUtils.rm(IOUtils.java:323) ~[lucene-core-6.2.0.jar:6.2.0 764d0f19151dbff6f5fcd9fc4b2682cf934590c5 - mike - 2016-08-20 05:39:36]%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectoryUnderLock(NodeEnvironment.java:545) ~[main/:?]%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectorySafe(NodeEnvironment.java:529) ~[main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStoreIfDeletionAllowed(IndicesService.java:638) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStore(IndicesService.java:625) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:513) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:568) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndices(IndicesClusterStateService.java:249) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:183) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:708) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_102]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_102]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_102]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,804][WARN ][org.elasticsearch.indices] [node_s_0] [index/ydeSNhNlRaykB_zQtu-UMw] still pending deletes present for shards [[[index/ydeSNhNlRaykB_zQtu-UMw]]] - retrying%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195788077,
  "executionTime": 761
 }
]

[
 "TEST_STARTED",
 "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,845][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,894][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,908][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/VYsyGlwuSUegmogcstZv2g] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,945][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,946][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,960][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,961][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,979][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,980][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,996][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:48,996][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,019][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,019][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,035][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,036][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,047][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDurableFlagHasEffect]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195788839,
  "executionTime": 254
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,101][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,146][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,161][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/_skVKSMTSdGX0qlWzF7WOA] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,294][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[test/_skVKSMTSdGX0qlWzF7WOA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,330][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,380][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,390][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverIntoLeftover]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195789093,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,424][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,485][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,514][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testPersistenceStateMetadataPersistence]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195789417,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,546][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,596][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,607][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/UPNKt4f_SaWmvtS9gNP9Xg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,886][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testExpectedShardSizeIsPresent]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195789540,
  "executionTime": 390
 }
]

[
 "TEST_STARTED",
 "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,938][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:49,988][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,020][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testUpdatePriority]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195789930,
  "executionTime": 173
 }
]

[
 "TEST_STARTED",
 "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,107][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardStateMetaHashCodeEquals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195790103,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,114][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,156][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,170][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/KL2QkRaZQc66D3U48F_DDg] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,292][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testAsyncFsync]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195790108,
  "executionTime": 233
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,361][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,430][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,447][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/tRQouPDJT0qFgN-R858H-g] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,681][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverFromCleanStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195790341,
  "executionTime": 366
 }
]

[
 "TEST_STARTED",
 "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,751][INFO ][org.elasticsearch.env    ] [ocuGEIH] using [2] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,751][INFO ][org.elasticsearch.env    ] [ocuGEIH] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,821][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testWriteShardState]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195790707,
  "executionTime": 115
 }
]

[
 "TEST_STARTED",
 "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,827][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> idxPath: [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\oxejvlxolY]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,830][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,881][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:50,895][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/lF9JFEudQQybOU9dZ78x8g] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,101][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> checking that [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\oxejvlxolY] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,102][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> found file: [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\oxejvlxolY\\0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,102][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> checking that [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\oxejvlxolY\\0] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,103][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testIndexDirIsDeletedWhenShardRemoved]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195790823,
  "executionTime": 280
 }
]

[
 "TEST_STARTED",
 "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,110][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,154][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,175][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testOperationLocksOnPrimaryShards]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195791104,
  "executionTime": 103
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,215][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,272][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,287][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/f3hX2cSoSPekbs3ICSWnpg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,559][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testIndexingOperationListnenersIsInvokedOnRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195791208,
  "executionTime": 377
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,592][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,637][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,659][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoveryFailsAfterMovingToRelocatedState]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195791585,
  "executionTime": 99
 }
]

[
 "TEST_STARTED",
 "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,691][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,733][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,746][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/wsReO1cKTZe9Rh3D5Icqog] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,901][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearchIsReleaseIfWrapperFails]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195791685,
  "executionTime": 241
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,933][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,970][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:51,981][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/OaCIPyy0QRyZvjXoVUWRww] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,224][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSnapshotStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195791927,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,258][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,327][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,340][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/2bdCOXdTQfaO04XLRsJmwA] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,401][INFO ][org.elasticsearch.index.shard] [node_s_0] [index][0] [IndexShardTests#testIndexingBufferDuringInternalRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195792252,
  "executionTime": 174
 }
]

[
 "TEST_STARTED",
 "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,432][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,508][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,543][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,543][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testFailShard]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195792426,
  "executionTime": 175
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,605][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> start dir: [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\start-wdrRZqpgKj]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,605][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] -->   end dir: [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\end-WToBOByWNg]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,606][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> creating an index with data_path [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\start-wdrRZqpgKj]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,610][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [idx] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,700][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,723][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [idx/uP6IfkLETAeess9ef_CYwA] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,865][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> closing the index [idx]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,865][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[idx/uP6IfkLETAeess9ef_CYwA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,913][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index closed, re-opening...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,914][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[idx/uP6IfkLETAeess9ef_CYwA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:52,936][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index re-opened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,016][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,027][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> closing the index [idx]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,028][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[idx/uP6IfkLETAeess9ef_CYwA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,052][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> moving data on disk [start-wdrRZqpgKj] to [end-WToBOByWNg]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,054][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> updating settings...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,070][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> settings updated and files moved, re-opening index%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,070][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[idx/uP6IfkLETAeess9ef_CYwA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,094][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index re-opened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,162][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,208][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\start-wdrRZqpgKj] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,208][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\end-WToBOByWNg] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,209][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> found file: [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\end-WToBOByWNg\\0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,209][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\Users\\kmala\\workspace\\Team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_FD13852EF36FC81C-001\\QIgNlCjsUo\\end-WToBOByWNg\\0] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,210][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] [IndexShardTests#testIndexCanChangeCustomDataPath]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195792601,
  "executionTime": 610
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,223][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,285][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,299][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/rfHm6KYzT-C4iNmctWZmFg] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,385][INFO ][org.elasticsearch.index.shard] [node_s_0] [index][0] [IndexShardTests#testIndexingBufferDuringPeerRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195793211,
  "executionTime": 215
 }
]

[
 "TEST_STARTED",
 "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,433][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,496][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,520][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/j-Dm8EUBRY2LJzAAyeGC4Q] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,681][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMinimumCompatVersion]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195793427,
  "executionTime": 285
 }
]

[
 "TEST_STARTED",
 "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,719][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,762][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:53,775][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/9-xpOPlXRyaqEvJ_9JNH1g] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,058][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testAcquireIndexCommit]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195793712,
  "executionTime": 371
 }
]

[
 "TEST_STARTED",
 "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,091][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,131][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,143][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testLockingBeforeAndAfterRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195794084,
  "executionTime": 81
 }
]

[
 "TEST_STARTED",
 "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,173][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,221][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,236][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/R2LcryNmS1aLxYgaSUmmpg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,352][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/R2LcryNmS1aLxYgaSUmmpg] update_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,520][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearcherWrapperIsUsed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195794166,
  "executionTime": 378
 }
]

[
 "TEST_STARTED",
 "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,550][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,589][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,600][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/MHMqXmtoTnyYqP81P1YpjQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,754][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMarkAsInactiveTriggersSyncedFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1474195794544,
  "executionTime": 238
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,782][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,782][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,783][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T13:49:54,784][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.IndexShardTests",
  "startTimestamp": 1474195776892,
  "executionTime": 17945
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.MetaStateServiceTests",
   "displayName": "org.elasticsearch.gateway.MetaStateServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.gateway.MetaStateServiceTests",
   "children": [
    {
     "id": "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteGlobalStateWithIndexAndNoIndexIsLoaded",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteLoadIndex",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testLoadGlobal",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteLoadGlobal",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testLoadMissingIndex",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195794842
 }
]

[
 "TEST_STARTED",
 "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:54,897][INFO ][org.elasticsearch.env    ] [pWLsaML] using [2] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:54,898][INFO ][org.elasticsearch.env    ] [pWLsaML] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1474195794860,
  "executionTime": 63
 }
]

[
 "TEST_STARTED",
 "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:54,946][INFO ][org.elasticsearch.env    ] [fNbIOqO] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:54,947][INFO ][org.elasticsearch.env    ] [fNbIOqO] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1474195794923,
  "executionTime": 49
 }
]

[
 "TEST_STARTED",
 "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,028][INFO ][org.elasticsearch.env    ] [0Zgtu-W] using [3] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,028][INFO ][org.elasticsearch.env    ] [0Zgtu-W] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1474195794972,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,133][INFO ][org.elasticsearch.env    ] [yNnhIF_] using [2] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,133][INFO ][org.elasticsearch.env    ] [yNnhIF_] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1474195795095,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,207][INFO ][org.elasticsearch.env    ] [R4ZrHdE] using [3] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:55,207][INFO ][org.elasticsearch.env    ] [R4ZrHdE] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1474195795151,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.MetaStateServiceTests",
  "startTimestamp": 1474195794842,
  "executionTime": 423
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "displayName": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "children": [
    {
     "id": "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "displayName": "testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "methodName": "testTwoDocuments",
     "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "displayName": "testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795269
 }
]

[
 "TEST_STARTED",
 "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
  "startTimestamp": 1474195795282,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
  "startTimestamp": 1474195795290,
  "executionTime": 108
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.uid.VersionLookupTests",
  "startTimestamp": 1474195795269,
  "executionTime": 139
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.CompoundProcessorTests",
   "displayName": "org.elasticsearch.ingest.CompoundProcessorTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.CompoundProcessorTests",
   "children": [
    {
     "id": "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFailInOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testIgnoreFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFailWithoutOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithOnFailureProcessor",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithException",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFail",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testBreakOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithNestedFailures",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessor",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795414
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795432,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795435,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795438,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795440,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795443,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795445,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795447,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795450,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795456,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1474195795459,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.CompoundProcessorTests",
  "startTimestamp": 1474195795414,
  "executionTime": 49
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "displayName": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "methodName": null,
   "className": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "children": [
    {
     "id": "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
     "displayName": "testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
     "methodName": "testSimple",
     "className": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795470
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
  "startTimestamp": 1474195795483,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
  "startTimestamp": 1474195795470,
  "executionTime": 15
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.PublishPortTests",
   "displayName": "org.elasticsearch.transport.PublishPortTests",
   "methodName": null,
   "className": "org.elasticsearch.transport.PublishPortTests",
   "children": [
    {
     "id": "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)",
     "displayName": "testPublishPort(org.elasticsearch.transport.PublishPortTests)",
     "methodName": "testPublishPort",
     "className": "org.elasticsearch.transport.PublishPortTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795490
 }
]

[
 "TEST_STARTED",
 "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)",
  "startTimestamp": 1474195795502,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.PublishPortTests",
  "startTimestamp": 1474195795490,
  "executionTime": 16
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.io.stream.BytesStreamsTests",
   "displayName": "org.elasticsearch.common.io.stream.BytesStreamsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
   "children": [
    {
     "id": "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteStreamableList",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testReadWriteGeoPoint",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testIllegalBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleByte",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testOneFullOneShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSimpleStreams",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteable",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testAccessAfterClose",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapWithConsistentOrder",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWriteWithOffsetCrossover",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleShortPageBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapOfLists",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSeek",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteableReaderReturnsWrongName",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableNotSupportedWithoutWrapping",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testOptionalWriteableReaderReturnsNull",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testTwoFullOneShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableReaderReturnsNull",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSkip",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testReadMapByUsingWriteMapWithConsistentOrder",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWriteWithOffset",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableList",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795526
 }
]

[
 "TEST_STARTED",
 "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795544,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795546,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795548,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795550,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795564,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795566,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795568,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795569,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795580,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795592,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795594,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795601,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:140)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:766)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795597,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795602,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795608,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795626,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795628,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795630,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795632,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795636,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795638,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795640,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795657,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795660,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795662,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795665,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795667,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1474195795675,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.io.stream.BytesStreamsTests",
  "startTimestamp": 1474195795526,
  "executionTime": 152
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.query.QueryPhaseTests",
   "displayName": "org.elasticsearch.search.query.QueryPhaseTests",
   "methodName": null,
   "className": "org.elasticsearch.search.query.QueryPhaseTests",
   "children": [
    {
     "id": "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testCountWithoutDeletions",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testPostFilterDisablesCountOptimization",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testMinScoreDisablesCountOptimization",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testCountWithDeletions",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795683
 }
]

[
 "TEST_STARTED",
 "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1474195795699,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1474195795730,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1474195795732,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1474195795734,
  "executionTime": 23
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.query.QueryPhaseTests",
  "startTimestamp": 1474195795683,
  "executionTime": 76
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "children": [
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195795765
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,801][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{P43V5NzZRUqLEZhcHut1mA}{local}{local[380]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,809][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,809][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,835][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,835][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,835][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,837][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,837][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,837][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,841][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,841][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,841][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,845][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,846][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,846][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,847][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,849][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,849][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,849][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,851][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,851][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,851][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,853][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,853][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,853][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,859][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,859][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,859][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,861][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,861][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,862][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,867][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,867][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,867][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,876][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,889][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,889][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,891][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,891][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,891][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,894][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,894][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,895][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T17:49:55,900][WARN ][org.elasticsearch.deprecation.index.mapper]  [nFDY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795792,
  "executionTime": 110
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795902,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795930,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795938,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795941,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795944,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795952,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795956,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795973,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1474195795996,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
  "startTimestamp": 1474195795765,
  "executionTime": 239
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.bulk.BulkShardRequestTests",
   "displayName": "org.elasticsearch.action.bulk.BulkShardRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.bulk.BulkShardRequestTests",
   "children": [
    {
     "id": "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
     "displayName": "testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
     "methodName": "testToString",
     "className": "org.elasticsearch.action.bulk.BulkShardRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195796008
 }
]

[
 "TEST_STARTED",
 "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
  "startTimestamp": 1474195796081,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.bulk.BulkShardRequestTests",
  "startTimestamp": 1474195796008,
  "executionTime": 77
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.UpdateMappingTests",
   "displayName": "org.elasticsearch.index.mapper.UpdateMappingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
   "children": [
    {
     "id": "ID#testReuseMetaField(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testReuseMetaField(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testReuseMetaField",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testAllDisabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testAllDisabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testAllDisabledAfterDisabled",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testConflictNewType(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testConflictNewType(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testConflictNewType",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testConflictSameType(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testConflictSameType(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testConflictSameType",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testRejectFieldDefinedTwice(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testRejectFieldDefinedTwice(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testRejectFieldDefinedTwice",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testReuseMetaFieldBackCompat(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testReuseMetaFieldBackCompat(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testReuseMetaFieldBackCompat",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testAllEnabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testAllEnabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testAllEnabledAfterDisabled",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testAllEnabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testAllEnabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testAllEnabledAfterEnabled",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testAllDisabledAfterDefaultEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testAllDisabledAfterDefaultEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testAllDisabledAfterDefaultEnabled",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testConflictNewTypeUpdate(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testConflictNewTypeUpdate(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testConflictNewTypeUpdate",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    },
    {
     "id": "ID#testAllDisabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "displayName": "testAllDisabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
     "methodName": "testAllDisabledAfterEnabled",
     "className": "org.elasticsearch.index.mapper.UpdateMappingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195796091
 }
]

[
 "TEST_STARTED",
 "ID#testReuseMetaField(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,181][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,223][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,223][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,226][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,229][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,229][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,328][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,328][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,329][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[24]}, bound_addresses {local[24]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,330][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{WHNesjhZShunpDBqDWXY2g}{T1dymMQyR1aPdUMIf86AlQ}{local}{local[24]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,331][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,350][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,373][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,442][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,454][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testReuseMetaField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuseMetaField(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195796171,
  "executionTime": 313
 }
]

[
 "TEST_STARTED",
 "ID#testAllDisabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,493][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,555][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,570][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testAllDisabledAfterDisabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllDisabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195796484,
  "executionTime": 129
 }
]

[
 "TEST_STARTED",
 "ID#testConflictNewType(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,621][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,679][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,692][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testConflictNewType]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConflictNewType(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195796613,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testConflictSameType(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,729][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,774][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,810][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testConflictSameType]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConflictSameType(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195796722,
  "executionTime": 115
 }
]

[
 "TEST_STARTED",
 "ID#testRejectFieldDefinedTwice(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,843][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,890][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,907][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,950][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:56,964][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [UpdateMappingTests#testRejectFieldDefinedTwice]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectFieldDefinedTwice(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195796837,
  "executionTime": 166
 }
]

[
 "TEST_STARTED",
 "ID#testReuseMetaFieldBackCompat(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,009][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,050][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,062][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testReuseMetaFieldBackCompat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuseMetaFieldBackCompat(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797003,
  "executionTime": 83
 }
]

[
 "TEST_STARTED",
 "ID#testAllEnabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,094][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,144][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,155][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testAllEnabledAfterDisabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllEnabledAfterDisabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797086,
  "executionTime": 102
 }
]

[
 "TEST_STARTED",
 "ID#testAllEnabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,195][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,251][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,264][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testAllEnabledAfterEnabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllEnabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797188,
  "executionTime": 104
 }
]

[
 "TEST_STARTED",
 "ID#testAllDisabledAfterDefaultEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,299][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,358][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,372][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testAllDisabledAfterDefaultEnabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllDisabledAfterDefaultEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797292,
  "executionTime": 110
 }
]

[
 "TEST_STARTED",
 "ID#testConflictNewTypeUpdate(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,407][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,457][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,471][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testConflictNewTypeUpdate]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConflictNewTypeUpdate(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797402,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testAllDisabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,507][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,548][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,560][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [UpdateMappingTests#testAllDisabledAfterEnabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllDisabledAfterEnabled(org.elasticsearch.index.mapper.UpdateMappingTests)",
  "startTimestamp": 1474195797500,
  "executionTime": 83
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,583][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,584][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,584][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:57,585][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.UpdateMappingTests",
  "startTimestamp": 1474195796091,
  "executionTime": 1504
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195797600
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:57,673][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{0qiUaKVjSkKfzoikG6VKVw}{local}{local[381]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1474195797682,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1474195797684,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:57,688][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"min_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:19:57,688][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"min_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1474195797686,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
  "startTimestamp": 1474195797600,
  "executionTime": 92
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.IndexServiceTests",
   "displayName": "org.elasticsearch.index.IndexServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.index.IndexServiceTests",
   "children": [
    {
     "id": "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRescheduleAsyncFsync",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testBaseAsyncTask",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testIllegalFsyncInterval",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testAsyncFsyncActuallyWorks",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRefreshActuallyWorks",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRefreshTaskIsUpdated",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testUnknownAliasFilter",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testDetermineShadowEngineShouldBeUsed",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testAliasFilters",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRemovedAliasFilter",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testFsyncTaskIsRunning",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testFilteringAliases",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195797696
 }
]

[
 "TEST_STARTED",
 "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,721][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,762][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,762][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,766][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,768][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,768][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,870][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,871][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,871][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[25]}, bound_addresses {local[25]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,874][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{pWzAYrlOSkeeglI17HBTsw}{JBsQBFfUT1OtRt0_4rgFQw}{local}{local[25]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,874][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,889][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,905][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,963][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,992][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,996][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/MmyuCpTqTW2EEgsqRkZ_MA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:57,997][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,014][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,014][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRescheduleAsyncFsync]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195797713,
  "executionTime": 334
 }
]

[
 "TEST_STARTED",
 "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,054][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,104][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,124][WARN ][org.elasticsearch.index  ] failed to run task org.elasticsearch.index.IndexServiceTests$1@26dd8992 - suppressing re-occurring exceptions unless the exception changes%0D%0Ajava.lang.RuntimeException: foo%0A%09at org.elasticsearch.index.IndexServiceTests$1.runInternal(IndexServiceTests.java:174) ~[test/:?]%0A%09at org.elasticsearch.index.IndexService$BaseAsyncTask.run(IndexService.java:785) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_102]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_102]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_102]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,146][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testBaseAsyncTask]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798048,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,167][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testIllegalFsyncInterval]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798164,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,175][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,221][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,234][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/9PTtv-jwS0iZbw9UCpnJfg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,314][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testAsyncFsyncActuallyWorks]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798168,
  "executionTime": 180
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,354][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,412][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,415][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/j1FVK_gASSKPXQDM9oCqEw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,415][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [-1] to [1s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,430][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [1ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,562][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRefreshActuallyWorks]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798348,
  "executionTime": 237
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,591][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,634][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,646][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,646][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [-1] to [100ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,647][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [100ms] to [200ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,652][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRefreshTaskIsUpdated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798585,
  "executionTime": 85
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,677][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,719][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,730][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testUnknownAliasFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798670,
  "executionTime": 100
 }
]

[
 "TEST_STARTED",
 "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,773][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testDetermineShadowEngineShouldBeUsed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798770,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,778][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,828][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,839][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testAliasFilters]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798773,
  "executionTime": 93
 }
]

[
 "TEST_STARTED",
 "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,873][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,923][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,933][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRemovedAliasFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798866,
  "executionTime": 96
 }
]

[
 "TEST_STARTED",
 "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:58,967][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,013][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,050][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,051][WARN ][org.elasticsearch.indices.cluster] [[test][0]] marking and sending shard failed due to [master marked shard as active, but shard has not been created, mark shard as failed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,051][WARN ][org.elasticsearch.cluster.action.shard] [test][0] received shard failed for shard id [[test][0]], allocation id [66L7mLyzS360s8qKq2xBTg], primary term [0], message [master marked shard as active, but shard has not been created, mark shard as failed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,084][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,154][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,164][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testFsyncTaskIsRunning]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195798962,
  "executionTime": 245
 }
]

[
 "TEST_STARTED",
 "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,213][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,257][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,270][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testFilteringAliases]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1474195799207,
  "executionTime": 91
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,298][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,299][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,299][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:49:59,300][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.IndexServiceTests",
  "startTimestamp": 1474195797696,
  "executionTime": 1615
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "children": [
    {
     "id": "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRollingRestart",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testDoNotAllocateFromPrimary",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRestoreDoesNotAllocateSnapshotOnOlderNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195799318
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1474195799335,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,348][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,351][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,353][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][4], [test][2], [test][2], [test][3], [test][0], [test][1], [test][4], [test][3], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,353][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,355][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,355][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,391][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][4], [test][2], [test][3], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,391][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,393][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,393][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,394][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,395][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,396][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][4], [test][2], [test][3], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,396][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1474195799341,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,403][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,404][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start two nodes and fully start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,404][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start all the primary shards, replicas will start initializing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,408][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][4], [test][2], [test][3], [test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1474195799396,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1474195799409,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,420][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,421][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,423][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,423][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,424][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,425][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,425][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,425][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,433][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,433][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,434][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,437][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,440][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,440][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,441][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,442][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,442][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,442][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,442][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,443][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,443][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,443][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,444][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,444][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,444][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,445][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,445][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,445][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,445][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,446][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,447][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,447][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,448][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,448][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,448][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,448][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,449][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,449][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,450][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,450][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,451][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,452][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,453][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,454][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,454][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,455][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,456][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,456][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,456][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,456][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,457][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,457][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,457][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,457][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,458][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,458][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,458][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,459][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,460][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,460][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,460][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,461][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,462][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,463][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,463][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,464][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,464][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,464][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,465][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,465][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,465][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,466][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,466][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,466][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,467][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,468][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,468][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,469][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,469][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,470][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,470][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,470][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,471][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,472][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,472][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,473][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,474][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,474][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,475][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,476][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,476][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,477][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,478][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,478][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,478][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,478][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,479][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,479][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,479][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,480][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,480][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,481][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,482][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,482][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,483][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,483][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,484][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,484][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,485][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,485][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,486][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,486][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,486][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,487][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,487][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,487][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,488][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,488][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,488][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,489][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,489][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,490][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,490][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,490][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,490][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,491][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,491][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,491][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,493][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,493][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,493][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,493][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,494][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,494][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,495][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,495][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,495][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,495][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,496][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,496][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,496][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,497][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,497][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,497][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,498][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,498][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,498][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,498][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,498][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,499][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,499][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,499][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,499][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,500][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,500][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,501][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,503][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][0], [test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,503][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,503][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,503][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,508][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_0][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T10:49:59,509][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1474195799414,
  "executionTime": 95
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
  "startTimestamp": 1474195799318,
  "executionTime": 199
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "displayName": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testBuildWordScorer",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195799523
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1474195799544,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1474195799546,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1474195799548,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1474195799551,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
  "startTimestamp": 1474195799523,
  "executionTime": 34
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterChangedEventTests",
   "displayName": "org.elasticsearch.cluster.ClusterChangedEventTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
   "children": [
    {
     "id": "ID#testIndexMetaDataChange(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testIndexMetaDataChange(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testIndexMetaDataChange",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testIndicesMetaDataChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testIndicesMetaDataChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testIndicesMetaDataChanges",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testBasicProperties(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testBasicProperties(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testBasicProperties",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testNodesAddedAndRemovedAndChanged(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testNodesAddedAndRemovedAndChanged(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testNodesAddedAndRemovedAndChanged",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testLocalNodeIsMaster(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testLocalNodeIsMaster(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testLocalNodeIsMaster",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testRoutingTableChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testRoutingTableChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testRoutingTableChanges",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    },
    {
     "id": "ID#testIndicesDeletionWithNotRecoveredState(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "displayName": "testIndicesDeletionWithNotRecoveredState(org.elasticsearch.cluster.ClusterChangedEventTests)",
     "methodName": "testIndicesDeletionWithNotRecoveredState",
     "className": "org.elasticsearch.cluster.ClusterChangedEventTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195799563
 }
]

[
 "TEST_STARTED",
 "ID#testIndexMetaDataChange(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexMetaDataChange(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799630,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesMetaDataChanges(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesMetaDataChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799633,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBasicProperties(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicProperties(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799637,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNodesAddedAndRemovedAndChanged(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodesAddedAndRemovedAndChanged(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799639,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testLocalNodeIsMaster(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocalNodeIsMaster(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799642,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRoutingTableChanges(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoutingTableChanges(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799644,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesDeletionWithNotRecoveredState(org.elasticsearch.cluster.ClusterChangedEventTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesDeletionWithNotRecoveredState(org.elasticsearch.cluster.ClusterChangedEventTests)",
  "startTimestamp": 1474195799646,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterChangedEventTests",
  "startTimestamp": 1474195799563,
  "executionTime": 87
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.GatewayMetaStateTests",
   "displayName": "org.elasticsearch.gateway.GatewayMetaStateTests",
   "methodName": null,
   "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
   "children": [
    {
     "id": "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNoMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNoWriteIfNothingChanged",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testAllUpToDateNothingWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testMultipleCustomMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testVersionChangeIsAlwaysWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testIndexMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testWriteClosedIndex",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testCustomMetaDataValidation",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testAddCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testRemoveCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNewShardsAlwaysWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testCustomMetaDataNoChange",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testUpdateCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195799657
 }
]

[
 "TEST_STARTED",
 "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799674,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799677,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799685,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799693,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799698,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799707,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799709,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799717,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799720,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799723,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799726,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799733,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1474195799735,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.GatewayMetaStateTests",
  "startTimestamp": 1474195799657,
  "executionTime": 83
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.similarity.SimilarityTests",
   "displayName": "org.elasticsearch.index.similarity.SimilarityTests",
   "methodName": null,
   "className": "org.elasticsearch.index.similarity.SimilarityTests",
   "children": [
    {
     "id": "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_DFR",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_LMJelinekMercer",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_LMDirichlet",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_IB",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testSimilarityDefaultBackCompat",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_bm25",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_DFI",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveDefaultSimilarities",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_classic",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_Unknown",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195799751
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,783][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,810][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,810][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,814][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,816][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,816][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,926][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,926][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,926][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[26]}, bound_addresses {local[26]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,928][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{IkuRSffVTCynpfBnYc0lpQ}{66ln2ehPTQaPlMiTFYBPjg}{local}{local[26]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,928][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,940][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:49:59,968][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,039][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,102][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_DFR]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195799773,
  "executionTime": 359
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,138][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,191][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,204][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_LMJelinekMercer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800132,
  "executionTime": 101
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,238][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,287][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,298][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_LMDirichlet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800233,
  "executionTime": 95
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,334][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,401][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,411][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_IB]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800328,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,444][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_v2.x] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_v2.x][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,505][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_v3.x] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,552][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_v3.x][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,562][INFO ][org.elasticsearch.index.similarity] [node_s_0] [test_v3.x] [SimilarityTests#testSimilarityDefaultBackCompat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800440,
  "executionTime": 168
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,612][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,658][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,671][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_bm25]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800608,
  "executionTime": 95
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,708][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,753][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,763][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_DFI]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800703,
  "executionTime": 87
 }
]

[
 "TEST_STARTED",
 "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,796][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,842][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,851][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveDefaultSimilarities]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800791,
  "executionTime": 97
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,893][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,941][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,952][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_classic]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800888,
  "executionTime": 91
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:00,984][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,034][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,045][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_Unknown]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1474195800979,
  "executionTime": 98
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,077][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,078][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,078][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T03:50:01,079][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.similarity.SimilarityTests",
  "startTimestamp": 1474195799751,
  "executionTime": 1344
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
   "displayName": "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
   "children": [
    {
     "id": "ID#testValidation(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
     "displayName": "testValidation(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
     "methodName": "testValidation",
     "className": "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
     "children": []
    },
    {
     "id": "ID#testBuildFromSimplifiedDef(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
     "displayName": "testBuildFromSimplifiedDef(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
     "methodName": "testBuildFromSimplifiedDef",
     "className": "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801099
 }
]

[
 "TEST_STARTED",
 "ID#testValidation(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidation(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
  "startTimestamp": 1474195801117,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBuildFromSimplifiedDef(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildFromSimplifiedDef(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests)",
  "startTimestamp": 1474195801119,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestTests",
  "startTimestamp": 1474195801099,
  "executionTime": 23
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "displayName": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "methodName": null,
   "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "children": [
    {
     "id": "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolConfiguration",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    },
    {
     "id": "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    },
    {
     "id": "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolIsBounded",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801127
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1474195801138,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1474195801148,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1474195801196,
  "executionTime": 71
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.threadpool.ScalingThreadPoolTests",
  "startTimestamp": 1474195801127,
  "executionTime": 143
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.blobstore.BlobPathTests",
   "displayName": "org.elasticsearch.common.blobstore.BlobPathTests",
   "methodName": null,
   "className": "org.elasticsearch.common.blobstore.BlobPathTests",
   "children": [
    {
     "id": "ID#testBuildAsString(org.elasticsearch.common.blobstore.BlobPathTests)",
     "displayName": "testBuildAsString(org.elasticsearch.common.blobstore.BlobPathTests)",
     "methodName": "testBuildAsString",
     "className": "org.elasticsearch.common.blobstore.BlobPathTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801274
 }
]

[
 "TEST_STARTED",
 "ID#testBuildAsString(org.elasticsearch.common.blobstore.BlobPathTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildAsString(org.elasticsearch.common.blobstore.BlobPathTests)",
  "startTimestamp": 1474195801299,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.blobstore.BlobPathTests",
  "startTimestamp": 1474195801274,
  "executionTime": 29
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801308
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:50:01,331][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{qJS71OWGTnq0VT2bq53igA}{local}{local[649]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1474195801340,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1474195801342,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:50:01,346][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"sum_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T20:50:01,346][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"sum_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1474195801344,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
  "startTimestamp": 1474195801308,
  "executionTime": 42
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.health.ClusterIndexHealthTests",
   "displayName": "org.elasticsearch.cluster.health.ClusterIndexHealthTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.health.ClusterIndexHealthTests",
   "children": [
    {
     "id": "ID#testClusterIndexHealth(org.elasticsearch.cluster.health.ClusterIndexHealthTests)",
     "displayName": "testClusterIndexHealth(org.elasticsearch.cluster.health.ClusterIndexHealthTests)",
     "methodName": "testClusterIndexHealth",
     "className": "org.elasticsearch.cluster.health.ClusterIndexHealthTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801355
 }
]

[
 "TEST_STARTED",
 "ID#testClusterIndexHealth(org.elasticsearch.cluster.health.ClusterIndexHealthTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T06:50:01,370][INFO ][org.elasticsearch.cluster.health] index status: YELLOW, expected YELLOW%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterIndexHealth(org.elasticsearch.cluster.health.ClusterIndexHealthTests)",
  "startTimestamp": 1474195801368,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.health.ClusterIndexHealthTests",
  "startTimestamp": 1474195801355,
  "executionTime": 19
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.monitor.jvm.JvmMonitorTests",
   "displayName": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
   "methodName": null,
   "className": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
   "children": [
    {
     "id": "ID#testMonitorFailure(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "displayName": "testMonitorFailure(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "methodName": "testMonitorFailure",
     "className": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
     "children": []
    },
    {
     "id": "ID#testSlowGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "displayName": "testSlowGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "methodName": "testSlowGc",
     "className": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
     "children": []
    },
    {
     "id": "ID#testMonitorGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "displayName": "testMonitorGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "methodName": "testMonitorGc",
     "className": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
     "children": []
    },
    {
     "id": "ID#testCheckGcOverhead(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "displayName": "testCheckGcOverhead(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
     "methodName": "testCheckGcOverhead",
     "className": "org.elasticsearch.monitor.jvm.JvmMonitorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801380
 }
]

[
 "TEST_STARTED",
 "ID#testMonitorFailure(org.elasticsearch.monitor.jvm.JvmMonitorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMonitorFailure(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
  "startTimestamp": 1474195801410,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSlowGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSlowGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
  "startTimestamp": 1474195801412,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testMonitorGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMonitorGc(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
  "startTimestamp": 1474195801440,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testCheckGcOverhead(org.elasticsearch.monitor.jvm.JvmMonitorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckGcOverhead(org.elasticsearch.monitor.jvm.JvmMonitorTests)",
  "startTimestamp": 1474195801447,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.monitor.jvm.JvmMonitorTests",
  "startTimestamp": 1474195801380,
  "executionTime": 71
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.client.transport.TransportClientHeadersTests",
   "displayName": "org.elasticsearch.client.transport.TransportClientHeadersTests",
   "methodName": null,
   "className": "org.elasticsearch.client.transport.TransportClientHeadersTests",
   "children": [
    {
     "id": "ID#testActions(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "displayName": "testActions(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "methodName": "testActions",
     "className": "org.elasticsearch.client.transport.TransportClientHeadersTests",
     "children": []
    },
    {
     "id": "ID#testWithSniffing(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "displayName": "testWithSniffing(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "methodName": "testWithSniffing",
     "className": "org.elasticsearch.client.transport.TransportClientHeadersTests",
     "children": []
    },
    {
     "id": "ID#testOverrideHeader(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "displayName": "testOverrideHeader(org.elasticsearch.client.transport.TransportClientHeadersTests)",
     "methodName": "testOverrideHeader",
     "className": "org.elasticsearch.client.transport.TransportClientHeadersTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801458
 }
]

[
 "TEST_STARTED",
 "ID#testActions(org.elasticsearch.client.transport.TransportClientHeadersTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,482][INFO ][org.elasticsearch.plugins] [test-testActions] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,482][INFO ][org.elasticsearch.plugins] [test-testActions] loaded plugin [org.elasticsearch.client.transport.TransportClientHeadersTests$InternalTransportService$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,510][INFO ][org.elasticsearch.client.transport] [test-testActions] publish_address {local[27]}, bound_addresses {local[27]}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActions(org.elasticsearch.client.transport.TransportClientHeadersTests)",
  "startTimestamp": 1474195801475,
  "executionTime": 44
 }
]

[
 "TEST_STARTED",
 "ID#testWithSniffing(org.elasticsearch.client.transport.TransportClientHeadersTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,525][INFO ][org.elasticsearch.plugins] [test-testWithSniffing] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,525][INFO ][org.elasticsearch.plugins] [test-testWithSniffing] loaded plugin [org.elasticsearch.client.transport.TransportClientHeadersTests$InternalTransportService$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,546][INFO ][org.elasticsearch.client.transport] [test-testWithSniffing] publish_address {local[28]}, bound_addresses {local[28]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,549][INFO ][org.elasticsearch.plugins] [transport_client_testWithSniffing_1] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,549][INFO ][org.elasticsearch.plugins] [transport_client_testWithSniffing_1] loaded plugin [org.elasticsearch.client.transport.TransportClientHeadersTests$InternalTransportService$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,573][INFO ][org.elasticsearch.client.transport] [transport_client_testWithSniffing_1] publish_address {local[29]}, bound_addresses {local[29]}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithSniffing(org.elasticsearch.client.transport.TransportClientHeadersTests)",
  "startTimestamp": 1474195801519,
  "executionTime": 60
 }
]

[
 "TEST_STARTED",
 "ID#testOverrideHeader(org.elasticsearch.client.transport.TransportClientHeadersTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,586][INFO ][org.elasticsearch.plugins] [test-testOverrideHeader] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,586][INFO ][org.elasticsearch.plugins] [test-testOverrideHeader] loaded plugin [org.elasticsearch.client.transport.TransportClientHeadersTests$InternalTransportService$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T04:50:01,608][INFO ][org.elasticsearch.client.transport] [test-testOverrideHeader] publish_address {local[30]}, bound_addresses {local[30]}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOverrideHeader(org.elasticsearch.client.transport.TransportClientHeadersTests)",
  "startTimestamp": 1474195801579,
  "executionTime": 35
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.client.transport.TransportClientHeadersTests",
  "startTimestamp": 1474195801458,
  "executionTime": 161
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.SpatialStrategyTests",
   "displayName": "org.elasticsearch.common.geo.SpatialStrategyTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
   "children": [
    {
     "id": "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testwriteTo",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testInvalidReadFrom",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801625
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1474195801642,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1474195801643,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1474195801645,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1474195801646,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.SpatialStrategyTests",
  "startTimestamp": 1474195801625,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801654
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:01,676][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{51oFQK7rQYCsAo9vk8IIeg}{local}{local[650]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1474195801685,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1474195801687,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:01,691][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"avg_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:01,692][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"WojciOEBiPq\" : {%0A    \"avg_bucket\" : {%0A      \"buckets_path\" : [%0A        \"CqPKBSBHLEeH\"%0A      ],%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1474195801690,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
  "startTimestamp": 1474195801654,
  "executionTime": 44
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "displayName": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "children": [
    {
     "id": "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testDeletedDocs",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMultiValueAllSet",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testActualMissingValueReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMissingValueForAll",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMultiValuesFields",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testGlobalOrdinalsGetRemovedOnceIndexReaderCloses",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSingleValueWithMissing",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingLast",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingFirstReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMultiValueWithMissing",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testNestedSortingMin",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testGlobalOrdinals",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSingleValueAllSet",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testNestedSortingMax",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingLastReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingFirst",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testTermsEnum",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testActualMissingValue",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195801707
 }
]

[
 "TEST_STARTED",
 "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,725][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,744][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[(C:)]], net usable_space [704.6gb], net total_space [780.6gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,744][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,747][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[6936], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_102/25.102-b14]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,749][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,749][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,837][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,837][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,837][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[31]}, bound_addresses {local[31]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,838][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{kybQur5SQEKgghfQvSV8XA}{S6_WZrjgTAGTzq1MHe8p4w}{local}{local[31]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,839][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,850][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,866][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,935][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,954][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testDeletedDocs]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195801717,
  "executionTime": 264
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:01,987][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,046][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,068][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMultiValueAllSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195801981,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,098][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,139][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,246][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testActualMissingValueReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802094,
  "executionTime": 205
 }
]

[
 "TEST_STARTED",
 "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,306][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,368][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,385][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMissingValueForAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802300,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,424][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,493][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMultiValuesFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802418,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,532][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,575][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,595][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802525,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,643][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,685][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,699][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSingleValueWithMissing]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802637,
  "executionTime": 96
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,740][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:02,825][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,269][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingLast]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195802733,
  "executionTime": 611
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,351][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,412][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,427][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195803344,
  "executionTime": 129
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,479][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,535][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,711][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingFirstReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195803473,
  "executionTime": 278
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,757][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,805][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,820][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMultiValueWithMissing]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195803751,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,856][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,894][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:03,964][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testNestedSortingMin]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195803850,
  "executionTime": 146
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,003][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,053][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,068][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testGlobalOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195803997,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,127][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,193][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,206][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSingleValueAllSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804121,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,238][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,286][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,312][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testNestedSortingMax]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804230,
  "executionTime": 109
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,345][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,386][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,461][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingLastReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804339,
  "executionTime": 231
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,576][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,621][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,664][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingFirst]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804570,
  "executionTime": 132
 }
]

[
 "TEST_STARTED",
 "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,708][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,770][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,785][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testTermsEnum]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "message": "We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals\r\n\tat __randomizedtesting.SeedInfo.seed([FD13852EF36FC81C:C5EEC4E60F31105E]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests.testTermsEnum(NoOrdinalsStringFieldDataTests.java:76)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804702,
  "executionTime": 125
 }
]

[
 "TEST_STARTED",
 "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,833][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,891][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:04,969][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testActualMissingValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1474195804827,
  "executionTime": 187
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:05,014][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:05,015][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:05,015][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T18:50:05,016][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
  "startTimestamp": 1474195801707,
  "executionTime": 3320
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "displayName": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "children": [
    {
     "id": "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
     "displayName": "testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
     "methodName": "testPrimaryTermMetaDataSync",
     "className": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195805032
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,090][INFO ][org.elasticsearch.cluster.routing] [node_s_0] Setup test with 4 shards and 3 replicas.%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,091][INFO ][org.elasticsearch.cluster.routing] [node_s_0] adding 4 nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,092][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [0], t [0], init shards: [8], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,093][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=20tkwPyDSKy00zDjloJNqw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node3], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=wjSBNfKwQqq-jV4R_iXUpw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node0], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=2E5RIoviQda2UiPpwjgIEQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=VnfDpCRDTjaeI1pm-iL8Gg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,094][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [4], t [4], init shards: [16], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,094][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=LbKRISzfSyWRWcrRrTjUug], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node3], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=78MkKvBdTR6zlOeTZcVq0g], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node0], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=h7nzE03rQWWKXp0g_vziAw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=TvGtAZ9XTJuaTomZdyjeQA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,095][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [8], init shards: [24], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,096][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][1], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=82a1wioPT7qJIQ4RO6oTeA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=KGzFjwn1Rz-tX4hzxLpduQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=15w9WPmVSlqlEkFK4s-llw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=eLXiXNmiQDiN4VDW9A_rmw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=_MtFQYUMQleiiCuUVrxApw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=_E6r-5P2QoOUb5_SJ9FKrQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=gKW6QG15RWqux60Ax2imAA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=p5A12kpET2ixtMCbiBPrgw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=HszsyT7ySemgv3Ki1dgEbA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=3iFI6WxVSWyjl_FF2ornIw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=XgUE4IwBRZmXgxMe5kY5yg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=ePmZ6Lq-R8Sr2okJbBkYSA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,096][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [20], init shards: [12], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,097][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][1], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=_DTYlOYpTDaWJg2PoMw0vQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=zD4UUyU5Sgy-6cQAaJCWow], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=y8h2TbTIQmeHQFMoOoGIWQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=O7xBE3TnS0uh02HtZcUPgw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=sONq73e5ShqerCsE0vHBfA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=bcpri8MHQqmUwtEzWkXe3w], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=7EqQqOZXS5uPIEcIz0MF0w], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=QtxzEAGlSOWw-oco_43T-g], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=c0971IziRk66Jif9n1w-wQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=278hPR7ESVC31gcdE_xmTw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=QLEm3GPZTcmZ5pCfD_AzvQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=E2M8lWYRQsevgDC5bujCyQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-18T10:50:05.091Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,098][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][1], [test2][2], [test2][3], [test2][2], [test2][3], [test2][0], [test2][1], [test2][3], [test2][0], [test2][1]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,098][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,098][INFO ][org.elasticsearch.cluster.routing] [node_s_0] adding [6] nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,099][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,100][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,100][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,100][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[extra_1], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=0uxwN3zCSk-jqSfC1nqEIw, rId=E2M8lWYRQsevgDC5bujCyQ], [test2][1], node[extra_2], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=wblzDqJyS6G38jgvqaV8Ng, rId=7EqQqOZXS5uPIEcIz0MF0w]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,101][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,101][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,102][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,102][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[extra_0], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=wogA_oOYTjCSJnCgvo-q9g, rId=bcpri8MHQqmUwtEzWkXe3w], [test2][1], node[extra_5], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=_4qEYvpdRaiIzlLa-T6K9g, rId=_DTYlOYpTDaWJg2PoMw0vQ]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,103][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,104][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[extra_3], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=0wP86AALTmynnlGBm-YLZw, rId=ePmZ6Lq-R8Sr2okJbBkYSA], [test1][1], node[extra_4], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=4MPMt0a5TAKTp20otYVhSQ, rId=gKW6QG15RWqux60Ax2imAA]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,105][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,105][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,105][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,105][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[extra_1], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=03-CRDjZSriK0dpiMs910A, rId=_E6r-5P2QoOUb5_SJ9FKrQ], [test1][1], node[extra_2], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=fjBdmplvSn2OY-nd_92-cg, rId=82a1wioPT7qJIQ4RO6oTeA]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,107][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,107][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][1], node[extra_3], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=6ygU-NOITOOXbbB6big0Bw, rId=278hPR7ESVC31gcdE_xmTw], [test2][0], node[extra_4], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=MClceYyVSwaNmz3l0wMFIg, rId=c0971IziRk66Jif9n1w-wQ]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,108][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,108][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][1], node[extra_0], relocating [node3], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=X7W8XZ1wQMaj6XH0kgdOcg, rId=wjSBNfKwQqq-jV4R_iXUpw], [test1][0], node[extra_5], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=168WWcUpTVChxQzK1f-q7Q, rId=20tkwPyDSKy00zDjloJNqw]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,110][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,110][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][1], node[extra_1], relocating [node3], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=eg-sVQPtT-qtWmmseTKHQA, rId=78MkKvBdTR6zlOeTZcVq0g], [test2][0], node[extra_2], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=MfsjnkdRTP2azUYASkiZhQ, rId=LbKRISzfSyWRWcrRrTjUug]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,110][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,111][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][2], node[extra_0], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=RtWNOfBhRQ25DacjnKKffQ, rId=XgUE4IwBRZmXgxMe5kY5yg], [test1][3], node[extra_5], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=p-H2rApCQ7iO-W6m2X7TWw, rId=p5A12kpET2ixtMCbiBPrgw]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,111][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][2], node[extra_3], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=QQ7SfMyrSie5lty7SmfWhw, rId=QLEm3GPZTcmZ5pCfD_AzvQ], [test2][3], node[extra_4], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=fjGI_kmmS9OG8jAo9J3P0A, rId=QtxzEAGlSOWw-oco_43T-g]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,112][INFO ][org.elasticsearch.cluster.routing] [node_s_0] failing primary shards [0, 1, 3] for index [test1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,113][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test1][0], [test1][1], [test1][3]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,113][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [29], init shards: [3], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,113][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[extra_0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=xXeKHH3wTIiWp1qTmhboTw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-18T10:50:05.112Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]], [test1][1], node[extra_5], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=QgRwtdYQScapl8330gX_Jg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-18T10:50:05.113Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]], [test1][3], node[extra_3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=lXTY0pf5SsO_CA_XmUA67Q], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-18T10:50:05.113Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,114][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test1][1], [test1][3]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,114][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,114][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][1], node[node1], relocating [extra_3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=w5GVApNbShiYxr9OEMxveg, rId=6ygU-NOITOOXbbB6big0Bw]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,115][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,115][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,115][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,115][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-18T02:50:05,115][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
  "startTimestamp": 1474195805084,
  "executionTime": 31
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.PrimaryTermsTests",
  "startTimestamp": 1474195805032,
  "executionTime": 87
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.SuggestBuilderTests",
   "displayName": "org.elasticsearch.search.suggest.SuggestBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
   "children": [
    {
     "id": "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testIllegalSuggestionName",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1474195805125
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1474195805145,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1474195805170,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1474195805211,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1474195805214,
  "executionTime": 48
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.SuggestBuilderTests",
  "startTimestamp": 1474195805125,
  "executionTime": 139
 }
]

[
 "IDLE",
 {}
]

[
 "QUIT",
 {}
]

