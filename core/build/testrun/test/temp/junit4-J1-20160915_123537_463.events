[
 "BOOTSTRAP",
 {
  "defaultCharset": "windows-1252",
  "pidString": "8548@LAPTOP-LKSM26S6",
  "systemProperties": {
   "awt.toolkit": "sun.awt.windows.WToolkit",
   "file.encoding": "Cp1252",
   "file.encoding.pkg": "sun.io",
   "file.separator": "\\",
   "java.awt.graphicsenv": "sun.awt.Win32GraphicsEnvironment",
   "java.awt.headless": "true",
   "java.awt.printerjob": "sun.awt.windows.WPrinterJob",
   "java.class.path": "C:\\projects\\team3\\core\\build\\classes\\test;C:\\projects\\team3\\core\\build\\resources\\test;C:\\projects\\team3\\core\\build\\classes\\main;C:\\projects\\team3\\core\\build\\resources\\main;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-core\\6.2.0\\849ee62525a294416802be2cacc66c80352f6f13\\lucene-core-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-analyzers-common\\6.2.0\\d254d52dd394b5079129f3d5f3bf4f2d44a5936e\\lucene-analyzers-common-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-backward-codecs\\6.2.0\\b625bb21456b3c0d1e5e431bced125cb060c1abd\\lucene-backward-codecs-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-grouping\\6.2.0\\9527fedfd5acc624b2bb3f862bd99fb8f470b053\\lucene-grouping-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-highlighter\\6.2.0\\7ca342372a3f45e32bbd21cecaa757e38eccb8a5\\lucene-highlighter-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-join\\6.2.0\\da0b8de98511abd4fe9c7d48a353d17854c5ed46\\lucene-join-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-memory\\6.2.0\\bc9e075b1ee051c8e5246c237c38d8e71dab8a66\\lucene-memory-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-misc\\6.2.0\\94ddde6312566a4da4a50a88e453b6c82c759b41\\lucene-misc-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-queries\\6.2.0\\dce47238f78e3e97d91dc6fefa9f46f07866bc2b\\lucene-queries-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-queryparser\\6.2.0\\17ef728ac15e668bfa1105321611548424637645\\lucene-queryparser-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-sandbox\\6.2.0\\520183f7b9aba77a26e224760c420a3844b0631a\\lucene-sandbox-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial\\6.2.0\\8dba929b66927b936fbc76103b109ad6c824daee\\lucene-spatial-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial-extras\\6.2.0\\3b5a6ef5cd90c0218a72e9e2f7e60104be2447da\\lucene-spatial-extras-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-spatial3d\\6.2.0\\fcdb0567725722c5145149d1502848b6a96ec18d\\lucene-spatial3d-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-suggest\\6.2.0\\3d9d526c51f483d27f425c75d7e56bc0849242d6\\lucene-suggest-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.elasticsearch\\securesm\\1.1\\1e423447d020041534be94c0f31a49fbdc1f2950\\securesm-1.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\net.sf.jopt-simple\\jopt-simple\\5.0.2\\98cafc6081d5632b61be2c9e60650b64ddbc637c\\jopt-simple-5.0.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch\\hppc\\0.7.1\\8b5057f74ea378c0150a1860874a3ebdcb713767\\hppc-0.7.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\joda-time\\joda-time\\2.9.4\\1c295b462f16702ebe720bbb08f62e1ba80da41b\\joda-time-2.9.4.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.joda\\joda-convert\\1.2\\35ec554f0cd00c956cc69051514d9488b1374dec\\joda-convert-1.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.yaml\\snakeyaml\\1.15\\3b132bea69e8ee099f416044970997bde80f4ea6\\snakeyaml-1.15.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.core\\jackson-core\\2.8.1\\fd13b1c033741d48291315c6370f7d475a42dccf\\jackson-core-2.8.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-smile\\2.8.1\\5b73867bc12224946fc67fc8d49d9f5e698d7f\\jackson-dataformat-smile-2.8.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-yaml\\2.8.1\\eb63166c723b0b4b9fb5298fca232a2f6612ec34\\jackson-dataformat-yaml-2.8.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-cbor\\2.8.1\\3a6fb7e75c9972559a78cf5cfc5a48a41a13ea40\\jackson-dataformat-cbor-2.8.1.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.tdunning\\t-digest\\3.0\\84ccf145ac2215e6bfa63baa3101c0af41017cfc\\t-digest-3.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.hdrhistogram\\HdrHistogram\\2.1.6\\7495feb7f71ee124bd2a7e7d83590e296d71d80e\\HdrHistogram-2.1.6.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.locationtech.spatial4j\\spatial4j\\0.6\\21b15310bddcfd8c72611c180f20cf23279809a3\\spatial4j-0.6.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.vividsolutions\\jts\\1.13\\3ccfb9b60f04d71add996a666ceb8902904fd805\\jts-1.13.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-api\\2.6.2\\bd1b74a5d170686362091c7cf596bbc3adf5c09b\\log4j-api-2.6.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-core\\2.6.2\\a91369f655eb1639c6aece5c5eb5108db18306\\log4j-core-2.6.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-1.2-api\\2.6.2\\3b4c5a8b734b6a29b2f03380535a48da6284b210\\log4j-1.2-api-2.6.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\net.java.dev.jna\\jna\\4.2.2\\5012450aee579c3118ff09461d5ce210e0cdc2a9\\jna-4.2.2.jar;C:\\projects\\team3\\test\\framework\\build\\distributions\\framework-5.0.0-alpha6-SNAPSHOT.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch.randomizedtesting\\randomizedtesting-runner\\2.3.2\\307965917fe8a22b7ee72deba39ef4b8e6ebc069\\randomizedtesting-runner-2.3.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\junit\\junit\\4.11\\4e031bb61df09069aeb2bffb4019e7a5034a4ee0\\junit-4.11.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.hamcrest\\hamcrest-all\\1.3\\63a21ebc981131004ad02e0434e799fd7f3a8d5a\\hamcrest-all-1.3.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-test-framework\\6.2.0\\f5026be3983acfb40d4092dbfbc015ec6e6addab\\lucene-test-framework-6.2.0.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.lucene\\lucene-codecs\\6.2.0\\99f887266b0ad9f2c286b3976c5bc48c8cd36624\\lucene-codecs-6.2.0.jar;C:\\projects\\team3\\client\\rest\\build\\distributions\\rest-5.0.0-alpha6-SNAPSHOT.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpclient\\4.5.2\\733db77aa8d9b2d68015189df76ab06304406e50\\httpclient-4.5.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore\\4.4.5\\e7501a1b34325abb00d17dde96150604a0658b54\\httpcore-4.4.5.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\commons-logging\\commons-logging\\1.1.3\\f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f\\commons-logging-1.1.3.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\commons-codec\\commons-codec\\1.10\\4b95f4897fa13f2cd904aee711aeafc0c5295cd8\\commons-codec-1.10.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.elasticsearch\\securemock\\1.2\\98201d4ad5ac93f6b415ae9172d52b5e7cda490e\\securemock-1.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpasyncclient\\4.1.2\\95aa3e6fb520191a0970a73cf09f62948ee614be\\httpasyncclient-4.1.2.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore-nio\\4.4.5\\f4be009e7505f6ceddf21e7960c759f413f15056\\httpcore-nio-4.4.5.jar;C:\\Users\\domin\\.gradle\\caches\\modules-2\\files-2.1\\com.carrotsearch.randomizedtesting\\junit4-ant\\2.3.2\\dc8f03f6111974092491f35b8269eb0fc57f52f7\\junit4-ant-2.3.2.jar",
   "java.class.version": "52.0",
   "java.endorsed.dirs": "C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\endorsed",
   "java.ext.dirs": "C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\ext;C:\\WINDOWS\\Sun\\Java\\lib\\ext",
   "java.home": "C:\\Program Files\\Java\\jdk1.8.0_65\\jre",
   "java.io.tmpdir": "./temp",
   "java.library.path": "C:\\Program Files\\Java\\jdk1.8.0_65\\bin;C:\\WINDOWS\\Sun\\Java\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Ruby22-x64\\bin;C:\\Imagick;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\xampp\\php;C:\\ProgramData\\ComposerSetup\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\OpenVPN\\bin;C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\cURL\\bin;C:\\Program Files\\gradle\\2.13\\bin;C:\\Program Files\\CMake\\bin;C:\\Program Files\\flex_bison;C:\\Program Files\\doxygen\\bin;C:\\SonarQube\\SonarQubeScanner\\bin;C:\\Users\\domin\\AppData\\Local\\Programs\\Python\\Python35-32\\Scripts\\;C:\\Users\\domin\\AppData\\Local\\Programs\\Python\\Python35-32\\;C:\\Users\\domin\\AppData\\Roaming\\npm;C:\\Users\\domin\\AppData\\Local\\Microsoft\\WindowsApps;;.",
   "java.runtime.name": "Java(TM) SE Runtime Environment",
   "java.runtime.version": "1.8.0_65-b17",
   "java.specification.name": "Java Platform API Specification",
   "java.specification.vendor": "Oracle Corporation",
   "java.specification.version": "1.8",
   "java.vendor": "Oracle Corporation",
   "java.vendor.url": "http://java.oracle.com/",
   "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
   "java.version": "1.8.0_65",
   "java.vm.info": "mixed mode",
   "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
   "java.vm.specification.name": "Java Virtual Machine Specification",
   "java.vm.specification.vendor": "Oracle Corporation",
   "java.vm.specification.version": "1.8",
   "java.vm.vendor": "Oracle Corporation",
   "java.vm.version": "25.65-b01",
   "jna.nosys": "true",
   "junit4.childvm.count": "3",
   "junit4.childvm.cwd": "C:\\projects\\team3\\core\\build\\testrun\\test\\J1",
   "junit4.childvm.id": "1",
   "junit4.memory.total": "514850816",
   "junit4.pidString": "8548@LAPTOP-LKSM26S6",
   "junit4.processors": "4",
   "line.separator": "\r\n",
   "os.arch": "amd64",
   "os.name": "Windows 10",
   "os.version": "10.0",
   "path.separator": ";",
   "sun.arch.data.model": "64",
   "sun.boot.class.path": "C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\rt.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\sunrsasign.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\classes",
   "sun.boot.library.path": "C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\bin",
   "sun.cpu.endian": "little",
   "sun.cpu.isalist": "amd64",
   "sun.desktop": "windows",
   "sun.io.unicode.encoding": "UnicodeLittle",
   "sun.java.command": "com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe -eventsfile C:\\projects\\team3\\core\\build\\testrun\\test\\temp\\junit4-J1-20160915_123537_463.events @C:\\projects\\team3\\core\\build\\testrun\\test\\temp\\junit4-J1-20160915_123537_463.suites -stdin",
   "sun.java.launcher": "SUN_STANDARD",
   "sun.jnu.encoding": "Cp1252",
   "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
   "sun.os.patch.level": "",
   "tests.artifact": "core",
   "tests.gradle": "true",
   "tests.ifNoTests": "fail",
   "tests.logger.level": "WARN",
   "tests.prefix": "tests",
   "tests.security.manager": "true",
   "tests.seed": "9CF13790D965C5A7",
   "tests.task": ":core:test",
   "user.country": "AT",
   "user.dir": "C:\\projects\\team3\\core\\build\\testrun\\test\\J1",
   "user.home": "C:\\Users\\domin",
   "user.language": "de",
   "user.name": "domin",
   "user.script": "",
   "user.timezone": "",
   "user.variant": ""
  }
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
   "children": [
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testRewriteWithInnerBoost",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testRewriteWithInnerName",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testIllegalArgument",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.WrapperQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935738921
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:35:54,954][INFO ][org.elasticsearch.cluster.service] new_master {node}{bYjKd70nThuLD9dboAVfHw}{local}{local[1]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:35:55,189][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:35:55,199][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935747111,
  "executionTime": 28636
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935775747,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935775777,
  "executionTime": 276
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935776053,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935776165,
  "executionTime": 924
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithInnerBoost(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777089,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithInnerName(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777118,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777123,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777194,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArgument(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777201,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777209,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.WrapperQueryBuilderTests)",
  "startTimestamp": 1473935777215,
  "executionTime": 672
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.WrapperQueryBuilderTests",
  "startTimestamp": 1473935738921,
  "executionTime": 39045
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests",
   "displayName": "org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests",
   "children": [
    {
     "id": "ID#testKeepTypes(org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests)",
     "displayName": "testKeepTypes(org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests)",
     "methodName": "testKeepTypes",
     "className": "org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935778035
 }
]

[
 "TEST_STARTED",
 "ID#testKeepTypes(org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testKeepTypes(org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests)",
  "startTimestamp": 1473935778257,
  "executionTime": 105
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.KeepTypesFilterFactoryTests",
  "startTimestamp": 1473935778035,
  "executionTime": 331
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "displayName": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
   "children": [
    {
     "id": "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testTimers",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testConcurrentModificationIndexFileDetailsMap",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testStart",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testTranslog",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testStageSequenceEnforcement",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testFileHashCodeAndEquals",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    },
    {
     "id": "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "displayName": "testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
     "methodName": "testIndex",
     "className": "org.elasticsearch.indices.recovery.RecoveryTargetTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935778630
 }
]

[
 "TEST_STARTED",
 "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimers(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935778674,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentModificationIndexFileDetailsMap(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935778706,
  "executionTime": 67
 }
]

[
 "TEST_STARTED",
 "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStart(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935778774,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTranslog(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935778780,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStageSequenceEnforcement(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935778854,
  "executionTime": 316
 }
]

[
 "TEST_STARTED",
 "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileHashCodeAndEquals(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935779171,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:36:19,177][INFO ][org.elasticsearch.indices.recovery] testing initial information%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:36:19,205][INFO ][org.elasticsearch.indices.recovery] performing partial recovery ([14] bytes of [798])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:36:19,205][INFO ][org.elasticsearch.indices.recovery] testing serialized information%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:36:19,212][INFO ][org.elasticsearch.indices.recovery] testing post recovery%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndex(org.elasticsearch.indices.recovery.RecoveryTargetTests)",
  "startTimestamp": 1473935779174,
  "executionTime": 38
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.recovery.RecoveryTargetTests",
  "startTimestamp": 1473935778630,
  "executionTime": 584
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "displayName": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
   "children": [
    {
     "id": "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testNonDeletedFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    },
    {
     "id": "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testFilterFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    },
    {
     "id": "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "displayName": "testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
     "methodName": "testAllFreqs",
     "className": "org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935779352
 }
]

[
 "TEST_STARTED",
 "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonDeletedFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1473935779424,
  "executionTime": 1133
 }
]

[
 "TEST_STARTED",
 "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1473935780558,
  "executionTime": 380
 }
]

[
 "TEST_STARTED",
 "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllFreqs(org.elasticsearch.common.lucene.index.FreqTermsEnumTests)",
  "startTimestamp": 1473935780938,
  "executionTime": 296
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.index.FreqTermsEnumTests",
  "startTimestamp": 1473935779352,
  "executionTime": 1886
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.SamplerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935781300
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:36:21,357][INFO ][org.elasticsearch.cluster.service] new_master {node}{M42wBJFfRRyyE8nE05Hq8A}{local}{local[3]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1473935781588,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1473935781758,
  "executionTime": 222
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.SamplerTests)",
  "startTimestamp": 1473935781981,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.SamplerTests",
  "startTimestamp": 1473935781300,
  "executionTime": 690
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.MatchQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.MatchQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
   "children": [
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testParseFailsWithMultipleFields",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyMatchPhrasePrefixQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testFuzzinessOnNonStringField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testSimpleMatchQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyFuzzyMatchQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testIllegalValues",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testLegacyMatchPhraseQuery",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "displayName": "testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
     "methodName": "testExactOnUnsupportedField",
     "className": "org.elasticsearch.index.query.MatchQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935782035
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,084][INFO ][org.elasticsearch.cluster.service] new_master {node}{4agBAx_-R-OsGEhNFrh1BQ}{local}{local[4]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,130][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,131][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782066,
  "executionTime": 242
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:C82956D8FE37F83B]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testSerialization(AbstractQueryTestCase.java:709)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782308,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782327,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:BD99028850C2257D]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testFromXContent(AbstractQueryTestCase.java:273)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782339,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782360,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782365,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,372][WARN ][org.elasticsearch.deprecation.common] Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,373][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyMatchPhrasePrefixQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782369,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:8D4D552F2F8D45CA]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.testFuzzinessOnNonStringField(MatchQueryBuilderTests.java:381)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFuzzinessOnNonStringField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782375,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:6B0A35AEA8E6004D]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testToQuery(AbstractQueryTestCase.java:589)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782382,
  "executionTime": 57
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782440,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:EDFE4F5D16828C88]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:60)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.doCreateTestQueryBuilder(MatchQueryBuilderTests.java:54)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.createTestQueryBuilder(AbstractQueryTestCase.java:240)\r\n\tat org.elasticsearch.test.AbstractQueryTestCase.testEqualsAndHashcode(AbstractQueryTestCase.java:732)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782448,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,458][WARN ][org.elasticsearch.deprecation.common] Deprecated field [fuzzy_match] used, expected [match] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,459][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyFuzzyMatchQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782454,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalValues(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782460,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782467,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,476][WARN ][org.elasticsearch.deprecation.common] Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:36:22,477][WARN ][org.elasticsearch.deprecation.common] Deprecated field [slop] used, replaced by [match_phrase query]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLegacyMatchPhraseQuery(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782473,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "message": "test runs only when at least a type is registered",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:A6153C9F49991A01]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.query.MatchQueryBuilderTests.testExactOnUnsupportedField(MatchQueryBuilderTests.java:402)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test runs only when at least a type is registered",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExactOnUnsupportedField(org.elasticsearch.index.query.MatchQueryBuilderTests)",
  "startTimestamp": 1473935782478,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.MatchQueryBuilderTests",
  "startTimestamp": 1473935782035,
  "executionTime": 458
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "displayName": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
   "children": [
    {
     "id": "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testBadTypes",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testWithNullArray",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testWithEmptyArray",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935782571
 }
]

[
 "TEST_STARTED",
 "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadTypes(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782586,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithNullArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782593,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782597,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithEmptyArray(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782606,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782609,
  "executionTime": 62
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.searchafter.SearchAfterBuilderTests)",
  "startTimestamp": 1473935782671,
  "executionTime": 9
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.searchafter.SearchAfterBuilderTests",
  "startTimestamp": 1473935782571,
  "executionTime": 119
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.codec.CodecTests",
   "displayName": "org.elasticsearch.index.codec.CodecTests",
   "methodName": null,
   "className": "org.elasticsearch.index.codec.CodecTests",
   "children": [
    {
     "id": "ID#testResolveDefaultCodecs(org.elasticsearch.index.codec.CodecTests)",
     "displayName": "testResolveDefaultCodecs(org.elasticsearch.index.codec.CodecTests)",
     "methodName": "testResolveDefaultCodecs",
     "className": "org.elasticsearch.index.codec.CodecTests",
     "children": []
    },
    {
     "id": "ID#testDefault(org.elasticsearch.index.codec.CodecTests)",
     "displayName": "testDefault(org.elasticsearch.index.codec.CodecTests)",
     "methodName": "testDefault",
     "className": "org.elasticsearch.index.codec.CodecTests",
     "children": []
    },
    {
     "id": "ID#testBestCompression(org.elasticsearch.index.codec.CodecTests)",
     "displayName": "testBestCompression(org.elasticsearch.index.codec.CodecTests)",
     "methodName": "testBestCompression",
     "className": "org.elasticsearch.index.codec.CodecTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935782751
 }
]

[
 "TEST_STARTED",
 "ID#testResolveDefaultCodecs(org.elasticsearch.index.codec.CodecTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveDefaultCodecs(org.elasticsearch.index.codec.CodecTests)",
  "startTimestamp": 1473935782783,
  "executionTime": 66
 }
]

[
 "TEST_STARTED",
 "ID#testDefault(org.elasticsearch.index.codec.CodecTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefault(org.elasticsearch.index.codec.CodecTests)",
  "startTimestamp": 1473935782849,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testBestCompression(org.elasticsearch.index.codec.CodecTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBestCompression(org.elasticsearch.index.codec.CodecTests)",
  "startTimestamp": 1473935782890,
  "executionTime": 21
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.codec.CodecTests",
  "startTimestamp": 1473935782751,
  "executionTime": 167
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "displayName": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
   "children": [
    {
     "id": "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "displayName": "testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "methodName": "testIsTimeout",
     "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
     "children": []
    },
    {
     "id": "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "displayName": "testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
     "methodName": "testClusterHealth",
     "className": "org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935782972
 }
]

[
 "TEST_STARTED",
 "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsTimeout(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
  "startTimestamp": 1473935782998,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterHealth(org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests)",
  "startTimestamp": 1473935783002,
  "executionTime": 38
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.health.ClusterHealthResponsesTests",
  "startTimestamp": 1473935782972,
  "executionTime": 71
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cli.TerminalTests",
   "displayName": "org.elasticsearch.cli.TerminalTests",
   "methodName": null,
   "className": "org.elasticsearch.cli.TerminalTests",
   "children": [
    {
     "id": "ID#testVerbosity(org.elasticsearch.cli.TerminalTests)",
     "displayName": "testVerbosity(org.elasticsearch.cli.TerminalTests)",
     "methodName": "testVerbosity",
     "className": "org.elasticsearch.cli.TerminalTests",
     "children": []
    },
    {
     "id": "ID#testEscaping(org.elasticsearch.cli.TerminalTests)",
     "displayName": "testEscaping(org.elasticsearch.cli.TerminalTests)",
     "methodName": "testEscaping",
     "className": "org.elasticsearch.cli.TerminalTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935783128
 }
]

[
 "TEST_STARTED",
 "ID#testVerbosity(org.elasticsearch.cli.TerminalTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerbosity(org.elasticsearch.cli.TerminalTests)",
  "startTimestamp": 1473935783160,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testEscaping(org.elasticsearch.cli.TerminalTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEscaping(org.elasticsearch.cli.TerminalTests)",
  "startTimestamp": 1473935783206,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cli.TerminalTests",
  "startTimestamp": 1473935783128,
  "executionTime": 87
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.IndicesModuleTests",
   "displayName": "org.elasticsearch.indices.IndicesModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.IndicesModuleTests",
   "children": [
    {
     "id": "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testBuiltinMappers",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testFieldNamesIsLastWithPlugins",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateBuiltinMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateOtherPluginMetadataMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateOtherPluginMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateFieldNamesMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testBuiltinWithPlugins",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testFieldNamesIsLast",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    },
    {
     "id": "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "displayName": "testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
     "methodName": "testDuplicateBuiltinMetadataMapper",
     "className": "org.elasticsearch.indices.IndicesModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935783292
 }
]

[
 "TEST_STARTED",
 "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuiltinMappers(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783322,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldNamesIsLastWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783361,
  "executionTime": 78
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateBuiltinMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783440,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateOtherPluginMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783476,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateOtherPluginMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783511,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateFieldNamesMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783543,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuiltinWithPlugins(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783565,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldNamesIsLast(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783568,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateBuiltinMetadataMapper(org.elasticsearch.indices.IndicesModuleTests)",
  "startTimestamp": 1473935783573,
  "executionTime": 21
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.IndicesModuleTests",
  "startTimestamp": 1473935783292,
  "executionTime": 304
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.monitor.process.ProcessProbeTests",
   "displayName": "org.elasticsearch.monitor.process.ProcessProbeTests",
   "methodName": null,
   "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
   "children": [
    {
     "id": "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "displayName": "testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "methodName": "testProcessStats",
     "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
     "children": []
    },
    {
     "id": "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "displayName": "testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
     "methodName": "testProcessInfo",
     "className": "org.elasticsearch.monitor.process.ProcessProbeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935783647
 }
]

[
 "TEST_STARTED",
 "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessStats(org.elasticsearch.monitor.process.ProcessProbeTests)",
  "startTimestamp": 1473935783663,
  "executionTime": 763
 }
]

[
 "TEST_STARTED",
 "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessInfo(org.elasticsearch.monitor.process.ProcessProbeTests)",
  "startTimestamp": 1473935784427,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.monitor.process.ProcessProbeTests",
  "startTimestamp": 1473935783647,
  "executionTime": 785
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "displayName": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
   "children": [
    {
     "id": "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "displayName": "testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "methodName": "testGeoGetLatLon",
     "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
     "children": []
    },
    {
     "id": "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "displayName": "testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
     "methodName": "testGeoDistance",
     "className": "org.elasticsearch.index.fielddata.ScriptDocValuesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935784532
 }
]

[
 "TEST_STARTED",
 "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoGetLatLon(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
  "startTimestamp": 1473935784559,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoDistance(org.elasticsearch.index.fielddata.ScriptDocValuesTests)",
  "startTimestamp": 1473935784611,
  "executionTime": 175
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.ScriptDocValuesTests",
  "startTimestamp": 1473935784532,
  "executionTime": 257
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.unit.DistanceUnitTests",
   "displayName": "org.elasticsearch.common.unit.DistanceUnitTests",
   "methodName": null,
   "className": "org.elasticsearch.common.unit.DistanceUnitTests",
   "children": [
    {
     "id": "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testDistanceUnitNames",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testSimpleDistanceUnit",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testFromString",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testReadWrite",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    },
    {
     "id": "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
     "displayName": "testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
     "methodName": "testDistanceUnitParsing",
     "className": "org.elasticsearch.common.unit.DistanceUnitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935784818
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceUnitNames(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1473935784838,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDistanceUnit(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1473935784875,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromString(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1473935784877,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadWrite(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1473935784879,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceUnitParsing(org.elasticsearch.common.unit.DistanceUnitTests)",
  "startTimestamp": 1473935784881,
  "executionTime": 28
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.unit.DistanceUnitTests",
  "startTimestamp": 1473935784818,
  "executionTime": 92
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.ShardUtilsTests",
   "displayName": "org.elasticsearch.index.shard.ShardUtilsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.ShardUtilsTests",
   "children": [
    {
     "id": "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
     "displayName": "testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
     "methodName": "testExtractShardId",
     "className": "org.elasticsearch.index.shard.ShardUtilsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935784985
 }
]

[
 "TEST_STARTED",
 "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExtractShardId(org.elasticsearch.index.shard.ShardUtilsTests)",
  "startTimestamp": 1473935785014,
  "executionTime": 167
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.ShardUtilsTests",
  "startTimestamp": 1473935784985,
  "executionTime": 199
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
   "children": [
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testClausesUnmodifiable",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testCollectPayloadsDeprecated",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.SpanNearQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935785212
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:25,244][INFO ][org.elasticsearch.cluster.service] new_master {node}{KCvDhDdrR4ONRky_DATH1g}{local}{local[5]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:25,286][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:25,286][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:26,183][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:26,200][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:26,200][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,567][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,567][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,567][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,580][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,580][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,580][WARN ][org.elasticsearch.deprecation.index.mapper]  [qMVwC] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935785238,
  "executionTime": 2368
 }
]

[
 "TEST_STARTED",
 "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClausesUnmodifiable(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787606,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787610,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787717,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787730,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787735,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787740,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787758,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787764,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:27,770][WARN ][org.elasticsearch.deprecation.common] Deprecated field [collect_payloads] used, replaced by [no longer supported]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCollectPayloadsDeprecated(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787767,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787770,
  "executionTime": 72
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.SpanNearQueryBuilderTests)",
  "startTimestamp": 1473935787842,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.SpanNearQueryBuilderTests",
  "startTimestamp": 1473935785212,
  "executionTime": 2651
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "displayName": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
   "children": [
    {
     "id": "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
     "displayName": "testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
     "methodName": "testNullValueObject",
     "className": "org.elasticsearch.index.mapper.NullValueObjectMappingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935787962
 }
]

[
 "TEST_STARTED",
 "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,015][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,268][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [790.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,268][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,292][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,295][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:28,295][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:37,151][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:37,151][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:37,265][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[1]}, bound_addresses {local[1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:37,287][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{eMx5MxyVSO2doM3VQsOCsw}{FifkzxQcQVKL-cq4DDtmlQ}{local}{local[1]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:37,371][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:38,058][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:38,729][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:41,134][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:41,934][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [NullValueObjectMappingTests#testNullValueObject]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValueObject(org.elasticsearch.index.mapper.NullValueObjectMappingTests)",
  "startTimestamp": 1473935787990,
  "executionTime": 14018
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:42,008][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:42,011][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:42,012][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:36:42,040][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.NullValueObjectMappingTests",
  "startTimestamp": 1473935787962,
  "executionTime": 14094
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ClassPermissionTests",
   "displayName": "org.elasticsearch.script.ClassPermissionTests",
   "methodName": null,
   "className": "org.elasticsearch.script.ClassPermissionTests",
   "children": [
    {
     "id": "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testStandard(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testStandard",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testEquals(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollectionWildcards",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testWildcards(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testWildcards",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollectionStandard",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testImplies(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testImplies",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    },
    {
     "id": "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
     "displayName": "testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
     "methodName": "testPermissionCollection",
     "className": "org.elasticsearch.script.ClassPermissionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935802122
 }
]

[
 "TEST_STARTED",
 "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStandard(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802140,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802155,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollectionWildcards(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802159,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcards(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802162,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollectionStandard(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802165,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImplies(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802169,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPermissionCollection(org.elasticsearch.script.ClassPermissionTests)",
  "startTimestamp": 1473935802172,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ClassPermissionTests",
  "startTimestamp": 1473935802122,
  "executionTime": 55
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ScriptSettingsTests",
   "displayName": "org.elasticsearch.script.ScriptSettingsTests",
   "methodName": null,
   "className": "org.elasticsearch.script.ScriptSettingsTests",
   "children": [
    {
     "id": "ID#testSettingsAreProperlyPropogated(org.elasticsearch.script.ScriptSettingsTests)",
     "displayName": "testSettingsAreProperlyPropogated(org.elasticsearch.script.ScriptSettingsTests)",
     "methodName": "testSettingsAreProperlyPropogated",
     "className": "org.elasticsearch.script.ScriptSettingsTests",
     "children": []
    },
    {
     "id": "ID#testInvalidDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
     "displayName": "testInvalidDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
     "methodName": "testInvalidDefaultLanguage",
     "className": "org.elasticsearch.script.ScriptSettingsTests",
     "children": []
    },
    {
     "id": "ID#testDefaultLanguageIsPainless(org.elasticsearch.script.ScriptSettingsTests)",
     "displayName": "testDefaultLanguageIsPainless(org.elasticsearch.script.ScriptSettingsTests)",
     "methodName": "testDefaultLanguageIsPainless",
     "className": "org.elasticsearch.script.ScriptSettingsTests",
     "children": []
    },
    {
     "id": "ID#testCustomDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
     "displayName": "testCustomDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
     "methodName": "testCustomDefaultLanguage",
     "className": "org.elasticsearch.script.ScriptSettingsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935802229
 }
]

[
 "TEST_STARTED",
 "ID#testSettingsAreProperlyPropogated(org.elasticsearch.script.ScriptSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSettingsAreProperlyPropogated(org.elasticsearch.script.ScriptSettingsTests)",
  "startTimestamp": 1473935802249,
  "executionTime": 59
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
  "startTimestamp": 1473935802308,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultLanguageIsPainless(org.elasticsearch.script.ScriptSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultLanguageIsPainless(org.elasticsearch.script.ScriptSettingsTests)",
  "startTimestamp": 1473935802312,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCustomDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomDefaultLanguage(org.elasticsearch.script.ScriptSettingsTests)",
  "startTimestamp": 1473935802315,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ScriptSettingsTests",
  "startTimestamp": 1473935802229,
  "executionTime": 95
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
   "children": [
    {
     "id": "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
     "displayName": "testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
     "methodName": "testSameHost",
     "className": "org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935802366
 }
]

[
 "TEST_STARTED",
 "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,437][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding two nodes with the same host%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,492][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> start all primary shards, no replica will be started since its on the same host%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,495][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> add another node, with a different host, replicas will be allocating%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSameHost(org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests)",
  "startTimestamp": 1473935802400,
  "executionTime": 97
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.SameShardRoutingTests",
  "startTimestamp": 1473935802366,
  "executionTime": 133
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.TextFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.TextFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
   "children": [
    {
     "id": "ID#testDisableNorms(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testDisableNorms(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testDisableNorms",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testNullConfigValuesFail(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testNullConfigValuesFail",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNotIndexedFieldPositionIncrement(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testNotIndexedFieldPositionIncrement(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testNotIndexedFieldPositionIncrement",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEnableStore(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testEnableStore(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testEnableStore",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaultPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testDefaultPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testDefaultPositionIncrementGap",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testTermVectors(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testTermVectors(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testTermVectors",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testFrequencyFilter(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testFrequencyFilter(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testFrequencyFilter",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testPositionIncrementGap",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIndexOptions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testIndexOptions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testIndexOptions",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDisableIndex(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testDisableIndex(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testDisableIndex",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testAnalyzedFieldPositionIncrementWithoutPositions",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testSearchQuoteAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testFielddata(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testFielddata(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testFielddata",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testSearchAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEagerGlobalOrdinals(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "displayName": "testEagerGlobalOrdinals(org.elasticsearch.index.mapper.TextFieldMapperTests)",
     "methodName": "testEagerGlobalOrdinals",
     "className": "org.elasticsearch.index.mapper.TextFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935802558
 }
]

[
 "TEST_STARTED",
 "ID#testDisableNorms(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,665][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,716][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [790.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,716][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,721][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,725][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:42,726][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,081][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,082][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,083][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[2]}, bound_addresses {local[2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,173][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{sM__Xc-aRAS45HEadDme6g}{Rp1hP8e-R3mBPaddkRzx8g}{local}{local[2]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,209][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,233][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,423][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,574][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,600][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testDisableNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableNorms(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935802653,
  "executionTime": 1013
 }
]

[
 "TEST_STARTED",
 "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,685][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,814][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,875][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testNullConfigValuesFail]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935803667,
  "executionTime": 247
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:43,927][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,027][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,068][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,311][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,402][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [TextFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935803914,
  "executionTime": 555
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexedFieldPositionIncrement(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,478][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,554][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,630][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testNotIndexedFieldPositionIncrement]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexedFieldPositionIncrement(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935804469,
  "executionTime": 201
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,693][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,803][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,828][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935804671,
  "executionTime": 249
 }
]

[
 "TEST_STARTED",
 "ID#testEnableStore(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:44,932][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:45,205][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:45,229][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testEnableStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnableStore(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935804920,
  "executionTime": 392
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:45,336][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:45,416][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:46,748][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testDefaultPositionIncrementGap]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935805312,
  "executionTime": 1652
 }
]

[
 "TEST_STARTED",
 "ID#testTermVectors(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:46,976][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:47,423][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:47,567][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testTermVectors]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermVectors(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935806964,
  "executionTime": 748
 }
]

[
 "TEST_STARTED",
 "ID#testFrequencyFilter(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:47,764][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:48,228][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:48,257][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testFrequencyFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFrequencyFilter(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935807714,
  "executionTime": 618
 }
]

[
 "TEST_STARTED",
 "ID#testPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:48,365][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:48,665][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,091][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testPositionIncrementGap]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPositionIncrementGap(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935808332,
  "executionTime": 810
 }
]

[
 "TEST_STARTED",
 "ID#testIndexOptions(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,157][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,234][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,269][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexOptions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935809142,
  "executionTime": 153
 }
]

[
 "TEST_STARTED",
 "ID#testDisableIndex(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,306][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,376][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,416][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testDisableIndex]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableIndex(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935809296,
  "executionTime": 146
 }
]

[
 "TEST_STARTED",
 "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,449][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,552][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,569][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testAnalyzedFieldPositionIncrementWithoutPositions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935809442,
  "executionTime": 179
 }
]

[
 "TEST_STARTED",
 "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,631][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,828][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,849][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testSearchQuoteAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935809622,
  "executionTime": 317
 }
]

[
 "TEST_STARTED",
 "ID#testFielddata(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:49,971][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:50,224][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:50,325][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testFielddata]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFielddata(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935809939,
  "executionTime": 572
 }
]

[
 "TEST_STARTED",
 "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:50,526][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:50,948][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:51,472][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testSearchAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935810511,
  "executionTime": 999
 }
]

[
 "TEST_STARTED",
 "ID#testEagerGlobalOrdinals(org.elasticsearch.index.mapper.TextFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:51,542][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:51,908][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:51,930][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [TextFieldMapperTests#testEagerGlobalOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEagerGlobalOrdinals(org.elasticsearch.index.mapper.TextFieldMapperTests)",
  "startTimestamp": 1473935811511,
  "executionTime": 488
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:52,000][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:52,001][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:52,001][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:36:52,019][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.TextFieldMapperTests",
  "startTimestamp": 1473935802558,
  "executionTime": 9479
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.CancellableThreadsTests",
   "displayName": "org.elasticsearch.common.util.CancellableThreadsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.CancellableThreadsTests",
   "children": [
    {
     "id": "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
     "displayName": "testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
     "methodName": "testCancellableThreads",
     "className": "org.elasticsearch.common.util.CancellableThreadsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935812157
 }
]

[
 "TEST_STARTED",
 "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancellableThreads(org.elasticsearch.common.util.CancellableThreadsTests)",
  "startTimestamp": 1473935812259,
  "executionTime": 238
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.CancellableThreadsTests",
  "startTimestamp": 1473935812157,
  "executionTime": 345
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935812619
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:06:52,811][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{QgGeyeKoSsa8WdNFB192fg}{local}{local[9]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
  "startTimestamp": 1473935812847,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:06:52,887][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"derivative\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\",%0A      \"unit\" : \"141473844\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:06:52,891][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"derivative\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\",%0A      \"unit\" : \"141473844\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
  "startTimestamp": 1473935812882,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.DerivativeTests)",
  "startTimestamp": 1473935812892,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.DerivativeTests",
  "startTimestamp": 1473935812619,
  "executionTime": 283
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.env.ESFileStoreTests",
   "displayName": "org.elasticsearch.env.ESFileStoreTests",
   "methodName": null,
   "className": "org.elasticsearch.env.ESFileStoreTests",
   "children": [
    {
     "id": "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
     "displayName": "testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
     "methodName": "testNegativeSpace",
     "className": "org.elasticsearch.env.ESFileStoreTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935812987
 }
]

[
 "TEST_STARTED",
 "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNegativeSpace(org.elasticsearch.env.ESFileStoreTests)",
  "startTimestamp": 1473935813113,
  "executionTime": 1917
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.env.ESFileStoreTests",
  "startTimestamp": 1473935812987,
  "executionTime": 2045
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.bulk.BackoffPolicyTests",
   "displayName": "org.elasticsearch.action.bulk.BackoffPolicyTests",
   "methodName": null,
   "className": "org.elasticsearch.action.bulk.BackoffPolicyTests",
   "children": [
    {
     "id": "ID#testWrapBackoffPolicy(org.elasticsearch.action.bulk.BackoffPolicyTests)",
     "displayName": "testWrapBackoffPolicy(org.elasticsearch.action.bulk.BackoffPolicyTests)",
     "methodName": "testWrapBackoffPolicy",
     "className": "org.elasticsearch.action.bulk.BackoffPolicyTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935815081
 }
]

[
 "TEST_STARTED",
 "ID#testWrapBackoffPolicy(org.elasticsearch.action.bulk.BackoffPolicyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWrapBackoffPolicy(org.elasticsearch.action.bulk.BackoffPolicyTests)",
  "startTimestamp": 1473935815130,
  "executionTime": 190
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.bulk.BackoffPolicyTests",
  "startTimestamp": 1473935815081,
  "executionTime": 243
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.DateFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.DateFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
   "children": [
    {
     "id": "ID#testStore(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testStore(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testStore",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNoDocValues(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testNoDocValues(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testNoDocValues",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testNullConfigValuesFail(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testNullConfigValuesFail",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testChangeLocale(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testChangeLocale(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testChangeLocale",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testIgnoreMalformed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testIgnoreMalformed",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIncludeInAll(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testIncludeInAll(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testIncludeInAll",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNotIndexed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testNotIndexed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testNotIndexed",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testChangeFormat(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "displayName": "testChangeFormat(org.elasticsearch.index.mapper.DateFieldMapperTests)",
     "methodName": "testChangeFormat",
     "className": "org.elasticsearch.index.mapper.DateFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935815386
 }
]

[
 "TEST_STARTED",
 "ID#testStore(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,467][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,610][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,611][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,618][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,622][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:55,622][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,560][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,560][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,564][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[3]}, bound_addresses {local[3]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,577][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{s_8S1USaRpu_zZxE9iXnoA}{kG3aiYGqS9GsWHxJgIkd5g}{local}{local[3]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,578][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,734][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:56,951][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:57,391][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:57,953][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStore(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935815449,
  "executionTime": 2637
 }
]

[
 "TEST_STARTED",
 "ID#testNoDocValues(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,095][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,188][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,214][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testNoDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDocValues(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935818086,
  "executionTime": 175
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,277][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,466][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,512][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935818262,
  "executionTime": 391
 }
]

[
 "TEST_STARTED",
 "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,686][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,836][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,877][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testNullConfigValuesFail]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullConfigValuesFail(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935818653,
  "executionTime": 304
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:58,976][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,195][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,233][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935818958,
  "executionTime": 325
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,294][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,383][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,417][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,500][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,634][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [DateFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935819283,
  "executionTime": 675
 }
]

[
 "TEST_STARTED",
 "ID#testChangeLocale(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:36:59,989][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:00,143][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:00,270][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testChangeLocale]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeLocale(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935819959,
  "executionTime": 394
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:00,363][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,578][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,606][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testIgnoreMalformed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935820354,
  "executionTime": 3286
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeInAll(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,660][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,736][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,805][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeInAll(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935823640,
  "executionTime": 205
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexed(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,862][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,932][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,952][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testNotIndexed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexed(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935823846,
  "executionTime": 142
 }
]

[
 "TEST_STARTED",
 "ID#testChangeFormat(org.elasticsearch.index.mapper.DateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:03,997][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,079][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,101][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DateFieldMapperTests#testChangeFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeFormat(org.elasticsearch.index.mapper.DateFieldMapperTests)",
  "startTimestamp": 1473935823988,
  "executionTime": 173
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,162][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,165][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,165][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T03:37:04,171][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.DateFieldMapperTests",
  "startTimestamp": 1473935815386,
  "executionTime": 8800
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.GatewayMetaStateTests",
   "displayName": "org.elasticsearch.gateway.GatewayMetaStateTests",
   "methodName": null,
   "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
   "children": [
    {
     "id": "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNoMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNewShardsAlwaysWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testRemoveCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testUpdateCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testCustomMetaDataNoChange",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testIndexMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testVersionChangeIsAlwaysWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testCustomMetaDataValidation",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testWriteClosedIndex",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testAddCustomMetaDataOnUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testNoWriteIfNothingChanged",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testAllUpToDateNothingWritten",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    },
    {
     "id": "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "displayName": "testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
     "methodName": "testMultipleCustomMetaDataUpgrade",
     "className": "org.elasticsearch.gateway.GatewayMetaStateTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935824296
 }
]

[
 "TEST_STARTED",
 "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824321,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewShardsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824326,
  "executionTime": 64
 }
]

[
 "TEST_STARTED",
 "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemoveCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824390,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824395,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomMetaDataNoChange(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824399,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824402,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionChangeIsAlwaysWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824406,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomMetaDataValidation(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824418,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteClosedIndex(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824422,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddCustomMetaDataOnUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824435,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoWriteIfNothingChanged(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824439,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllUpToDateNothingWritten(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824455,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleCustomMetaDataUpgrade(org.elasticsearch.gateway.GatewayMetaStateTests)",
  "startTimestamp": 1473935824472,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.GatewayMetaStateTests",
  "startTimestamp": 1473935824296,
  "executionTime": 183
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
   "children": [
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testDeprecatedXContent",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery4",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQueryParsingExceptions",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testInvalidOpenPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testInvalidClosedPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery1",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery2",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testParsingAndToQuery3",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJsonCoerceDeprecated",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testFromJsonIgnoreMalformedDeprecated",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testEmptyPolygon",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "displayName": "testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
     "methodName": "testNullFieldName",
     "className": "org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935824513
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,556][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{6jNc2TSoREqHD7plrHDb9g}{local}{local[30]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,571][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,572][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,593][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,594][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,594][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,598][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,598][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,598][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,609][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,609][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,609][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,614][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,615][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,615][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,624][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,624][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,624][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,640][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,640][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,640][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,644][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,644][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,644][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,649][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,650][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,650][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,671][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,672][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,685][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,688][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,688][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,688][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,693][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,693][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,693][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,701][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,701][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,702][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,705][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,705][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,705][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,711][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,711][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,711][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,726][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,726][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:04,726][WARN ][org.elasticsearch.deprecation.index.mapper]  [UH] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935824545,
  "executionTime": 1214
 }
]

[
 "TEST_STARTED",
 "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeprecatedXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935825760,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935825766,
  "executionTime": 177
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery4(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935825943,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQueryParsingExceptions(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826012,
  "executionTime": 60
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826073,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826125,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidOpenPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826160,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidClosedPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826163,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826167,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826171,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826176,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826181,
  "executionTime": 84
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery1(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826266,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery2(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826270,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingAndToQuery3(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826293,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826312,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonCoerceDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826315,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonIgnoreMalformedDeprecated(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826319,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyPolygon(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826322,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826326,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullFieldName(org.elasticsearch.index.query.GeoPolygonQueryBuilderTests)",
  "startTimestamp": 1473935826332,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.GeoPolygonQueryBuilderTests",
  "startTimestamp": 1473935824513,
  "executionTime": 1846
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.analyze.HunspellServiceTests",
   "displayName": "org.elasticsearch.indices.analyze.HunspellServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
   "children": [
    {
     "id": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testLocaleDirectoryWithNodeLevelConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testLocaleDirectoryWithLocaleSpecificConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testDicWithTwoAffs",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    },
    {
     "id": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "displayName": "testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
     "methodName": "testDicWithNoAff",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935826392
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1473935826431,
  "executionTime": 3286
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1473935829718,
  "executionTime": 3507
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1473935833225,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-15 12:37:13,292 TEST-HunspellServiceTests.testDicWithNoAff-seed#[9CF13790D965C5A7] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:63)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.error(AbstractLogger.java:743)%0D%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:143)%0D%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:106)%0D%0A%09at org.elasticsearch.indices.analyze.HunspellServiceTests.lambda$testDicWithNoAff$1066(HunspellServiceTests.java:76)%0D%0A%09at org.apache.lucene.util.LuceneTestCase.expectThrows(LuceneTestCase.java:2677)%0D%0A%09at org.elasticsearch.indices.analyze.HunspellServiceTests.testDicWithNoAff(HunspellServiceTests.java:75)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceTests)",
  "startTimestamp": 1473935833243,
  "executionTime": 62
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.analyze.HunspellServiceTests",
  "startTimestamp": 1473935826392,
  "executionTime": 6928
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.MetaStateServiceTests",
   "displayName": "org.elasticsearch.gateway.MetaStateServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.gateway.MetaStateServiceTests",
   "children": [
    {
     "id": "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testLoadGlobal",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteLoadIndex",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteGlobalStateWithIndexAndNoIndexIsLoaded",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testWriteLoadGlobal",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    },
    {
     "id": "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "displayName": "testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
     "methodName": "testLoadMissingIndex",
     "className": "org.elasticsearch.gateway.MetaStateServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935833351
 }
]

[
 "TEST_STARTED",
 "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,439][INFO ][org.elasticsearch.env    ] [o1g2qed] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,443][INFO ][org.elasticsearch.env    ] [o1g2qed] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1473935833378,
  "executionTime": 254
 }
]

[
 "TEST_STARTED",
 "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,709][INFO ][org.elasticsearch.env    ] [X47eJQN] using [2] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,710][INFO ][org.elasticsearch.env    ] [X47eJQN] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteLoadIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1473935833632,
  "executionTime": 114
 }
]

[
 "TEST_STARTED",
 "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,777][INFO ][org.elasticsearch.env    ] [Rjj5qqZ] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,777][INFO ][org.elasticsearch.env    ] [Rjj5qqZ] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteGlobalStateWithIndexAndNoIndexIsLoaded(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1473935833746,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,839][INFO ][org.elasticsearch.env    ] [3mldmlA] using [2] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,839][INFO ][org.elasticsearch.env    ] [3mldmlA] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteLoadGlobal(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1473935833792,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,911][INFO ][org.elasticsearch.env    ] [d3T4Bzv] using [2] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:07:13,911][INFO ][org.elasticsearch.env    ] [d3T4Bzv] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadMissingIndex(org.elasticsearch.gateway.MetaStateServiceTests)",
  "startTimestamp": 1473935833860,
  "executionTime": 59
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.MetaStateServiceTests",
  "startTimestamp": 1473935833351,
  "executionTime": 617
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "displayName": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
   "children": [
    {
     "id": "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyAnyAction",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyNoPipelineId",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyBulkRedirect",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyNoIngestNodes",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyFailures",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    },
    {
     "id": "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "displayName": "testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
     "methodName": "testApplyIndexRedirect",
     "className": "org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935834045
 }
]

[
 "TEST_STARTED",
 "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyAnyAction(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834073,
  "executionTime": 412
 }
]

[
 "TEST_STARTED",
 "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyNoPipelineId(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834485,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyBulkRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834494,
  "executionTime": 119
 }
]

[
 "TEST_STARTED",
 "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyNoIngestNodes(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834613,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyFailures(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834617,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testApplyIndexRedirect(org.elasticsearch.action.ingest.IngestProxyActionFilterTests)",
  "startTimestamp": 1473935834626,
  "executionTime": 30
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.IngestProxyActionFilterTests",
  "startTimestamp": 1473935834045,
  "executionTime": 615
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.serialization.DiffableTests",
   "displayName": "org.elasticsearch.cluster.serialization.DiffableTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.serialization.DiffableTests",
   "children": [
    {
     "id": "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testJKDMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    },
    {
     "id": "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testImmutableOpenMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    },
    {
     "id": "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "displayName": "testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
     "methodName": "testImmutableOpenIntMapDiff",
     "className": "org.elasticsearch.cluster.serialization.DiffableTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935835104
 }
]

[
 "TEST_STARTED",
 "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJKDMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1473935835345,
  "executionTime": 385
 }
]

[
 "TEST_STARTED",
 "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImmutableOpenMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1473935835731,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testImmutableOpenIntMapDiff(org.elasticsearch.cluster.serialization.DiffableTests)",
  "startTimestamp": 1473935835775,
  "executionTime": 80
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.serialization.DiffableTests",
  "startTimestamp": 1473935835104,
  "executionTime": 753
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.SumTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.SumTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.SumTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.SumTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.SumTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.SumTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.SumTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935835919
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:37:15,958][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{pMNwPfNRTNuswKbaFETYPw}{local}{local[46]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.SumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.SumTests)",
  "startTimestamp": 1473935835973,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.SumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.SumTests)",
  "startTimestamp": 1473935835977,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.SumTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.SumTests)",
  "startTimestamp": 1473935835981,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.SumTests",
  "startTimestamp": 1473935835919,
  "executionTime": 69
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.ListenableActionFutureTests",
   "displayName": "org.elasticsearch.action.support.ListenableActionFutureTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.ListenableActionFutureTests",
   "children": [
    {
     "id": "ID#testListenerIsCallableFromNetworkThreads(org.elasticsearch.action.support.ListenableActionFutureTests)",
     "displayName": "testListenerIsCallableFromNetworkThreads(org.elasticsearch.action.support.ListenableActionFutureTests)",
     "methodName": "testListenerIsCallableFromNetworkThreads",
     "className": "org.elasticsearch.action.support.ListenableActionFutureTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935836029
 }
]

[
 "TEST_STARTED",
 "ID#testListenerIsCallableFromNetworkThreads(org.elasticsearch.action.support.ListenableActionFutureTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testListenerIsCallableFromNetworkThreads(org.elasticsearch.action.support.ListenableActionFutureTests)",
  "startTimestamp": 1473935836053,
  "executionTime": 136
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.ListenableActionFutureTests",
  "startTimestamp": 1473935836029,
  "executionTime": 163
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.PercentilesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935836267
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:16,340][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{nhxai7wXTz-ciAiRaYWmUQ}{local}{local[47]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1473935836390,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1473935836458,
  "executionTime": 162
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.PercentilesTests)",
  "startTimestamp": 1473935836621,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.PercentilesTests",
  "startTimestamp": 1473935836267,
  "executionTime": 362
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "displayName": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    },
    {
     "id": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "displayName": "testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
     "methodName": "testBuildWordScorer",
     "className": "org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935836705
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1473935836727,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1473935836732,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1473935836735,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests)",
  "startTimestamp": 1473935836741,
  "executionTime": 87
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.phrase.StupidBackoffModelTests",
  "startTimestamp": 1473935836705,
  "executionTime": 129
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "displayName": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "methodName": null,
   "className": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
   "children": [
    {
     "id": "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
     "displayName": "testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
     "methodName": "testSimple",
     "className": "org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935836902
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests)",
  "startTimestamp": 1473935836984,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.apache.lucene.analysis.miscellaneous.UniqueTokenFilterTests",
  "startTimestamp": 1473935836902,
  "executionTime": 91
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "displayName": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
   "children": [
    {
     "id": "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testCreateIndexRequest",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testValidation",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testEvaluateConditions",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testGenerateRolloverIndexName",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    },
    {
     "id": "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "displayName": "testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
     "methodName": "testCreateUpdateAliasRequest",
     "className": "org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935837032
 }
]

[
 "TEST_STARTED",
 "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateIndexRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1473935837053,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidation(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1473935837056,
  "executionTime": 114
 }
]

[
 "TEST_STARTED",
 "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvaluateConditions(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1473935837171,
  "executionTime": 62
 }
]

[
 "TEST_STARTED",
 "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGenerateRolloverIndexName(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1473935837233,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateUpdateAliasRequest(org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests)",
  "startTimestamp": 1473935837236,
  "executionTime": 58
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.rollover.TransportRolloverActionTests",
  "startTimestamp": 1473935837032,
  "executionTime": 279
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.MultiValueModeTests",
   "displayName": "org.elasticsearch.search.MultiValueModeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.MultiValueModeTests",
   "children": [
    {
     "id": "ID#testSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testSingleValuedDoubles",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testFromString(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testFromString(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testFromString",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testReadFrom(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testReadFrom(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testSingleValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testSingleValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testSingleValuedOrds",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testMultiValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testMultiValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testMultiValuedLongs",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testMultiValuedDoubles",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testSingleValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testSingleValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testSingleValuedLongs",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testUnsortedMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testUnsortedMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testUnsortedMultiValuedDoubles",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testWriteTo(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testWriteTo(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testWriteTo",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testMultiValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testMultiValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testMultiValuedOrds",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testUnsortedSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testUnsortedSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testUnsortedSingleValuedDoubles",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testMultiValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testMultiValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testMultiValuedStrings",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    },
    {
     "id": "ID#testSingleValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
     "displayName": "testSingleValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
     "methodName": "testSingleValuedStrings",
     "className": "org.elasticsearch.search.MultiValueModeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935837608
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935837633,
  "executionTime": 416
 }
]

[
 "TEST_STARTED",
 "ID#testFromString(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromString(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838050,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838052,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedOrds(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838055,
  "executionTime": 42
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838097,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedLongs(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838111,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838121,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedLongs(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedLongs(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838124,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testUnsortedMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnsortedMultiValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838128,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testWriteTo(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteTo(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838153,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedOrds(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedOrds(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838156,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnsortedSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnsortedSingleValuedDoubles(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838159,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedStrings(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838175,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedStrings(org.elasticsearch.search.MultiValueModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedStrings(org.elasticsearch.search.MultiValueModeTests)",
  "startTimestamp": 1473935838180,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.MultiValueModeTests",
  "startTimestamp": 1473935837608,
  "executionTime": 601
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.DiscoveryModuleTests",
   "displayName": "org.elasticsearch.discovery.DiscoveryModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
   "children": [
    {
     "id": "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterMasterElectionService",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterDiscovery",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testRegisterDefaults",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    },
    {
     "id": "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "displayName": "testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
     "methodName": "testLoadUnregisteredMasterElectionService",
     "className": "org.elasticsearch.discovery.DiscoveryModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935838320
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1473935838357,
  "executionTime": 99
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterDiscovery(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1473935838456,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterDefaults(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1473935838460,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadUnregisteredMasterElectionService(org.elasticsearch.discovery.DiscoveryModuleTests)",
  "startTimestamp": 1473935838463,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.DiscoveryModuleTests",
  "startTimestamp": 1473935838320,
  "executionTime": 147
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.RoutingServiceTests",
   "displayName": "org.elasticsearch.cluster.routing.RoutingServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.RoutingServiceTests",
   "children": [
    {
     "id": "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
     "displayName": "testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
     "methodName": "testReroute",
     "className": "org.elasticsearch.cluster.routing.RoutingServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935838521
 }
]

[
 "TEST_STARTED",
 "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:18,552][INFO ][org.elasticsearch.cluster.routing] [node_s_0] --> performing fake reroute [test]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReroute(org.elasticsearch.cluster.routing.RoutingServiceTests)",
  "startTimestamp": 1473935838549,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.RoutingServiceTests",
  "startTimestamp": 1473935838521,
  "executionTime": 37
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "displayName": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
   "children": [
    {
     "id": "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testActualMissingValueReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMultiValuesFields",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingFirstReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testNestedSortingMax",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMultiValueAllSet",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testTermsEnum",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSingleValueWithMissing",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testDeletedDocs",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSingleValueAllSet",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMissingValueForAll",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testGlobalOrdinals",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testGlobalOrdinalsGetRemovedOnceIndexReaderCloses",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingLast",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingFirst",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testActualMissingValue",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testSortMissingLastReverse",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testNestedSortingMin",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "displayName": "testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
     "methodName": "testMultiValueWithMissing",
     "className": "org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935838961
 }
]

[
 "TEST_STARTED",
 "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,001][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,024][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,024][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,029][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,032][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,032][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,210][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,211][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,212][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[4]}, bound_addresses {local[4]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,216][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{5R84xFbyQ7Oo4CRCzQPWJA}{ZDULXz1aTsqtHTKrih2Qog}{local}{local[4]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,217][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,232][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,258][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:19,535][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,015][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testActualMissingValueReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActualMissingValueReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935838991,
  "executionTime": 5123
 }
]

[
 "TEST_STARTED",
 "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,134][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,230][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,274][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMultiValuesFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMultiValuesFields(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935844114,
  "executionTime": 195
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,321][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,401][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,843][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingFirstReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingFirstReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935844310,
  "executionTime": 650
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:24,973][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:25,094][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:25,872][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testNestedSortingMax]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSortingMax(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935844961,
  "executionTime": 957
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:25,929][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,152][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,211][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935845919,
  "executionTime": 326
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,254][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,318][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,424][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMultiValueAllSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935846246,
  "executionTime": 214
 }
]

[
 "TEST_STARTED",
 "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,469][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,557][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,579][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testTermsEnum]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "message": "We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:A40C7658253B1DE5]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests.testTermsEnum(NoOrdinalsStringFieldDataTests.java:76)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermsEnum(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935846460,
  "executionTime": 160
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,629][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,705][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,730][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSingleValueWithMissing]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935846621,
  "executionTime": 162
 }
]

[
 "TEST_STARTED",
 "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,791][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,876][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:26,952][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testDeletedDocs]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeletedDocs(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935846783,
  "executionTime": 208
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,001][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,064][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,084][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSingleValueAllSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueAllSet(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935846992,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,124][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,183][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,251][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMissingValueForAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingValueForAll(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935847115,
  "executionTime": 202
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,325][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,468][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,626][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testGlobalOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalOrdinals(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935847318,
  "executionTime": 357
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,708][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,795][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,836][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalOrdinalsGetRemovedOnceIndexReaderCloses(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935847676,
  "executionTime": 193
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,877][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:27,957][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:28,330][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingLast]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingLast(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935847869,
  "executionTime": 528
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:28,407][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:28,487][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:29,126][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingFirst]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingFirst(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935848397,
  "executionTime": 821
 }
]

[
 "TEST_STARTED",
 "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:29,229][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:29,291][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:29,924][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testActualMissingValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActualMissingValue(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935849218,
  "executionTime": 761
 }
]

[
 "TEST_STARTED",
 "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:29,988][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,091][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,151][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testSortMissingLastReverse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortMissingLastReverse(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935849979,
  "executionTime": 222
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,209][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,285][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,578][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testNestedSortingMin]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSortingMin(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935850201,
  "executionTime": 428
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,638][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,725][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,744][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [NoOrdinalsStringFieldDataTests#testMultiValueWithMissing]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValueWithMissing(org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests)",
  "startTimestamp": 1473935850629,
  "executionTime": 176
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,806][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,807][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,807][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:30,809][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests",
  "startTimestamp": 1473935838961,
  "executionTime": 11861
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
   "displayName": "org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
   "children": [
    {
     "id": "ID#testDeleteUnassigned(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "displayName": "testDeleteUnassigned(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "methodName": "testDeleteUnassigned",
     "className": "org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshotting(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "displayName": "testDeleteSnapshotting(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "methodName": "testDeleteSnapshotting",
     "className": "org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testDeleteMissing(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "displayName": "testDeleteMissing(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
     "methodName": "testDeleteMissing",
     "className": "org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935850903
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteUnassigned(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteUnassigned(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
  "startTimestamp": 1473935850940,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshotting(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshotting(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
  "startTimestamp": 1473935850972,
  "executionTime": 63
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteMissing(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteMissing(org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests)",
  "startTimestamp": 1473935851035,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.MetaDataDeleteIndexServiceTests",
  "startTimestamp": 1473935850903,
  "executionTime": 138
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.fieldstats.FieldStatsRequestTests",
   "displayName": "org.elasticsearch.action.fieldstats.FieldStatsRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.fieldstats.FieldStatsRequestTests",
   "children": [
    {
     "id": "ID#testFieldsParsing(org.elasticsearch.action.fieldstats.FieldStatsRequestTests)",
     "displayName": "testFieldsParsing(org.elasticsearch.action.fieldstats.FieldStatsRequestTests)",
     "methodName": "testFieldsParsing",
     "className": "org.elasticsearch.action.fieldstats.FieldStatsRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935851065
 }
]

[
 "TEST_STARTED",
 "ID#testFieldsParsing(org.elasticsearch.action.fieldstats.FieldStatsRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldsParsing(org.elasticsearch.action.fieldstats.FieldStatsRequestTests)",
  "startTimestamp": 1473935851089,
  "executionTime": 84
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.fieldstats.FieldStatsRequestTests",
  "startTimestamp": 1473935851065,
  "executionTime": 110
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.search.geo.GeoPointParsingTests",
   "displayName": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
   "children": [
    {
     "id": "ID#testInvalidPointLatHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testInvalidPointLatHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testInvalidPointLatHashMix",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testEqualsHashCodeContract(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testEqualsHashCodeContract(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testEqualsHashCodeContract",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testInvalidPointEmbeddedObject(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testInvalidPointEmbeddedObject(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testInvalidPointEmbeddedObject",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testInvalidPointLonHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testInvalidPointLonHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testInvalidPointLonHashMix",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testInvalidField(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testInvalidField(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testInvalidField",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testGeoPointParsing(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testGeoPointParsing(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testGeoPointParsing",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    },
    {
     "id": "ID#testGeoPointReset(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "displayName": "testGeoPointReset(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
     "methodName": "testGeoPointReset",
     "className": "org.elasticsearch.index.search.geo.GeoPointParsingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935851217
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidPointLatHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidPointLatHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851239,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsHashCodeContract(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsHashCodeContract(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851262,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidPointEmbeddedObject(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidPointEmbeddedObject(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851264,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidPointLonHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidPointLonHashMix(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851266,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidField(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidField(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851268,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testGeoPointParsing(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoPointParsing(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851273,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testGeoPointReset(org.elasticsearch.index.search.geo.GeoPointParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoPointReset(org.elasticsearch.index.search.geo.GeoPointParsingTests)",
  "startTimestamp": 1473935851277,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.search.geo.GeoPointParsingTests",
  "startTimestamp": 1473935851217,
  "executionTime": 65
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
   "children": [
    {
     "id": "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testStore",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testMissingScalingFactor",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNotIndexed",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIgnoreMalformed",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIllegalScalingFactor",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testIncludeInAll",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testNoDocValues",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "displayName": "testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
     "methodName": "testCoerce",
     "className": "org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935851320
 }
]

[
 "TEST_STARTED",
 "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,499][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,531][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,532][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,536][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,539][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:31,539][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,082][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,083][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,083][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[5]}, bound_addresses {local[5]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,109][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{s_8S1USaRpu_zZxE9iXnoA}{sONMnV7NRPK4kxBe5tagFw}{local}{local[5]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,110][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,176][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,222][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,340][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,440][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStore(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935851479,
  "executionTime": 997
 }
]

[
 "TEST_STARTED",
 "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,491][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,562][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,578][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testMissingScalingFactor]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935852476,
  "executionTime": 141
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,628][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,775][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,803][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:32,987][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,081][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [ScaledFloatFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935852617,
  "executionTime": 524
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,149][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,285][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,301][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNotIndexed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935853141,
  "executionTime": 194
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,349][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,528][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,547][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935853340,
  "executionTime": 336
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,686][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:33,991][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,015][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIgnoreMalformed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935853677,
  "executionTime": 587
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,274][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,462][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,481][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935854264,
  "executionTime": 249
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,526][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,624][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,655][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIllegalScalingFactor]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalScalingFactor(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935854513,
  "executionTime": 189
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,710][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,780][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,797][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeInAll(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935854702,
  "executionTime": 154
 }
]

[
 "TEST_STARTED",
 "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,865][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,926][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,945][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testNoDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDocValues(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935854857,
  "executionTime": 128
 }
]

[
 "TEST_STARTED",
 "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:34,994][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,134][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,153][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [ScaledFloatFieldMapperTests#testCoerce]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerce(org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests)",
  "startTimestamp": 1473935854985,
  "executionTime": 201
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,186][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,187][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,187][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:37:35,189][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.ScaledFloatFieldMapperTests",
  "startTimestamp": 1473935851320,
  "executionTime": 3881
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.internal.InternalSearchHitTests",
   "displayName": "org.elasticsearch.search.internal.InternalSearchHitTests",
   "methodName": null,
   "className": "org.elasticsearch.search.internal.InternalSearchHitTests",
   "children": [
    {
     "id": "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
     "displayName": "testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
     "methodName": "testSerializeShardTarget",
     "className": "org.elasticsearch.search.internal.InternalSearchHitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935855235
 }
]

[
 "TEST_STARTED",
 "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerializeShardTarget(org.elasticsearch.search.internal.InternalSearchHitTests)",
  "startTimestamp": 1473935855255,
  "executionTime": 224
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.internal.InternalSearchHitTests",
  "startTimestamp": 1473935855235,
  "executionTime": 246
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
   "children": [
    {
     "id": "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testDoNotAllocateFromPrimary",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRollingRestart",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRestoreDoesNotAllocateSnapshotOnOlderNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    },
    {
     "id": "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "displayName": "testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935855540
 }
]

[
 "TEST_STARTED",
 "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,565][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,569][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start two nodes and fully start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,571][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start all the primary shards, replicas will start initializing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,584][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][2], [test][3], [test][4], [test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoNotAllocateFromPrimary(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1473935855556,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,592][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,597][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,603][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][2], [test][1], [test][4], [test][3], [test][2], [test][0], [test][3], [test][1], [test][4], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,604][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,606][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,607][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,676][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][2], [test][3], [test][4], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,677][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,682][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,683][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,687][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,689][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,690][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][2], [test][3], [test][4], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,691][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRollingRestart(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1473935855584,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceDoesNotAllocatePrimaryAndReplicasOnDifferentVersionNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1473935855691,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreDoesNotAllocateSnapshotOnOlderNodes(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1473935855699,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,722][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,740][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,786][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,850][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,856][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_8][0], [test_2][3], [test_6][0], [test_3][0], [test_1][0], [test_0][0], [test_5][0], [test_8][1], [test_2][2], [test_4][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,864][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,877][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,878][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,886][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_0][2], [test_7][2], [test_5][0], [test_4][2], [test_8][1], [test_6][1], [test_3][1], [test_3][2], [test_0][4], [test_1][1]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,891][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,904][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,906][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,914][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_7][0], [test_2][3], [test_8][2], [test_3][2], [test_0][0], [test_7][2], [test_4][0], [test_1][2], [test_3][1], [test_0][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,917][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_8][0], [test_0][2], [test_6][0], [test_8][0], [test_3][2], [test_6][0], [test_8][2], [test_3][0], [test_8][2], [test_4][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,918][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,932][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,962][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,982][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,988][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:35,999][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,000][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,008][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_2][1], [test_7][1], [test_3][1], [test_4][1], [test_8][2], [test_0][2], [test_7][2], [test_0][4], [test_6][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,017][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_8][1], [test_4][0], [test_8][1], [test_1][1]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,018][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,031][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,033][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,044][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_4][2], [test_7][1], [test_5][0], [test_2][3], [test_0][0], [test_8][1], [test_8][2], [test_1][1], [test_7][0], [test_6][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,061][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_0][2], [test_1][2], [test_3][1], [test_0][0], [test_6][0], [test_7][0], [test_5][0], [test_0][1], [test_0][4], [test_6][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,063][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,082][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,101][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,111][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,112][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,120][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_4][2], [test_1][2], [test_4][0], [test_0][0], [test_6][1], [test_0][2], [test_5][0], [test_7][0], [test_5][0], [test_0][4]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,131][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_4][0], [test_1][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,133][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,145][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,146][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,157][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test_5][0], [test_6][1], [test_8][1], [test_2][2], [test_6][0], [test_4][1], [test_0][4], [test_8][0], [test_1][1], [test_4][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,191][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,208][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,236][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,258][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,260][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,368][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_1][0], [test_0][2], [test_0][0], [test_3][1], [test_3][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,376][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,388][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,410][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_1][0], [test_4][1], [test_6][0], [test_8][0], [test_3][0], [test_8][1], [test_2][2], [test_5][0], [test_0][1], [test_2][3]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,415][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,497][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,499][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,503][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test_4][2], [test_6][1], [test_6][0], [test_1][2], [test_7][1], [test_7][0], [test_3][2], [test_8][1], [test_8][0], [test_2][1]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,507][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,524][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,538][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_3][0], [test_7][2], [test_4][2], [test_8][2], [test_0][0], [test_2][0], [test_0][2], [test_2][1], [test_3][1], [test_7][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,551][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,601][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,602][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete rebalancing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,605][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_4][0], [test_8][1], [test_6][1]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T01:37:36,605][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] stabilized success [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests)",
  "startTimestamp": 1473935855712,
  "executionTime": 894
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.NodeVersionAllocationDeciderTests",
  "startTimestamp": 1473935855540,
  "executionTime": 1070
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.CharFilterTests",
   "displayName": "org.elasticsearch.index.analysis.CharFilterTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.CharFilterTests",
   "children": [
    {
     "id": "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testPatternReplaceCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    },
    {
     "id": "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testMappingCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    },
    {
     "id": "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "displayName": "testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
     "methodName": "testHtmlStripCharFilter",
     "className": "org.elasticsearch.index.analysis.CharFilterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935856686
 }
]

[
 "TEST_STARTED",
 "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPatternReplaceCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1473935856727,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMappingCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1473935856750,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHtmlStripCharFilter(org.elasticsearch.index.analysis.CharFilterTests)",
  "startTimestamp": 1473935856805,
  "executionTime": 69
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.CharFilterTests",
  "startTimestamp": 1473935856686,
  "executionTime": 193
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests",
   "displayName": "org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests",
   "children": [
    {
     "id": "ID#testExceptionForCopyToInMultiFields(org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests)",
     "displayName": "testExceptionForCopyToInMultiFields(org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests)",
     "methodName": "testExceptionForCopyToInMultiFields",
     "className": "org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935856906
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionForCopyToInMultiFields(org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:37:36,957][WARN ][mapping [type]           ] Found a copy_to in field [c] which is within a multi field. This feature has been removed and the copy_to will be removed from the mapping.%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionForCopyToInMultiFields(org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests)",
  "startTimestamp": 1473935856932,
  "executionTime": 31
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.MultiFieldCopyToMapperTests",
  "startTimestamp": 1473935856906,
  "executionTime": 61
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "displayName": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "methodName": null,
   "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
   "children": [
    {
     "id": "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testSimpleReplication",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testSimpleAppendOnlyReplication",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testAppendWhileRecovering",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    },
    {
     "id": "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "displayName": "testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
     "methodName": "testIndexingDuringFileRecovery",
     "className": "org.elasticsearch.index.replication.IndexLevelReplicationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935857127
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1473935857182,
  "executionTime": 2162
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleAppendOnlyReplication(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1473935859344,
  "executionTime": 1450
 }
]

[
 "TEST_STARTED",
 "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAppendWhileRecovering(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1473935860794,
  "executionTime": 1969
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,796][DEBUG][org.elasticsearch.index.shard] [s0] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,825][TRACE][org.elasticsearch.index.shard] [s0] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=iHrxbfIkSQC_hzWt-RuwSQ]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,866][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,867][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=E9jJBY6eStSjy0qldvl2aA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,895][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,895][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] starting recovery from store ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,945][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [post recovery from shard_store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,946][TRACE][org.elasticsearch.index.shard] [s1] [test][0] recovery completed from [shard_store], took [49ms]%0A    index    : files           [0] with total_size [0b], took[12ms]%0A             : recovered_files [0] with total_size [0b]%0A             : reusing_files   [0] with total_size [0b]%0A    verify_index    : took [0s], check_index [0s]%0A    translog : number_of_operations [0], took [37ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,946][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,946][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,946][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,953][TRACE][org.elasticsearch.index.replication] [s1] [test][0] captured translog id [-1] for recovery%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,956][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: recovering [segments_1], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,957][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,972][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: prepare remote engine for translog%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,999][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: remote engine start took [27.1ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:42,999][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase1] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: took [0s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] snapshot translog for recovery. current size is [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase2] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: sending transaction log operations%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] no translog operations to send to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] recovery [phase2] to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: took [338.1micros]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] finalizing recovery to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,000][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [test][0] finalizing recovery to {s1}{s1}{_ASZPPRBRUq4jxRvaGzi6g}{local}{local[s1]}: took [155.4micros]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,001][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,001][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,001][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,001][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@22d7c297]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,006][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][1], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,006][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][1], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,007][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@14105f97]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,012][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@147f80ed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,013][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][2], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,013][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][2], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,013][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@52b0c0a1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,014][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@6bebf9de]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,014][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][3], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,014][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][3], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,015][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@43a37bfc]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,015][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@2f5c335b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,016][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][4], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,016][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][4], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,016][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@709ed9d1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,017][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@4d4f64cb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,017][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][5], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,018][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][5], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,018][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@3287aefa]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,018][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@3deea2f9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,019][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][6], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,019][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][6], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,020][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@b360c10]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,020][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@47813b4d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,021][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][7], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,021][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][7], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,021][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@34fddb24]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,022][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@701bd2b5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,022][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][8], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,022][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][8], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,023][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@25785e03]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,023][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@43754bae]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,024][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][9], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,024][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][9], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,024][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@6f26955e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,025][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@4664b7ea]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,025][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][10], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,026][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][10], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,026][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@5f6885c2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,027][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@3efbe968]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,028][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][11], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,028][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][11], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,028][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@5a056539]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,029][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@78a277fd]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,030][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][12], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,030][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][12], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,030][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@dd1da3f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,031][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@643eae61]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,031][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][13], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,032][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][13], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,032][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@798e2604]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,032][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@26bb1e09]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,033][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][14], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,033][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][14], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,033][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@3cc838d0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,034][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@4a0b3950]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,034][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][15], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,034][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][15], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,035][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@7774358a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,035][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@21491d34]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,036][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][16], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,036][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][16], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,036][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@4163262f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,037][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@41443206]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,037][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][17], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,037][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][17], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,037][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@6291e4c0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,038][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@43bd3933]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,038][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][18], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,038][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][18], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,039][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@4be66daa]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,039][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@d07bd32]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,040][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][19], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,040][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][19], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,040][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@32dd8ffb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,040][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@6e54de11]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,041][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][20], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,041][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][20], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,041][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@bbcfb1e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,042][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@4d625a3e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,043][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][21], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,043][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][21], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,043][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@74df8b43]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,044][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@5b0b3c70]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,044][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][22], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,045][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][22], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,045][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@744c5402]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,045][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@4b572eed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,046][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][23], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,046][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][23], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,046][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@2bf0be37]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,047][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][24][org.elasticsearch.index.mapper.ParseContext$Document@7b25aa09]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,047][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][24], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,047][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][24], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,048][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][24][org.elasticsearch.index.mapper.ParseContext$Document@3863b544]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,048][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][25][org.elasticsearch.index.mapper.ParseContext$Document@596c026b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,049][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][25], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,049][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][25], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,050][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][25][org.elasticsearch.index.mapper.ParseContext$Document@fba4931]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,051][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][26][org.elasticsearch.index.mapper.ParseContext$Document@45e3d256]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,051][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][26], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,051][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][26], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,053][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][26][org.elasticsearch.index.mapper.ParseContext$Document@204e095]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,055][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][27][org.elasticsearch.index.mapper.ParseContext$Document@a9f7b44]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,056][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][27], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,056][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][27], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,057][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][27][org.elasticsearch.index.mapper.ParseContext$Document@26558ded]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,059][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][28][org.elasticsearch.index.mapper.ParseContext$Document@2d3cf93d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,059][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][28], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,060][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][28], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,060][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][28][org.elasticsearch.index.mapper.ParseContext$Document@22d3d9f5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,060][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][29][org.elasticsearch.index.mapper.ParseContext$Document@731a2770]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,061][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][29], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,061][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][29], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,061][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][29][org.elasticsearch.index.mapper.ParseContext$Document@7f76bb07]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,063][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][30][org.elasticsearch.index.mapper.ParseContext$Document@4ae4bd5e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,063][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][30], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,064][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][30], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,064][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][30][org.elasticsearch.index.mapper.ParseContext$Document@75d4b98f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,065][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][31][org.elasticsearch.index.mapper.ParseContext$Document@4bb73d37]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,065][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][31], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,066][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][31], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,066][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][31][org.elasticsearch.index.mapper.ParseContext$Document@206ba70d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,066][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][32][org.elasticsearch.index.mapper.ParseContext$Document@4553e7f9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,067][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][32], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,067][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][32], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,067][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][32][org.elasticsearch.index.mapper.ParseContext$Document@53b79fcd]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,068][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][33][org.elasticsearch.index.mapper.ParseContext$Document@47657569]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,089][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][33], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,089][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][33], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,090][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][33][org.elasticsearch.index.mapper.ParseContext$Document@4e8a9e20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,090][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][34][org.elasticsearch.index.mapper.ParseContext$Document@26571bf3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,090][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][34], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,091][TRACE][org.elasticsearch.index.replication] [s1] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][34], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,091][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][34][org.elasticsearch.index.mapper.ParseContext$Document@7cfb2727]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,101][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,433][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,617][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,617][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=2nosOrwTR4CoJDXPrSwEDQ]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,699][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,704][TRACE][org.elasticsearch.index.replication] [s2] [test][0] captured translog id [2] for recovery%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,749][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: recovering [_0.cfe], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,749][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: recovering [_0.si], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,749][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: recovering [_0.cfs], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,750][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: recovering [segments_2], does not exists in remote%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,750][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: recovering_files [4] with total_size [2.9kb], reusing_files [0] with total_size [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,810][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@2043e927]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,831][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][35], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,831][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][35], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,832][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@c59b604]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,837][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=2nosOrwTR4CoJDXPrSwEDQ], unassigned_info[[reason=REALLOCATED_REPLICA], at[2016-09-15T10:37:43.596Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][35], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-15 17:37:43,840 TEST-IndexLevelReplicationTests.testIndexingDuringFileRecovery-seed#[9CF13790D965C5A7] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.logParent(LoggerConfig.java:381)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:376)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:49)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.trace(AbstractLogger.java:2215)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation$1.onFailure(ReplicationOperation.java:193)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:494)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:479)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica(ReplicationOperation.java:184)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas(ReplicationOperation.java:168)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:129)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.index(ESIndexLevelReplicationTestCase.java:277)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.indexDocs(ESIndexLevelReplicationTestCase.java:259)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase.testIndexingDuringFileRecovery(ESIndexLevelReplicationTestCase.java:158)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(Tes"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,846][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@1e36f99a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,846][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][36], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,847][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][36], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,847][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@4c695ed6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,848][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=2nosOrwTR4CoJDXPrSwEDQ], unassigned_info[[reason=REALLOCATED_REPLICA], at[2016-09-15T10:37:43.596Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][36], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-15 17:37:43,850 TEST-IndexLevelReplicationTests.testIndexingDuringFileRecovery-seed#[9CF13790D965C5A7] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.logParent(LoggerConfig.java:381)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:376)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:49)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.trace(AbstractLogger.java:2215)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation$1.onFailure(ReplicationOperation.java:193)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:494)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:479)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica(ReplicationOperation.java:184)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas(ReplicationOperation.java:168)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:129)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.index(ESIndexLevelReplicationTestCase.java:277)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.indexDocs(ESIndexLevelReplicationTestCase.java:259)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase.testIndexingDuringFileRecovery(ESIndexLevelReplicationTestCase.java:158)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(Tes"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,855][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@6a35c9f0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,855][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][37], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,855][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][37], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,855][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@460a8837]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,856][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=2nosOrwTR4CoJDXPrSwEDQ], unassigned_info[[reason=REALLOCATED_REPLICA], at[2016-09-15T10:37:43.596Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][37], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "2016-09-15 17:37:43,859 TEST-IndexLevelReplicationTests.testIndexingDuringFileRecovery-seed#[9CF13790D965C5A7] ERROR An exception occurred processing Appender console java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.sun.reflect\")%0D%0A%09at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)%0D%0A%09at java.security.AccessController.checkPermission(AccessController.java:884)%0D%0A%09at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)%0D%0A%09at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)%0D%0A%09at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:311)%0D%0A%09at java.lang.ClassLoader.loadClass(ClassLoader.java:357)%0D%0A%09at java.lang.Class.forName0(Native Method)%0D%0A%09at java.lang.Class.forName(Class.java:264)%0D%0A%09at org.apache.logging.log4j.util.LoaderUtil.loadClass(LoaderUtil.java:122)%0D%0A%09at org.apache.logging.log4j.core.util.Loader.loadClass(Loader.java:228)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:496)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:617)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:135)%0D%0A%09at org.apache.logging.log4j.core.impl.ThrowableProxy.<init>(ThrowableProxy.java:117)%0D%0A%09at org.apache.logging.log4j.core.impl.MutableLogEvent.getThrownProxy(MutableLogEvent.java:314)%0D%0A%09at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)%0D%0A%09at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:294)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:195)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:180)%0D%0A%09at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:120)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:113)%0D%0A%09at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:104)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:155)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:128)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:119)%0D%0A%09at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:390)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:375)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.logParent(LoggerConfig.java:381)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:376)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:359)%0D%0A%09at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:349)%0D%0A%09at org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:49)%0D%0A%09at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1983)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1845)%0D%0A%09at org.apache.logging.log4j.spi.AbstractLogger.trace(AbstractLogger.java:2215)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation$1.onFailure(ReplicationOperation.java:193)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:494)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicasRef.performOn(ESIndexLevelReplicationTestCase.java:479)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica(ReplicationOperation.java:184)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas(ReplicationOperation.java:168)%0D%0A%09at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:129)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.index(ESIndexLevelReplicationTestCase.java:277)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase$ReplicationGroup.indexDocs(ESIndexLevelReplicationTestCase.java:259)%0D%0A%09at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase.testIndexingDuringFileRecovery(ESIndexLevelReplicationTestCase.java:158)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0D%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0D%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0D%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0D%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0D%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)%0D%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(Tes"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tRuleIgnoreAfterMaxFailures.java:64)%0D%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)%0D%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0D%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0D%0A%09at java.lang.Thread.run(Thread.java:745)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,864][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@16ade5db]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,865][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] op [indexing] completed on primary for request [index {[test][type][38], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,865][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s1], [R], s[STARTED], a[id=E9jJBY6eStSjy0qldvl2aA] for request [index {[test][type][38], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,865][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@fb8a0d2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,866][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [[test][0]] sending op [indexing] to replica [test][0], node[s2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=2nosOrwTR4CoJDXPrSwEDQ], unassigned_info[[reason=REALLOCATED_REPLICA], at[2016-09-15T10:37:43.596Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]] for request [index {[test][type][38], source[{}]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,915][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: prepare remote engine for translog%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,965][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: remote engine start took [47.2ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,965][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase1] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: took [0s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,965][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] snapshot translog for recovery. current size is [4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,976][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase2] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: sending transaction log operations%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,976][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][35]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,977][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@2d941af8]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,987][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][36]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,987][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@5ddb8ee0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,988][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][37]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,988][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@2fdc076e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,988][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][38]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:43,989][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@22a836d1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,016][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] sent final batch of [4][104b] (total: [4]) translog operations to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,017][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] recovery [phase2] to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: took [41.1ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,017][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] finalizing recovery to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,194][TRACE][org.elasticsearch.index.replication] [s2] [test][0] [test][0] finalizing recovery to {s2}{s2}{MHgFsrjvQ6ScjnNXPGiWhA}{local}{local[s2]}: took [177.3ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,194][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,194][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,195][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,195][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [146.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,331][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [146.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,333][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [146.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,682][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [146.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,683][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,684][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [0b] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,685][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:44,932][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T17:37:45,000][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingDuringFileRecovery(org.elasticsearch.index.replication.IndexLevelReplicationTests)",
  "startTimestamp": 1473935862763,
  "executionTime": 2290
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.replication.IndexLevelReplicationTests",
  "startTimestamp": 1473935857127,
  "executionTime": 8085
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.IpFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.IpFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
   "children": [
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testStore",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testIgnoreMalformed",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNotIndexed",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testNoDocValues",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testSerializeDefaults",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "displayName": "testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
     "methodName": "testIncludeInAll",
     "className": "org.elasticsearch.index.mapper.IpFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935865236
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,287][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,320][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,320][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,324][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,327][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,327][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,476][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,476][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,477][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[6]}, bound_addresses {local[6]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,480][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{BrCiioULQDmGc0oWPerSxA}{KnhKfLQJRd-fIlD7sEc6JQ}{local}{local[6]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,481][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,503][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,526][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,640][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,749][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935865274,
  "executionTime": 536
 }
]

[
 "TEST_STARTED",
 "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,818][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,891][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,909][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStore(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935865810,
  "executionTime": 159
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:45,978][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,104][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,128][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testIgnoreMalformed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935865969,
  "executionTime": 205
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,181][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,349][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,405][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935866174,
  "executionTime": 271
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,453][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,522][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,540][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNotIndexed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexed(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935866445,
  "executionTime": 135
 }
]

[
 "TEST_STARTED",
 "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,588][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,643][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,660][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testNoDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoDocValues(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935866580,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,709][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,772][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,794][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,857][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:46,968][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [IpFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935866699,
  "executionTime": 327
 }
]

[
 "TEST_STARTED",
 "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,034][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,088][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,108][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testSerializeDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerializeDefaults(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935867027,
  "executionTime": 110
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,146][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,223][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,250][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [IpFieldMapperTests#testIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeInAll(org.elasticsearch.index.mapper.IpFieldMapperTests)",
  "startTimestamp": 1473935867137,
  "executionTime": 148
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,286][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,286][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,287][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:37:47,289][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.IpFieldMapperTests",
  "startTimestamp": 1473935865236,
  "executionTime": 2067
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.IdFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.IdFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testRangeQuery",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.IdFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935867352
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867375,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRangeQuery(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867389,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867409,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867414,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867416,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.IdFieldTypeTests)",
  "startTimestamp": 1473935867419,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.IdFieldTypeTests",
  "startTimestamp": 1473935867352,
  "executionTime": 74
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "displayName": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testCoerceShell",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testCoerceHole",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.common.geo.builders.PolygonBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935867475
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1473935867530,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerceShell(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1473935867552,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1473935867555,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCoerceHole(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1473935867570,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.common.geo.builders.PolygonBuilderTests)",
  "startTimestamp": 1473935867573,
  "executionTime": 96
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.builders.PolygonBuilderTests",
  "startTimestamp": 1473935867475,
  "executionTime": 196
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.SecurityTests",
   "displayName": "org.elasticsearch.bootstrap.SecurityTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.SecurityTests",
   "children": [
    {
     "id": "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testProcessExecution",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureRegularFile",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureNotExists",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    },
    {
     "id": "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
     "displayName": "testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
     "methodName": "testEnsureExists",
     "className": "org.elasticsearch.bootstrap.SecurityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935867698
 }
]

[
 "TEST_STARTED",
 "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProcessExecution(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1473935867732,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureRegularFile(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1473935867750,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureNotExists(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1473935867756,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureExists(org.elasticsearch.bootstrap.SecurityTests)",
  "startTimestamp": 1473935867763,
  "executionTime": 10
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.SecurityTests",
  "startTimestamp": 1473935867698,
  "executionTime": 102
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.PublishPortTests",
   "displayName": "org.elasticsearch.transport.PublishPortTests",
   "methodName": null,
   "className": "org.elasticsearch.transport.PublishPortTests",
   "children": [
    {
     "id": "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)",
     "displayName": "testPublishPort(org.elasticsearch.transport.PublishPortTests)",
     "methodName": "testPublishPort",
     "className": "org.elasticsearch.transport.PublishPortTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935867843
 }
]

[
 "TEST_STARTED",
 "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishPort(org.elasticsearch.transport.PublishPortTests)",
  "startTimestamp": 1473935867892,
  "executionTime": 10
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.PublishPortTests",
  "startTimestamp": 1473935867843,
  "executionTime": 61
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.rest.DeprecationRestHandlerTests",
   "displayName": "org.elasticsearch.rest.DeprecationRestHandlerTests",
   "methodName": null,
   "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
   "children": [
    {
     "id": "ID#testNullHandler(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testNullHandler(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testNullHandler",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testValidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testValidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testValidHeaderValue",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testInvalidHeaderValueNull(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testInvalidHeaderValueNull(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testInvalidHeaderValueNull",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testInvalidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testInvalidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testInvalidHeaderValue",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testHandleRequestLogsWarningThenForwards(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testHandleRequestLogsWarningThenForwards(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testHandleRequestLogsWarningThenForwards",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testNullDeprecationLogger(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testNullDeprecationLogger(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testNullDeprecationLogger",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testInvalidHeaderValueEmpty(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testInvalidHeaderValueEmpty(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testInvalidHeaderValueEmpty",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    },
    {
     "id": "ID#testInvalidDeprecationMessageThrowsException(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "displayName": "testInvalidDeprecationMessageThrowsException(org.elasticsearch.rest.DeprecationRestHandlerTests)",
     "methodName": "testInvalidDeprecationMessageThrowsException",
     "className": "org.elasticsearch.rest.DeprecationRestHandlerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935867932
 }
]

[
 "TEST_STARTED",
 "ID#testNullHandler(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullHandler(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935867954,
  "executionTime": 54
 }
]

[
 "TEST_STARTED",
 "ID#testValidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868009,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidHeaderValueNull(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidHeaderValueNull(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868038,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidHeaderValue(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868041,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testHandleRequestLogsWarningThenForwards(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandleRequestLogsWarningThenForwards(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868044,
  "executionTime": 123
 }
]

[
 "TEST_STARTED",
 "ID#testNullDeprecationLogger(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullDeprecationLogger(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868168,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidHeaderValueEmpty(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidHeaderValueEmpty(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868171,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidDeprecationMessageThrowsException(org.elasticsearch.rest.DeprecationRestHandlerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidDeprecationMessageThrowsException(org.elasticsearch.rest.DeprecationRestHandlerTests)",
  "startTimestamp": 1473935868174,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.rest.DeprecationRestHandlerTests",
  "startTimestamp": 1473935867932,
  "executionTime": 247
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
   "children": [
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935868202
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,262][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{cr7mEY9IS_CJhhGKyzt4Sw}{local}{local[140]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,276][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,276][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,297][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,298][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,298][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,301][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,301][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,301][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,314][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,314][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,314][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,316][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,316][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,316][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,320][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,320][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,320][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,331][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,331][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,331][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,345][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,346][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,351][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,362][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,362][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,362][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,373][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,373][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,373][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,377][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,377][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,377][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,381][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,381][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,381][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,400][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,400][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:37:48,400][WARN ][org.elasticsearch.deprecation.index.mapper]  [GBN] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868240,
  "executionTime": 163
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868403,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868414,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868425,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868429,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868445,
  "executionTime": 59
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868504,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868509,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868617,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.SpanContainingQueryBuilderTests)",
  "startTimestamp": 1473935868628,
  "executionTime": 185
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.SpanContainingQueryBuilderTests",
  "startTimestamp": 1473935868202,
  "executionTime": 620
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.IndexShardTests",
   "displayName": "org.elasticsearch.index.shard.IndexShardTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.IndexShardTests",
   "children": [
    {
     "id": "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSnapshotStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testAcquireIndexCommit",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testLockTryingToDelete",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDeleteIndexPreventsNewOperations",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testWriteShardState",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearchIsReleaseIfWrapperFails",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromCleanStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverIntoLeftover",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testPersistenceStateMetadataPersistence",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testOperationLocksOnPrimaryShards",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingBufferDuringInternalRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearcherWrapperWorksWithGlobaOrdinals",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testLockingBeforeAndAfterRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromLocalShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testStressMaybeFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testFailIfIndexNotPresentInRecoverFromStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMarkAsInactiveTriggersSyncedFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDelayedOperationsBeforeAndAfterRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoveryFailsAfterMovingToRelocatedState",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingBufferDuringPeerRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMinimumCompatVersion",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testTranslogRecoverySyncsTranslog",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testFailShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardHasMemoryBufferOnTranslogRecover",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexDirIsDeletedWhenShardRemoved",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardStateMetaHashCodeEquals",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexCanChangeCustomDataPath",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testMaybeFlush",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRestoreShard",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testRecoverFromStore",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testStressRelocated",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingOperationListnenersIsInvokedOnRecovery",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testUpdatePriority",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testIndexingOperationsListeners",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testOperationLocksOnReplicaShards",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testExpectedShardSizeIsPresent",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testSearcherWrapperIsUsed",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testShardStats",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testDurableFlagHasEffect",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    },
    {
     "id": "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
     "displayName": "testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
     "methodName": "testAsyncFsync",
     "className": "org.elasticsearch.index.shard.IndexShardTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935868842
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,895][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,923][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,923][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,927][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,930][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:48,930][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,113][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,113][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,114][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[7]}, bound_addresses {local[7]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,129][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{Rger9MjnQACUDTSIPwRuqw}{aLjLYyeZTP6r1aaqxhK6IQ}{local}{local[7]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,130][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,166][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,198][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,352][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,410][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/NZDf5SSDSOW8kykD85TPYw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,906][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSnapshotStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935868886,
  "executionTime": 1052
 }
]

[
 "TEST_STARTED",
 "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:49,953][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,214][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,242][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ZZia0i6ZQ2Gi0Wuk2o1tVQ] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,791][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testAcquireIndexCommit]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAcquireIndexCommit(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935869938,
  "executionTime": 889
 }
]

[
 "TEST_STARTED",
 "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,837][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,916][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,955][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> paths: [[C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\2CgeCZT8QMWL8yUzYKOKtg\\0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:50,966][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testLockTryingToDelete]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLockTryingToDelete(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935870827,
  "executionTime": 178
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,014][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,076][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,122][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDeleteIndexPreventsNewOperations]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexPreventsNewOperations(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935871005,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,232][INFO ][org.elasticsearch.env    ] [ukDkD7M] using [2] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,233][INFO ][org.elasticsearch.env    ] [ukDkD7M] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,339][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testWriteShardState]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteShardState(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935871124,
  "executionTime": 219
 }
]

[
 "TEST_STARTED",
 "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,357][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,458][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:51,484][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/eSBwHrfIQfenx-sMERevFw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:52,280][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearchIsReleaseIfWrapperFails]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchIsReleaseIfWrapperFails(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935871343,
  "executionTime": 975
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:52,337][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:52,405][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:52,427][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/U_ShxTFuSYGtxqSoQxb8ig] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,385][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverFromCleanStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromCleanStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935872318,
  "executionTime": 1096
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,422][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,484][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,504][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/gTAux68LSDe30YmIh33HFA] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,840][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[test/gTAux68LSDe30YmIh33HFA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,895][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,956][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:53,976][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverIntoLeftover]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverIntoLeftover(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935873414,
  "executionTime": 593
 }
]

[
 "TEST_STARTED",
 "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,017][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,070][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,104][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testPersistenceStateMetadataPersistence]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPersistenceStateMetadataPersistence(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935874007,
  "executionTime": 130
 }
]

[
 "TEST_STARTED",
 "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,145][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,210][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,224][WARN ][org.elasticsearch.index.shard] [node_s_0] [test][0] suspect illegal state: trying to move shard from primary mode to replica mode%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,256][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testOperationLocksOnPrimaryShards]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOperationLocksOnPrimaryShards(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935874137,
  "executionTime": 473
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,619][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,673][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,690][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/X1d0X0z0TCCmuV5sd4nlMA] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,760][INFO ][org.elasticsearch.index.shard] [node_s_0] [index][0] [IndexShardTests#testIndexingBufferDuringInternalRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingBufferDuringInternalRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935874611,
  "executionTime": 183
 }
]

[
 "TEST_STARTED",
 "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,803][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,879][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:54,897][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/7UrSQKZ4TOqjDqcxwGY_4Q] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:55,147][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/7UrSQKZ4TOqjDqcxwGY_4Q] update_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,037][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearcherWrapperWorksWithGlobaOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearcherWrapperWorksWithGlobaOrdinals(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935874794,
  "executionTime": 1295
 }
]

[
 "TEST_STARTED",
 "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,099][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,167][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,196][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testLockingBeforeAndAfterRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLockingBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935876089,
  "executionTime": 140
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,240][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,347][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,368][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,429][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index_1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,447][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,520][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index_2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:56,546][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/ZpC7pJAWSBeV9g6H7ImKUA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,009][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index_1/tJjNp1efSgGBKEp1PFUm_g] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,298][INFO ][org.elasticsearch.index.shard] [node_s_0] [index_1][0] [IndexShardTests#testRecoverFromLocalShard]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,326][WARN ][org.elasticsearch.indices] [index_1/tJjNp1efSgGBKEp1PFUm_g] failed to delete index%0D%0Ajava.io.IOException: Could not remove the following files (in the order of attempts):%0A   C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index\\_1.cfs: java.nio.file.AccessDeniedException: C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index\\_1.cfs%0A   C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index\\_0.cfs: java.nio.file.AccessDeniedException: C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index\\_0.cfs%0A   C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index: java.nio.file.DirectoryNotEmptyException: C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0\\index%0A   C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0: java.nio.file.DirectoryNotEmptyException: C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g\\0%0A   C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g: java.nio.file.DirectoryNotEmptyException: C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\tempDir-001\\data\\nodes\\0\\indices\\tJjNp1efSgGBKEp1PFUm_g%0A%0A%09at org.apache.lucene.util.IOUtils.rm(IOUtils.java:323) ~[lucene-core-6.2.0.jar:6.2.0 764d0f19151dbff6f5fcd9fc4b2682cf934590c5 - mike - 2016-08-20 05:39:36]%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectoryUnderLock(NodeEnvironment.java:545) ~[main/:?]%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectorySafe(NodeEnvironment.java:529) ~[main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStoreIfDeletionAllowed(IndicesService.java:638) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStore(IndicesService.java:625) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:513) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:568) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndices(IndicesClusterStateService.java:249) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:183) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:708) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,341][WARN ][org.elasticsearch.indices] [node_s_0] [index_1/tJjNp1efSgGBKEp1PFUm_g] still pending deletes present for shards [[[index_1/tJjNp1efSgGBKEp1PFUm_g]], [[index_1/tJjNp1efSgGBKEp1PFUm_g]][0]] - retrying%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,361][WARN ][org.elasticsearch.indices] [node_s_0] [index_1/tJjNp1efSgGBKEp1PFUm_g] still pending deletes present for shards [[[index_1/tJjNp1efSgGBKEp1PFUm_g]]] - retrying%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromLocalShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935876229,
  "executionTime": 1162
 }
]

[
 "TEST_STARTED",
 "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,400][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,452][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,514][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,516][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:57,533][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/iUTU3PE3TFuFmfyRMZG5hw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,055][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testStressMaybeFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935877391,
  "executionTime": 704
 }
]

[
 "TEST_STARTED",
 "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,105][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,186][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,208][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/c60J3O10T1Sp3V-Dp3weXQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,495][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testFailIfIndexNotPresentInRecoverFromStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailIfIndexNotPresentInRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935878095,
  "executionTime": 433
 }
]

[
 "TEST_STARTED",
 "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,536][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,607][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:58,646][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/P8Dpyi4zRpSTaDkaVBJf2Q] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,170][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMarkAsInactiveTriggersSyncedFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMarkAsInactiveTriggersSyncedFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935878528,
  "executionTime": 677
 }
]

[
 "TEST_STARTED",
 "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,213][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,289][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,360][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDelayedOperationsBeforeAndAfterRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayedOperationsBeforeAndAfterRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935879205,
  "executionTime": 205
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,419][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,629][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,692][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoveryFailsAfterMovingToRelocatedState]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryFailsAfterMovingToRelocatedState(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935879410,
  "executionTime": 320
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,743][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,815][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,837][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/5Pn0O1drRyK22ime_1EK6A] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:37:59,945][INFO ][org.elasticsearch.index.shard] [node_s_0] [index][0] [IndexShardTests#testIndexingBufferDuringPeerRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingBufferDuringPeerRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935879730,
  "executionTime": 308
 }
]

[
 "TEST_STARTED",
 "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,048][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,115][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,133][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/KQpK6NZGSRW8DqRVtCCGWg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,347][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMinimumCompatVersion]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinimumCompatVersion(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935880039,
  "executionTime": 341
 }
]

[
 "TEST_STARTED",
 "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,394][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [testindexfortranslogsync] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,520][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[testindexfortranslogsync][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,586][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [testindexfortranslogsync/7eUE1SwCReGjnpe-Sd8iKg] create_mapping [testtype]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:00,873][INFO ][org.elasticsearch.index.shard] [node_s_0] [testindexfortranslogsync][0] [IndexShardTests#testTranslogRecoverySyncsTranslog]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTranslogRecoverySyncsTranslog(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935880380,
  "executionTime": 612
 }
]

[
 "TEST_STARTED",
 "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,001][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,070][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,209][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testFailShard]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935880993,
  "executionTime": 264
 }
]

[
 "TEST_STARTED",
 "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,266][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,377][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:01,411][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/YrpN2DF7ToCxPaTfmE1ObA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,062][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardHasMemoryBufferOnTranslogRecover]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardHasMemoryBufferOnTranslogRecover(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935881257,
  "executionTime": 1839
 }
]

[
 "TEST_STARTED",
 "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,100][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> idxPath: [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\mrNvoQWLDC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,105][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,243][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,279][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/4gBjN60jS8SC5MxXsCkq2Q] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,657][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> checking that [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\mrNvoQWLDC] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,658][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> found file: [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\mrNvoQWLDC\\0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,658][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> checking that [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\mrNvoQWLDC\\0] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,659][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testIndexDirIsDeletedWhenShardRemoved]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexDirIsDeletedWhenShardRemoved(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935883096,
  "executionTime": 564
 }
]

[
 "TEST_STARTED",
 "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,667][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardStateMetaHashCodeEquals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardStateMetaHashCodeEquals(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935883660,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,674][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> start dir: [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\start-dNRwPDHiyo]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,675][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] -->   end dir: [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\end-CYQFPhEtqe]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,677][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> creating an index with data_path [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\start-dNRwPDHiyo]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,682][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [idx] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,783][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:03,801][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [idx/OIjTJqLRQzi6gT7RdY1iUw] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,044][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> closing the index [idx]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,045][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[idx/OIjTJqLRQzi6gT7RdY1iUw]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,097][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index closed, re-opening...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,101][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[idx/OIjTJqLRQzi6gT7RdY1iUw]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,182][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index re-opened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,276][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,291][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> closing the index [idx]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,291][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[idx/OIjTJqLRQzi6gT7RdY1iUw]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,328][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> moving data on disk [start-dNRwPDHiyo] to [end-CYQFPhEtqe]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,329][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> updating settings...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,362][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> settings updated and files moved, re-opening index%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,362][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[idx/OIjTJqLRQzi6gT7RdY1iUw]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,395][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> index re-opened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,655][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[idx][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,742][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\start-dNRwPDHiyo] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,743][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\end-CYQFPhEtqe] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,743][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> found file: [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\end-CYQFPhEtqe\\0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,744][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] --> checking that [C:\\projects\\team3\\core\\build\\testrun\\test\\J1\\temp\\org.elasticsearch.index.shard.IndexShardTests_9CF13790D965C5A7-001\\lCAfgqcRFN\\end-CYQFPhEtqe\\0] has been cleared%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,745][INFO ][org.elasticsearch.index.shard] [node_s_0] [idx][0] [IndexShardTests#testIndexCanChangeCustomDataPath]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCanChangeCustomDataPath(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935883669,
  "executionTime": 1077
 }
]

[
 "TEST_STARTED",
 "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,757][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,889][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,910][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,911][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [512mb] to [133b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:04,930][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/SvYnbjh5RRquZx3e5Pqt5A] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,556][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> current translog size: [43] num_ops [0] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@5f853560]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,563][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [133b] to [43b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,564][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.flush_threshold_size] from [133b] to [43b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,717][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size after delete: [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@fb18706]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,718][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@3a024723]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,719][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@61cfdde9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,722][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6245ef61]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,726][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@7cae3be9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,735][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@54bd5000]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,752][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [117] num_ops [1] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@4b82efeb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,795][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] --> translog size on iter  : [43] num_ops [0] generation [org.elasticsearch.index.translog.Translog$TranslogGeneration@6f13f1d]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,795][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testMaybeFlush]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaybeFlush(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935884746,
  "executionTime": 1109
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:05,864][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:06,044][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:06,078][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_target] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:06,191][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_target][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:06,220][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/oxMBRRCCREqXqCpnMuvZrQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:06,496][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_target/jSrxiTLLTWe9dj2kINLDzQ] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:07,247][INFO ][org.elasticsearch.index.shard] [node_s_0] [test_target][0] [IndexShardTests#testRestoreShard]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreShard(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935885855,
  "executionTime": 1499
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:07,362][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:07,672][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:07,699][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ISL-BQEGTTeFPkQoqoLuyA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:08,358][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testRecoverFromStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromStore(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935887354,
  "executionTime": 1212
 }
]

[
 "TEST_STARTED",
 "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:08,579][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:08,885][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:08,972][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testStressRelocated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressRelocated(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935888566,
  "executionTime": 441
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,024][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,119][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,180][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/UgCy3swARxS5MA3E04Uszg] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,759][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testIndexingOperationListnenersIsInvokedOnRecovery]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingOperationListnenersIsInvokedOnRecovery(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935889007,
  "executionTime": 785
 }
]

[
 "TEST_STARTED",
 "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,802][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,858][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,897][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testUpdatePriority]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdatePriority(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935889793,
  "executionTime": 142
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,944][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_iol] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:09,996][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_iol][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:10,023][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_iol/48hAueG_SIS3Cg5-GueJqw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:10,736][INFO ][org.elasticsearch.monitor.jvm] [node_s_0] [gc][21] overhead, spent [374ms] collecting in the last [1.2s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,194][INFO ][org.elasticsearch.index.shard] [node_s_0] [test_iol][0] [IndexShardTests#testIndexingOperationsListeners]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingOperationsListeners(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935889936,
  "executionTime": 1304
 }
]

[
 "TEST_STARTED",
 "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,249][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,334][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,381][WARN ][org.elasticsearch.index.shard] [node_s_0] [test][0] suspect illegal state: trying to move shard from primary mode to replica mode%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,394][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] updated shard routing to [test][0], node[Rger9MjnQACUDTSIPwRuqw], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=HgCL_kQhRFOYewUk2ytyWA], unassigned_info[[reason=PRIMARY_FAILED], at[2016-09-15T10:38:11.381Z], delayed=false, details[auto generated for test], allocation_status[no_attempt]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,395][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testOperationLocksOnReplicaShards]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOperationLocksOnReplicaShards(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935891240,
  "executionTime": 259
 }
]

[
 "TEST_STARTED",
 "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,508][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,910][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:11,943][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/gzPy6KEFT_2QZJJpE1NEww] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:13,048][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testExpectedShardSizeIsPresent]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpectedShardSizeIsPresent(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935891499,
  "executionTime": 1604
 }
]

[
 "TEST_STARTED",
 "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:13,112][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:13,194][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:13,215][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/_cvllxzcTamkoBmquJGq3g] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:13,534][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/_cvllxzcTamkoBmquJGq3g] update_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,010][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testSearcherWrapperIsUsed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearcherWrapperIsUsed(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935893103,
  "executionTime": 940
 }
]

[
 "TEST_STARTED",
 "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,052][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,114][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,137][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testShardStats]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
  "message": "Some path weirdness on windows",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: Some path weirdness on windows\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:853B01B247160D3]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeFalse(RandomizedTest.java:635)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeFalse(LuceneTestCase.java:849)\r\n\tat org.elasticsearch.index.shard.IndexShardTests.testShardStats(IndexShardTests.java:803)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: Some path weirdness on windows",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardStats(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935894043,
  "executionTime": 144
 }
]

[
 "TEST_STARTED",
 "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,195][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,285][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,303][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/VTS11BSaT3ydqPHgt88BIA] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,382][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,386][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,406][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,407][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,433][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,434][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,457][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,458][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,569][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,569][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,590][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,591][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,605][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testDurableFlagHasEffect]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDurableFlagHasEffect(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935894187,
  "executionTime": 467
 }
]

[
 "TEST_STARTED",
 "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,662][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,726][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:14,745][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/C0yIajM_QcqCY6dMglbGkg] create_mapping [bar]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:15,051][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] [IndexShardTests#testAsyncFsync]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsyncFsync(org.elasticsearch.index.shard.IndexShardTests)",
  "startTimestamp": 1473935894654,
  "executionTime": 560
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:15,215][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:15,216][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:15,216][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:38:15,219][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.IndexShardTests",
  "startTimestamp": 1473935868842,
  "executionTime": 26484
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.BigArraysTests",
   "displayName": "org.elasticsearch.common.util.BigArraysTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.BigArraysTests",
   "children": [
    {
     "id": "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testLongArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testMaxSizeExceededOnNew",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testObjectArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testLongArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testFloatArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayBulkGet",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testDoubleArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayFill",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testMaxSizeExceededOnResize",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testFloatArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testIntArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayHashCode",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayBulkSet",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testDoubleArrayGrowth",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    },
    {
     "id": "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
     "displayName": "testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
     "methodName": "testByteArrayEquals",
     "className": "org.elasticsearch.common.util.BigArraysTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935895440
 }
]

[
 "TEST_STARTED",
 "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,526][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,561][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,561][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,566][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,568][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,568][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,756][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,757][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,757][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[8]}, bound_addresses {local[8]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,759][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{rWJDUl_iRoiJMCuT3H4Eng}{lacnTYddT1yTVj0fcTRZRQ}{local}{local[8]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,760][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:15,777][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,133][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testLongArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935895515,
  "executionTime": 624
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,147][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 327680 [320kb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,159][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1294336 [1.2mb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,165][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 2572288 [2.4mb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,168][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1294336 [1.2mb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,174][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1286144 [1.2mb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,177][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1294336 [1.2mb] for data of [<reused_arrays>] would be larger than configured breaker: 321273 [313.7kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,177][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testMaxSizeExceededOnNew]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeExceededOnNew(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935896139,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,357][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testObjectArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testObjectArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935896179,
  "executionTime": 179
 }
]

[
 "TEST_STARTED",
 "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,383][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testLongArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935896358,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:16,447][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testFloatArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFloatArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935896385,
  "executionTime": 63
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,803][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayBulkGet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayBulkGet(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935896448,
  "executionTime": 1356
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,833][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testDoubleArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935897805,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,857][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayFill]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayFill(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935897834,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,866][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 2097152 [2mb] for data of [<reused_arrays>] would be larger than configured breaker: 1943580 [1.8mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,872][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 4194304 [4mb] for data of [<reused_arrays>] would be larger than configured breaker: 3841803 [3.6mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,876][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 1572864 [1.5mb] for data of [<reused_arrays>] would be larger than configured breaker: 1321419 [1.2mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,897][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 655360 [640kb] for data of [<reused_arrays>] would be larger than configured breaker: 381953 [373kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,916][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 393216 [384kb] for data of [<reused_arrays>] would be larger than configured breaker: 326670 [319kb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,923][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 7340032 [7mb] for data of [<reused_arrays>] would be larger than configured breaker: 4089983 [3.9mb], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,923][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testMaxSizeExceededOnResize]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeExceededOnResize(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935897858,
  "executionTime": 66
 }
]

[
 "TEST_STARTED",
 "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:17,985][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testFloatArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFloatArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935897925,
  "executionTime": 62
 }
]

[
 "TEST_STARTED",
 "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:18,254][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testIntArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935897987,
  "executionTime": 268
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:18,458][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayHashCode]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayHashCode(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935898255,
  "executionTime": 204
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,091][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935898459,
  "executionTime": 1637
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,188][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayBulkSet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayBulkSet(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935900097,
  "executionTime": 93
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,394][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testDoubleArrayGrowth]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleArrayGrowth(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935900190,
  "executionTime": 205
 }
]

[
 "TEST_STARTED",
 "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,399][INFO ][org.elasticsearch.common.util] [node_s_0] [BigArraysTests#testByteArrayEquals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteArrayEquals(org.elasticsearch.common.util.BigArraysTests)",
  "startTimestamp": 1473935900395,
  "executionTime": 5
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,400][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,401][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,401][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:20,403][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.BigArraysTests",
  "startTimestamp": 1473935895440,
  "executionTime": 4973
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.SuggestBuilderTests",
   "displayName": "org.elasticsearch.search.suggest.SuggestBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testIllegalSuggestionName",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.SuggestBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935900423
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1473935900442,
  "executionTime": 217
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1473935900660,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalSuggestionName(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1473935900663,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.SuggestBuilderTests)",
  "startTimestamp": 1473935900666,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.SuggestBuilderTests",
  "startTimestamp": 1473935900423,
  "executionTime": 312
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.slice.TermsSliceQueryTests",
   "displayName": "org.elasticsearch.search.slice.TermsSliceQueryTests",
   "methodName": null,
   "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
   "children": [
    {
     "id": "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "displayName": "testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "methodName": "testSearch",
     "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "displayName": "testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.search.slice.TermsSliceQueryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935900794
 }
]

[
 "TEST_STARTED",
 "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearch(org.elasticsearch.search.slice.TermsSliceQueryTests)",
  "startTimestamp": 1473935900811,
  "executionTime": 378
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.search.slice.TermsSliceQueryTests)",
  "startTimestamp": 1473935901190,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.slice.TermsSliceQueryTests",
  "startTimestamp": 1473935900794,
  "executionTime": 399
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.support.ScriptValuesTests",
   "displayName": "org.elasticsearch.search.aggregations.support.ScriptValuesTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.support.ScriptValuesTests",
   "children": [
    {
     "id": "ID#testLongs(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "displayName": "testLongs(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "methodName": "testLongs",
     "className": "org.elasticsearch.search.aggregations.support.ScriptValuesTests",
     "children": []
    },
    {
     "id": "ID#testDoubles(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "displayName": "testDoubles(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "methodName": "testDoubles",
     "className": "org.elasticsearch.search.aggregations.support.ScriptValuesTests",
     "children": []
    },
    {
     "id": "ID#testBytes(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "displayName": "testBytes(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
     "methodName": "testBytes",
     "className": "org.elasticsearch.search.aggregations.support.ScriptValuesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935901265
 }
]

[
 "TEST_STARTED",
 "ID#testLongs(org.elasticsearch.search.aggregations.support.ScriptValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongs(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
  "startTimestamp": 1473935901347,
  "executionTime": 134
 }
]

[
 "TEST_STARTED",
 "ID#testDoubles(org.elasticsearch.search.aggregations.support.ScriptValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubles(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
  "startTimestamp": 1473935901485,
  "executionTime": 80
 }
]

[
 "TEST_STARTED",
 "ID#testBytes(org.elasticsearch.search.aggregations.support.ScriptValuesTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBytes(org.elasticsearch.search.aggregations.support.ScriptValuesTests)",
  "startTimestamp": 1473935901566,
  "executionTime": 103
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.support.ScriptValuesTests",
  "startTimestamp": 1473935901265,
  "executionTime": 438
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.NestedQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.NestedQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
   "children": [
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testValidate",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.NestedQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935901748
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:21,854][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{1k9gn9XuQXeihYp8rxf6iQ}{local}{local[156]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:21,865][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:21,870][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,145][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,145][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,145][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,154][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,154][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,154][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,159][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,159][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,159][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,162][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,162][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,162][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,170][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,170][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,171][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,176][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,176][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,176][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,181][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,181][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,181][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,184][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,184][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,184][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,188][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,188][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,189][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,191][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,191][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,191][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,194][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,194][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-14T23:38:22,194][WARN ][org.elasticsearch.deprecation.index.mapper]  [FeHCwT] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935901829,
  "executionTime": 385
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902214,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902237,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902241,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902251,
  "executionTime": 186
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902437,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902440,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902453,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidate(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902456,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902460,
  "executionTime": 49
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.NestedQueryBuilderTests)",
  "startTimestamp": 1473935902510,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.NestedQueryBuilderTests",
  "startTimestamp": 1473935901748,
  "executionTime": 770
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "displayName": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
   "children": [
    {
     "id": "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testRegisterCustomBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    },
    {
     "id": "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testBreakerSettingsValidationWithValidSettings",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    },
    {
     "id": "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "displayName": "testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
     "methodName": "testBreakerSettingsValidationNegativeOverhead",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935902545
 }
]

[
 "TEST_STARTED",
 "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegisterCustomBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1473935902563,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerSettingsValidationWithValidSettings(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1473935902567,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerSettingsValidationNegativeOverhead(org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests)",
  "startTimestamp": 1473935902570,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerUnitTests",
  "startTimestamp": 1473935902545,
  "executionTime": 28
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
   "displayName": "org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
   "children": [
    {
     "id": "ID#testAddExtraChildTypePointingToAlreadyParentExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
     "displayName": "testAddExtraChildTypePointingToAlreadyParentExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
     "methodName": "testAddExtraChildTypePointingToAlreadyParentExistingType",
     "className": "org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
     "children": []
    },
    {
     "id": "ID#testAddChildTypePointingToAlreadyExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
     "displayName": "testAddChildTypePointingToAlreadyExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
     "methodName": "testAddChildTypePointingToAlreadyExistingType",
     "className": "org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935902738
 }
]

[
 "TEST_STARTED",
 "ID#testAddExtraChildTypePointingToAlreadyParentExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,821][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,847][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,847][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,851][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,854][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,854][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,976][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,976][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,977][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[9]}, bound_addresses {local[9]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,982][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{LIgrM-LpTR6Lwuw3p07Kuw}{WFhFA9Y0Tje9rHGSUuEbMg}{local}{local[9]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:22,987][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,012][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,040][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [parent, child1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,103][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,124][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/bm8hQLt2Scuvylp5miXzBA] create_mapping [child2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,152][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [MetaDataMappingServiceTests#testAddExtraChildTypePointingToAlreadyParentExistingType]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddExtraChildTypePointingToAlreadyParentExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
  "startTimestamp": 1473935902749,
  "executionTime": 435
 }
]

[
 "TEST_STARTED",
 "ID#testAddChildTypePointingToAlreadyExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,197][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,256][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,274][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [MetaDataMappingServiceTests#testAddChildTypePointingToAlreadyExistingType]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddChildTypePointingToAlreadyExistingType(org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests)",
  "startTimestamp": 1473935903184,
  "executionTime": 115
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,300][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,301][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,302][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:23,304][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.MetaDataMappingServiceTests",
  "startTimestamp": 1473935902738,
  "executionTime": 572
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
   "children": [
    {
     "id": "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
     "displayName": "testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
     "methodName": "testRebalanceOnlyAfterAllShardsAreActive",
     "className": "org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935903503
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,724][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,725][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start two nodes and fully start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,726][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start all the primary shards, replicas will start initializing%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,727][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] now, start 8 more nodes, and check that no rebalancing/relocation have happened%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,729][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] start the replica shards, rebalancing should start%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,737][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][3], [test][4], [test][2], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,737][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete relocation, other half of relocation should happen%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:38:23,752][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] complete relocation, that's it!%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceOnlyAfterAllShardsAreActive(org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests)",
  "startTimestamp": 1473935903623,
  "executionTime": 130
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.RebalanceAfterActiveTests",
  "startTimestamp": 1473935903503,
  "executionTime": 254
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "displayName": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935903763
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1473935903815,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1473935903818,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.search.suggest.completion.FuzzyOptionsTests)",
  "startTimestamp": 1473935903820,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.completion.FuzzyOptionsTests",
  "startTimestamp": 1473935903763,
  "executionTime": 65
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "displayName": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
   "children": [
    {
     "id": "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testMissingShard",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    },
    {
     "id": "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "displayName": "testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
     "methodName": "testAddingAClosedReader",
     "className": "org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935903895
 }
]

[
 "TEST_STARTED",
 "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingShard(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1473935903999,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1473935904092,
  "executionTime": 1390
 }
]

[
 "TEST_STARTED",
 "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddingAClosedReader(org.elasticsearch.common.lucene.ShardCoreKeyMapTests)",
  "startTimestamp": 1473935905483,
  "executionTime": 110
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.ShardCoreKeyMapTests",
  "startTimestamp": 1473935903895,
  "executionTime": 1700
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "displayName": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
   "children": [
    {
     "id": "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testRemainingDelayCalculation",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testReplicaAdded",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testStateTransitionMetaHandling",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testReasonOrdinalOrder",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNewIndexRestored",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testAllocationStatusSerialization",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testIndexCreated",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testExistingIndexRestored",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNodeLeave",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testNumberOfDelayedUnassigned",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testFindNextDelayedAllocation",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testFailedShard",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testClusterRecovered",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testIndexReopened",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    },
    {
     "id": "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "displayName": "testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
     "methodName": "testDanglingIndexImported",
     "className": "org.elasticsearch.cluster.routing.UnassignedInfoTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935905662
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingDelayCalculation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905682,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,699][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaAdded(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905685,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStateTransitionMetaHandling(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905702,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReasonOrdinalOrder(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905704,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905707,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllocationStatusSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905709,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCreated(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905712,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingIndexRestored(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905714,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905723,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,734][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,735][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeLeave(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905725,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,749][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,750][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumberOfDelayedUnassigned(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905735,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,764][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,765][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFindNextDelayedAllocation(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905751,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,776][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:25,781][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedShard(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905765,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterRecovered(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905782,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexReopened(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905784,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDanglingIndexImported(org.elasticsearch.cluster.routing.UnassignedInfoTests)",
  "startTimestamp": 1473935905786,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.UnassignedInfoTests",
  "startTimestamp": 1473935905662,
  "executionTime": 129
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.PatternAnalyzerTests",
   "displayName": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
   "children": [
    {
     "id": "ID#testCustomPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "displayName": "testCustomPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "methodName": "testCustomPattern",
     "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testWhitespacePattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "displayName": "testWhitespacePattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "methodName": "testWhitespacePattern",
     "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testNonWordPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "displayName": "testNonWordPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "methodName": "testNonWordPattern",
     "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testRandomStrings(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "displayName": "testRandomStrings(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "methodName": "testRandomStrings",
     "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testHugeDocument(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "displayName": "testHugeDocument(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
     "methodName": "testHugeDocument",
     "className": "org.elasticsearch.index.analysis.PatternAnalyzerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935905827
 }
]

[
 "TEST_STARTED",
 "ID#testCustomPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
  "startTimestamp": 1473935905857,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testWhitespacePattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWhitespacePattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
  "startTimestamp": 1473935905861,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNonWordPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonWordPattern(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
  "startTimestamp": 1473935905864,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRandomStrings(org.elasticsearch.index.analysis.PatternAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomStrings(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
  "startTimestamp": 1473935905867,
  "executionTime": 2640
 }
]

[
 "TEST_STARTED",
 "ID#testHugeDocument(org.elasticsearch.index.analysis.PatternAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHugeDocument(org.elasticsearch.index.analysis.PatternAnalyzerTests)",
  "startTimestamp": 1473935908507,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.PatternAnalyzerTests",
  "startTimestamp": 1473935905827,
  "executionTime": 2690
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "displayName": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
   "children": [
    {
     "id": "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "displayName": "testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "methodName": "testFilterByFrequency",
     "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "displayName": "testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.fielddata.FilterFieldDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935908658
 }
]

[
 "TEST_STARTED",
 "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,762][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,789][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,789][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,794][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,797][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:28,797][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,061][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,061][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,062][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[10]}, bound_addresses {local[10]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,070][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{bL3iCB4mQW2H1wdAXp7AfA}{wiXa6K0DSKqtCV4RdKYMMA}{local}{local[10]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,071][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,086][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,114][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,263][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,324][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [FilterFieldDataTests#testFilterByFrequency]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterByFrequency(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "startTimestamp": 1473935908752,
  "executionTime": 603
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,366][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,546][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,562][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [FilterFieldDataTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "message": "No need to test empty usage here",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: No need to test empty usage here\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:5B4D19F24B368D44]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.index.fielddata.FilterFieldDataTests.testEmpty(FilterFieldDataTests.java:122)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: No need to test empty usage here",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.FilterFieldDataTests)",
  "startTimestamp": 1473935909356,
  "executionTime": 275
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,631][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,632][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,632][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:38:29,638][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.FilterFieldDataTests",
  "startTimestamp": 1473935908658,
  "executionTime": 988
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "displayName": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "methodName": null,
   "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
   "children": [
    {
     "id": "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    },
    {
     "id": "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolIsBounded",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    },
    {
     "id": "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "displayName": "testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
     "methodName": "testScalingThreadPoolConfiguration",
     "className": "org.elasticsearch.threadpool.ScalingThreadPoolTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935909716
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolThreadsAreTerminatedAfterKeepAlive(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1473935909752,
  "executionTime": 151
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolIsBounded(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1473935909903,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScalingThreadPoolConfiguration(org.elasticsearch.threadpool.ScalingThreadPoolTests)",
  "startTimestamp": 1473935910014,
  "executionTime": 111
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.threadpool.ScalingThreadPoolTests",
  "startTimestamp": 1473935909716,
  "executionTime": 421
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
   "children": [
    {
     "id": "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testAverageUsage",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testUnknownDiskUsage",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThreshold",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testFreeDiskPercentageAfterShardAssigned",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testForSingleDataNode",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThresholdWithShardSizes",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testCanRemainWithShardRelocatingAway",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testShardRelocationsTakenIntoAccount",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    },
    {
     "id": "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "displayName": "testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
     "methodName": "testDiskThresholdWithAbsoluteSizes",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935910187
 }
]

[
 "TEST_STARTED",
 "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAverageUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910207,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,246][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,249][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,249][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,249][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,250][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,250][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 1, unassigned: 0, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,251][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node1], [P], s[STARTED], a[id=X6aymmC8Qg2Tj4NV6kRcYg]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownDiskUsage(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910211,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,275][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding two nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,275][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,276][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 1, unassigned: 1, initializing: 1, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,276][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.275Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=nwFqW-4HTMGkbo5Hs-uv5g], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.275Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,276][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,276][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 1, unassigned: 1, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.275Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 1, unassigned: 1, initializing: 0, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.275Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,277][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 0, initializing: 1, relocating: 0, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=4Jga_wimRFiRKHJCZUrZhQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.275Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,278][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,279][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g], [test][0], node[node3], [R], s[STARTED], a[id=4Jga_wimRFiRKHJCZUrZhQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,279][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> changing decider settings%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,282][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,283][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,283][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g], [test][0], node[node3], [R], s[STARTED], a[id=4Jga_wimRFiRKHJCZUrZhQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,283][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> changing settings again%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,287][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,287][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,287][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=nwFqW-4HTMGkbo5Hs-uv5g], [test][0], node[node3], [R], s[STARTED], a[id=4Jga_wimRFiRKHJCZUrZhQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,287][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,287][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,288][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 1, relocating: 1, started: 1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,288][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node4], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=lqjG8QPgTaq3Y6E2O-f42g, rId=nwFqW-4HTMGkbo5Hs-uv5g], expected_shard_size[10]], relocating: [[test][0], node[node2], relocating [node4], [P], s[RELOCATING], a[id=nwFqW-4HTMGkbo5Hs-uv5g, rId=lqjG8QPgTaq3Y6E2O-f42g], expected_shard_size[10]], started: [[test][0], node[node3], [R], s[STARTED], a[id=4Jga_wimRFiRKHJCZUrZhQ]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,288][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,288][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,289][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 0, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,289][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=lqjG8QPgTaq3Y6E2O-f42g], [test][0], node[node3], [R], s[STARTED], a[id=4Jga_wimRFiRKHJCZUrZhQ]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThreshold(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910251,
  "executionTime": 38
 }
]

[
 "TEST_STARTED",
 "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeDiskPercentageAfterShardAssigned(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910289,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,322][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding one master node, one data node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,343][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,343][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,343][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testForSingleDataNode(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910318,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,392][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][WARN ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] after allocating, node [node1] would have more than the allowed 29%25 free disk threshold (21%25 free), preventing allocation%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 0, unassigned: 1, initializing: 0, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,393][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [P], recovery_source[new shard recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.392Z], delayed=false, allocation_status[deciders_no]]], initializing: [], relocating: [], started: []%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThresholdWithShardSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910344,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,407][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanRemainWithShardRelocatingAway(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910394,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,421][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding two nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,422][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,422][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 4, unassigned: 0, initializing: 4, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,422][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=0xMFkmx4TiOInPwyl9gtDQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.421Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[14], [test2][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=OJGlVuszS6mpJ0522FAC1w], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.421Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[1], [test][0], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=fAukr2fTTEaYdCGfvlL3gQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.421Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[14], [test2][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=CK3rRAksRBGVk9xWNVMe7A], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.421Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[1]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,423][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,423][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,423][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0], [test2][0], [test][0], [test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,423][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 4, unassigned: 0, initializing: 0, relocating: 0, started: 4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,423][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [R], s[STARTED], a[id=0xMFkmx4TiOInPwyl9gtDQ], [test2][0], node[node2], [P], s[STARTED], a[id=OJGlVuszS6mpJ0522FAC1w], [test][0], node[node1], [P], s[STARTED], a[id=fAukr2fTTEaYdCGfvlL3gQ], [test2][0], node[node1], [R], s[STARTED], a[id=CK3rRAksRBGVk9xWNVMe7A]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,424][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,424][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,426][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 5, unassigned: 0, initializing: 1, relocating: 1, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,426][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node3], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=mTUPOkWCSai8DcsscHRpgQ, rId=0xMFkmx4TiOInPwyl9gtDQ], expected_shard_size[14]], relocating: [[test][0], node[node2], relocating [node3], [R], s[RELOCATING], a[id=0xMFkmx4TiOInPwyl9gtDQ, rId=mTUPOkWCSai8DcsscHRpgQ], expected_shard_size[14]], started: [[test2][0], node[node2], [P], s[STARTED], a[id=OJGlVuszS6mpJ0522FAC1w], [test][0], node[node1], [P], s[STARTED], a[id=fAukr2fTTEaYdCGfvlL3gQ], [test2][0], node[node1], [R], s[STARTED], a[id=CK3rRAksRBGVk9xWNVMe7A]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,426][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardRelocationsTakenIntoAccount(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910408,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,447][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node1 and node2 node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,447][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,448][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 1, unassigned: 2, initializing: 1, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,448][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]], [test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=kQlIoJN6Rsyiy0TCzk2jxA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,448][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> nodeWithPrimary: node2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,448][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> nodeWithoutPrimary: node1%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,474][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,474][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 1, initializing: 2, relocating: 0, started: 0%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,475][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]]], initializing: [[test][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=kQlIoJN6Rsyiy0TCzk2jxA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10], [test][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=yqaLYU0ARkC_dzMKptM9vg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,475][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,475][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,477][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 2, unassigned: 1, initializing: 0, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,477][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [[test][0], node[null], [R], recovery_source[peer recovery], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]]], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=kQlIoJN6Rsyiy0TCzk2jxA], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,477][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,477][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,478][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 1, relocating: 0, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,478][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=5M2cZ21WRk66dsjHkcMYew], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:30.445Z], delayed=false, allocation_status[no_attempt]], expected_shard_size[10]], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=kQlIoJN6Rsyiy0TCzk2jxA], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,478][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> start the shards (replicas)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,478][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,479][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,481][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,481][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=kQlIoJN6Rsyiy0TCzk2jxA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,481][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> changing decider settings%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,489][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,490][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,494][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=kQlIoJN6Rsyiy0TCzk2jxA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,494][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> changing settings again%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,499][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,499][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,499][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node2], [P], s[STARTED], a[id=kQlIoJN6Rsyiy0TCzk2jxA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,499][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node4%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,500][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,500][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 4, unassigned: 0, initializing: 1, relocating: 1, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,500][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node4], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=16tzqr5NRCCd-zChjGilDA, rId=kQlIoJN6Rsyiy0TCzk2jxA], expected_shard_size[10]], relocating: [[test][0], node[node2], relocating [node4], [P], s[RELOCATING], a[id=kQlIoJN6Rsyiy0TCzk2jxA, rId=16tzqr5NRCCd-zChjGilDA], expected_shard_size[10]], started: [[test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,500][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,501][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,501][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,502][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=16tzqr5NRCCd-zChjGilDA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew], [test][0], node[node1], [R], s[STARTED], a[id=yqaLYU0ARkC_dzMKptM9vg]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,502][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> adding node5%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,502][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,502][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 4, unassigned: 0, initializing: 1, relocating: 1, started: 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,511][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [[test][0], node[node5], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=XnVb9Rk3TLqZR__xbca3yA, rId=yqaLYU0ARkC_dzMKptM9vg], expected_shard_size[10]], relocating: [[test][0], node[node1], relocating [node5], [R], s[RELOCATING], a[id=yqaLYU0ARkC_dzMKptM9vg, rId=XnVb9Rk3TLqZR__xbca3yA], expected_shard_size[10]], started: [[test][0], node[node4], [P], s[STARTED], a[id=16tzqr5NRCCd-zChjGilDA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,511][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> apply INITIALIZING shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,511][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> calling fake getClusterInfo%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,512][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> final cluster state:%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,512][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> counts: total: 3, unassigned: 0, initializing: 0, relocating: 0, started: 3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,512][INFO ][org.elasticsearch.cluster.routing.allocation.decider] [node_s_0] --> unassigned: [], initializing: [], relocating: [], started: [[test][0], node[node4], [P], s[STARTED], a[id=16tzqr5NRCCd-zChjGilDA], [test][0], node[node5], [R], s[STARTED], a[id=XnVb9Rk3TLqZR__xbca3yA], [test][0], node[node3], [R], s[STARTED], a[id=5M2cZ21WRk66dsjHkcMYew]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiskThresholdWithAbsoluteSizes(org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests)",
  "startTimestamp": 1473935910427,
  "executionTime": 85
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDeciderTests",
  "startTimestamp": 1473935910187,
  "executionTime": 330
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "displayName": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
   "children": [
    {
     "id": "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testAll",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testMultipleWildcards",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsOpenClosedIndicesTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "displayName": "testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
     "methodName": "testConvertWildcardsJustIndicesTests",
     "className": "org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935910555
 }
]

[
 "TEST_STARTED",
 "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAll(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1473935910572,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleWildcards(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1473935910575,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsOpenClosedIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1473935910581,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1473935910585,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConvertWildcardsJustIndicesTests(org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests)",
  "startTimestamp": 1473935910588,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.WildcardExpressionResolverTests",
  "startTimestamp": 1473935910555,
  "executionTime": 47
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.CommitPointsTests",
   "displayName": "org.elasticsearch.index.shard.CommitPointsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.CommitPointsTests",
   "children": [
    {
     "id": "ID#testCommitPointXContent(org.elasticsearch.index.shard.CommitPointsTests)",
     "displayName": "testCommitPointXContent(org.elasticsearch.index.shard.CommitPointsTests)",
     "methodName": "testCommitPointXContent",
     "className": "org.elasticsearch.index.shard.CommitPointsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935910621
 }
]

[
 "TEST_STARTED",
 "ID#testCommitPointXContent(org.elasticsearch.index.shard.CommitPointsTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:30,728][INFO ][org.elasticsearch.index.shard] [node_s_0] [test][0] serialized commit_point {%0A  \"version\" : 1,%0A  \"name\" : \"test\",%0A  \"type\" : \"GENERATED\",%0A  \"index_files\" : {%0A    \"file1\" : {%0A      \"physical_name\" : \"file1_p\",%0A      \"length\" : 100,%0A      \"checksum\" : \"ck1\"%0A    },%0A    \"file2\" : {%0A      \"physical_name\" : \"file2_p\",%0A      \"length\" : 200,%0A      \"checksum\" : \"ck2\"%0A    }%0A  },%0A  \"translog_files\" : {%0A    \"t_file1\" : {%0A      \"physical_name\" : \"t_file1_p\",%0A      \"length\" : 100%0A    },%0A    \"t_file2\" : {%0A      \"physical_name\" : \"t_file2_p\",%0A      \"length\" : 200%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCommitPointXContent(org.elasticsearch.index.shard.CommitPointsTests)",
  "startTimestamp": 1473935910681,
  "executionTime": 49
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.CommitPointsTests",
  "startTimestamp": 1473935910621,
  "executionTime": 110
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.CompoundProcessorTests",
   "displayName": "org.elasticsearch.ingest.CompoundProcessorTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.CompoundProcessorTests",
   "children": [
    {
     "id": "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFailInOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithException",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessor",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFailWithoutOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testBreakOnFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testIgnoreFailure",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithOnFailureProcessor",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testSingleProcessorWithNestedFailures",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    },
    {
     "id": "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
     "displayName": "testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
     "methodName": "testCompoundProcessorExceptionFail",
     "className": "org.elasticsearch.ingest.CompoundProcessorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935910768
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFailInOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910787,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithException(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910798,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910800,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFailWithoutOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910802,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakOnFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910806,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreFailure(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910809,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithOnFailureProcessor(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910812,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleProcessorWithNestedFailures(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910816,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910819,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompoundProcessorExceptionFail(org.elasticsearch.ingest.CompoundProcessorTests)",
  "startTimestamp": 1473935910821,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.CompoundProcessorTests",
  "startTimestamp": 1473935910768,
  "executionTime": 58
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "displayName": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
   "children": [
    {
     "id": "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeObjectDynamic",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "test1Merge",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeObjectAndNested",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testMergeSearchAnalyzer",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testDoNotRepeatOriginalMapping",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testChangeSearchAnalyzerToDefault",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    },
    {
     "id": "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "displayName": "testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
     "methodName": "testConcurrentMergeTest",
     "className": "org.elasticsearch.index.mapper.DocumentMapperMergeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935910915
 }
]

[
 "TEST_STARTED",
 "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,945][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,990][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,990][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,994][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,997][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:30,997][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,210][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,211][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,211][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[11]}, bound_addresses {local[11]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,247][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{bDUwrjIHTNidin6qhi_7sg}{Boq-NzYxSoev7vXCTD6aeA}{local}{local[11]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,247][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,302][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,323][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,384][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,403][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeObjectDynamic]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeObjectDynamic(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935910936,
  "executionTime": 540
 }
]

[
 "TEST_STARTED",
 "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,485][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,607][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,625][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#test1Merge]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#test1Merge(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935911477,
  "executionTime": 191
 }
]

[
 "TEST_STARTED",
 "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,688][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,803][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,829][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeObjectAndNested]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeObjectAndNested(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935911668,
  "executionTime": 248
 }
]

[
 "TEST_STARTED",
 "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:31,937][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,028][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,129][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testMergeSearchAnalyzer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeSearchAnalyzer(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935911916,
  "executionTime": 250
 }
]

[
 "TEST_STARTED",
 "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,174][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,243][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,265][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testDoNotRepeatOriginalMapping]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoNotRepeatOriginalMapping(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935912166,
  "executionTime": 136
 }
]

[
 "TEST_STARTED",
 "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,310][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,394][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,412][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testChangeSearchAnalyzerToDefault]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeSearchAnalyzerToDefault(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935912303,
  "executionTime": 157
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,468][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:32,523][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:35,847][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [DocumentMapperMergeTests#testConcurrentMergeTest]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentMergeTest(org.elasticsearch.index.mapper.DocumentMapperMergeTests)",
  "startTimestamp": 1473935912460,
  "executionTime": 3514
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:35,974][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:35,975][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:35,975][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:35,979][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.DocumentMapperMergeTests",
  "startTimestamp": 1473935910915,
  "executionTime": 5072
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.IndexServiceTests",
   "displayName": "org.elasticsearch.index.IndexServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.index.IndexServiceTests",
   "children": [
    {
     "id": "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testAliasFilters",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testBaseAsyncTask",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRescheduleAsyncFsync",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testAsyncFsyncActuallyWorks",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testUnknownAliasFilter",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testFsyncTaskIsRunning",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testIllegalFsyncInterval",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRefreshTaskIsUpdated",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testFilteringAliases",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testDetermineShadowEngineShouldBeUsed",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRefreshActuallyWorks",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    },
    {
     "id": "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "displayName": "testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
     "methodName": "testRemovedAliasFilter",
     "className": "org.elasticsearch.index.IndexServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935916129
 }
]

[
 "TEST_STARTED",
 "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,199][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,257][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,258][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,262][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,265][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,265][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,613][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,613][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,614][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[12]}, bound_addresses {local[12]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,663][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{pt_EauToRf-G7njlqx6Eyg}{UL4Bm4BJSFmR5Pve6iHS1w}{local}{local[12]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,663][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,689][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,722][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,885][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,914][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testAliasFilters]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAliasFilters(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935916187,
  "executionTime": 771
 }
]

[
 "TEST_STARTED",
 "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:36,970][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,076][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,104][WARN ][org.elasticsearch.index  ] failed to run task org.elasticsearch.index.IndexServiceTests$1@32cab239 - suppressing re-occurring exceptions unless the exception changes%0D%0Ajava.lang.RuntimeException: bar%0A%09at org.elasticsearch.index.IndexServiceTests$1.runInternal(IndexServiceTests.java:176) ~[test/:?]%0A%09at org.elasticsearch.index.IndexService$BaseAsyncTask.run(IndexService.java:785) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,119][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testBaseAsyncTask]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBaseAsyncTask(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935916959,
  "executionTime": 193
 }
]

[
 "TEST_STARTED",
 "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,160][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,254][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,269][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,275][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/GD5HF77XS-uC0a1fgOWDEA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,276][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [ASYNC] to [REQUEST]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,303][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.translog.durability] from [REQUEST] to [ASYNC]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,303][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRescheduleAsyncFsync]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRescheduleAsyncFsync(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935917152,
  "executionTime": 221
 }
]

[
 "TEST_STARTED",
 "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,380][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,438][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,469][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/-fCHmNW6RUW8IUaI7B4BCw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,494][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testAsyncFsyncActuallyWorks]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsyncFsyncActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935917373,
  "executionTime": 178
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,569][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,631][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,692][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testUnknownAliasFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownAliasFilter(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935917551,
  "executionTime": 175
 }
]

[
 "TEST_STARTED",
 "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,734][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,794][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,855][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,873][WARN ][org.elasticsearch.indices.cluster] [[test][0]] marking and sending shard failed due to [master marked shard as active, but shard has not been created, mark shard as failed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,873][WARN ][org.elasticsearch.cluster.action.shard] [test][0] received shard failed for shard id [[test][0]], allocation id [ivXLP17gTlK4B215iL-BHA], primary term [0], message [master marked shard as active, but shard has not been created, mark shard as failed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:37,928][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,120][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testFsyncTaskIsRunning]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,132][WARN ][org.elasticsearch.indices] [test/eODOr9gcQGGr9_GgdPCY2Q] failed to delete index%0D%0Aorg.elasticsearch.env.ShardLockObtainFailedException: [test][0]: obtaining shard lock timed out after 0ms%0A%09at org.elasticsearch.env.NodeEnvironment$InternalShardLock.acquire(NodeEnvironment.java:711) ~[main/:?]%0A%09at org.elasticsearch.env.NodeEnvironment.shardLock(NodeEnvironment.java:630) ~[main/:?]%0A%09at org.elasticsearch.env.NodeEnvironment.lockAllForIndex(NodeEnvironment.java:576) ~[main/:?]%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectorySafe(NodeEnvironment.java:527) ~[main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStoreIfDeletionAllowed(IndicesService.java:638) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStore(IndicesService.java:625) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:513) [main/:?]%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:568) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndices(IndicesClusterStateService.java:249) [main/:?]%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:183) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:708) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFsyncTaskIsRunning(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935917726,
  "executionTime": 470
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,201][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testIllegalFsyncInterval]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalFsyncInterval(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935918196,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,210][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,348][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,418][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,418][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [-1] to [100ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,419][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [100ms] to [200ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,448][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRefreshTaskIsUpdated]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshTaskIsUpdated(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935918202,
  "executionTime": 289
 }
]

[
 "TEST_STARTED",
 "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,499][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,566][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,583][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testFilteringAliases]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilteringAliases(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935918491,
  "executionTime": 127
 }
]

[
 "TEST_STARTED",
 "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,621][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testDetermineShadowEngineShouldBeUsed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDetermineShadowEngineShouldBeUsed(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935918618,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,630][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,711][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,734][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,737][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/UUaERHAxQk2cDVYHVk7BeA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,738][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [-1] to [1s]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:38,768][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [index.refresh_interval] from [1s] to [1ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,032][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRefreshActuallyWorks]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshActuallyWorks(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935918622,
  "executionTime": 441
 }
]

[
 "TEST_STARTED",
 "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,069][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,127][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,150][INFO ][org.elasticsearch.index  ] [node_s_0] [IndexServiceTests#testRemovedAliasFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemovedAliasFilter(org.elasticsearch.index.IndexServiceTests)",
  "startTimestamp": 1473935919064,
  "executionTime": 134
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,198][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,198][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,199][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:38:39,203][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.IndexServiceTests",
  "startTimestamp": 1473935916129,
  "executionTime": 3093
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.repositories.RepositoryDataTests",
   "displayName": "org.elasticsearch.repositories.RepositoryDataTests",
   "methodName": null,
   "className": "org.elasticsearch.repositories.RepositoryDataTests",
   "children": [
    {
     "id": "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testAddSnapshots",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testXContent",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testEqualsAndHashCode",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testResolveIndexId",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testInitIndices",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    },
    {
     "id": "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
     "displayName": "testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
     "methodName": "testRemoveSnapshot",
     "className": "org.elasticsearch.repositories.RepositoryDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935919230
 }
]

[
 "TEST_STARTED",
 "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddSnapshots(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919246,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testXContent(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919251,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashCode(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919260,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveIndexId(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919262,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInitIndices(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919268,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemoveSnapshot(org.elasticsearch.repositories.RepositoryDataTests)",
  "startTimestamp": 1473935919270,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.repositories.RepositoryDataTests",
  "startTimestamp": 1473935919230,
  "executionTime": 46
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "displayName": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935919363
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1473935919376,
  "executionTime": 353
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1473935919729,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests)",
  "startTimestamp": 1473935919811,
  "executionTime": 169
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.builders.GeometryCollectionBuilderTests",
  "startTimestamp": 1473935919363,
  "executionTime": 620
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ScriptMetaDataTests",
   "displayName": "org.elasticsearch.script.ScriptMetaDataTests",
   "methodName": null,
   "className": "org.elasticsearch.script.ScriptMetaDataTests",
   "children": [
    {
     "id": "ID#testBuilder(org.elasticsearch.script.ScriptMetaDataTests)",
     "displayName": "testBuilder(org.elasticsearch.script.ScriptMetaDataTests)",
     "methodName": "testBuilder",
     "className": "org.elasticsearch.script.ScriptMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testToAndFromXContent(org.elasticsearch.script.ScriptMetaDataTests)",
     "displayName": "testToAndFromXContent(org.elasticsearch.script.ScriptMetaDataTests)",
     "methodName": "testToAndFromXContent",
     "className": "org.elasticsearch.script.ScriptMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testGetScript(org.elasticsearch.script.ScriptMetaDataTests)",
     "displayName": "testGetScript(org.elasticsearch.script.ScriptMetaDataTests)",
     "methodName": "testGetScript",
     "className": "org.elasticsearch.script.ScriptMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testReadFromWriteTo(org.elasticsearch.script.ScriptMetaDataTests)",
     "displayName": "testReadFromWriteTo(org.elasticsearch.script.ScriptMetaDataTests)",
     "methodName": "testReadFromWriteTo",
     "className": "org.elasticsearch.script.ScriptMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testDiff(org.elasticsearch.script.ScriptMetaDataTests)",
     "displayName": "testDiff(org.elasticsearch.script.ScriptMetaDataTests)",
     "methodName": "testDiff",
     "className": "org.elasticsearch.script.ScriptMetaDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935920086
 }
]

[
 "TEST_STARTED",
 "ID#testBuilder(org.elasticsearch.script.ScriptMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuilder(org.elasticsearch.script.ScriptMetaDataTests)",
  "startTimestamp": 1473935920124,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testToAndFromXContent(org.elasticsearch.script.ScriptMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToAndFromXContent(org.elasticsearch.script.ScriptMetaDataTests)",
  "startTimestamp": 1473935920138,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testGetScript(org.elasticsearch.script.ScriptMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetScript(org.elasticsearch.script.ScriptMetaDataTests)",
  "startTimestamp": 1473935920165,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testReadFromWriteTo(org.elasticsearch.script.ScriptMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFromWriteTo(org.elasticsearch.script.ScriptMetaDataTests)",
  "startTimestamp": 1473935920169,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDiff(org.elasticsearch.script.ScriptMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiff(org.elasticsearch.script.ScriptMetaDataTests)",
  "startTimestamp": 1473935920174,
  "executionTime": 18
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ScriptMetaDataTests",
  "startTimestamp": 1473935920086,
  "executionTime": 108
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "displayName": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
   "children": [
    {
     "id": "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
     "displayName": "testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
     "methodName": "testPrimaryTermMetaDataSync",
     "className": "org.elasticsearch.cluster.routing.PrimaryTermsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935920238
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,269][INFO ][org.elasticsearch.cluster.routing] [node_s_0] Setup test with 4 shards and 3 replicas.%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,271][INFO ][org.elasticsearch.cluster.routing] [node_s_0] adding 4 nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,273][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [0], t [0], init shards: [8], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,274][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=SiWAlGH8TWWFvKVv1OBYtA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node3], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=8dqq4rXMR2WpSKaXT4Yk4Q], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node0], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=AaobZlm9SFOs0VFEZb3c6Q], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=zQhhlux3Q_qSoycnAHUoYw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,276][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [4], t [4], init shards: [16], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,276][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[node2], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=LIESMMfvSLqMd3Sy1g0VMA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node3], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=Ka0lxntNSyygNUUQYNwIng], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node0], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=OTbK0evgQYietlmY5dguFA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node1], [P], recovery_source[new shard recovery], s[INITIALIZING], a[id=y9ozqhj9QhiL0A-Nn8FlWw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,278][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [8], init shards: [24], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,278][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][3], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=uKmiWALXTQq4Azq9IWaROw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=wT2GwJ9PTziMPKGvImJieg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=q8WIs8K7RU6R655a93gCwg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=0aG2nwjFS02EmeTQuLcSWA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=Knpc9-i7R8Sw_Kqn5Vx8_A], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=83r-fDwdQ7KcybmOeKLwKA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][3], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=0YKaxHSqSZ2xalGgOOX8Fg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=ulXlCOWRTQyG4oBuH1irFA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=IGs5OWkPR7CcZUaNO8-Img], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][2], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=a5-Qg7M9TNOSabvE2PFWYg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][1], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=sgAaWmC1SUKa_Fy9XatmtQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test1][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=WMLMbGqMTkucWxs2kkSLRw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,292][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [20], init shards: [12], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,293][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][3], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=uR4aGCmVTdCYY-Ma-0mLNA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=6Mx1wxVbQdyni67e8HEOMg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=aMkOUDH6RBOJgwT1Q1wp7A], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=OofXZFb-TMWqwrR26VPF-g], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=gBqVmUWeSwma7ZiuAK0VrQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=5sOl40DoQaugiaL_ViJMNw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][3], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=L7sV7naaSBqMk3nJ9JsWzQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=NaCpAauPQWqqZiolVUe9Dg], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=fY6nYqEJQfmLWr8oFkLFEw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][2], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=AzK1M-svQCSKM_Jq0ZBfMQ], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][1], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=Mw2KNanERXSM-DTwIdcKDA], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]], [test2][0], node[node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=IQ9hgdMUSBWK3C6vwdLUzw], unassigned_info[[reason=INDEX_CREATED], at[2016-09-15T10:38:40.270Z], delayed=false, allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,303][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][3], [test2][2], [test2][1], [test2][3], [test2][2], [test2][0], [test2][3], [test2][1], [test2][0], [test2][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,308][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,308][INFO ][org.elasticsearch.cluster.routing] [node_s_0] adding [9] nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,323][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,323][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,324][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,324][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[extra_1], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=nKSNH1--QJW1SPm_sbyuTQ, rId=5sOl40DoQaugiaL_ViJMNw], [test2][1], node[extra_2], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=ZCwV0x1bSV-mzFjXl0J8fQ, rId=aMkOUDH6RBOJgwT1Q1wp7A]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,328][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,329][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,329][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,329][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[extra_0], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=JaUCw0PdRiCaOx79vbVTrQ, rId=IQ9hgdMUSBWK3C6vwdLUzw], [test2][1], node[extra_5], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=1fECOFsgTqaNvCXdufRaLQ, rId=NaCpAauPQWqqZiolVUe9Dg]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,333][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,333][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[extra_6], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=Zij4qfbnSdK5vvZ84rVMrg, rId=83r-fDwdQ7KcybmOeKLwKA], [test1][1], node[extra_3], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=LmNvfPzSTFaawatgALb8Rg, rId=q8WIs8K7RU6R655a93gCwg]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,340][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,341][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,341][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,341][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[extra_4], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=uSTCjB_XSCC9ZH4tI2CUFQ, rId=WMLMbGqMTkucWxs2kkSLRw], [test1][1], node[extra_7], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=JuYLxnu4SFaLLSuylpV0yQ, rId=ulXlCOWRTQyG4oBuH1irFA]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,345][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,345][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][0], node[extra_6], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=UpyoNsfjSwSOpnQ3diivdg, rId=LIESMMfvSLqMd3Sy1g0VMA], [test2][1], node[extra_8], relocating [node3], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=h3wkDqATQAm8OXIcPR2rIw, rId=Ka0lxntNSyygNUUQYNwIng]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,353][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,353][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,353][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,354][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][1], node[extra_3], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=4t7SGCPMS6C1X9eA8aRUdw, rId=Mw2KNanERXSM-DTwIdcKDA], [test2][0], node[extra_4], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=Z9-1rRQhS6mRVRIAxoW9Sg, rId=fY6nYqEJQfmLWr8oFkLFEw]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,398][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,399][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][1], node[extra_1], relocating [node3], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=ENEnyhBHQiWeO0mATopEGA, rId=8dqq4rXMR2WpSKaXT4Yk4Q], [test1][0], node[extra_2], relocating [node2], [P], recovery_source[peer recovery], s[INITIALIZING], a[id=f2mqmGqwQvmYC_YukFdTGw, rId=SiWAlGH8TWWFvKVv1OBYtA]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,401][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,401][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,402][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,402][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][1], node[extra_0], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=GOtkajYfQNmKmMWFh8pkfw, rId=sgAaWmC1SUKa_Fy9XatmtQ], [test1][0], node[extra_5], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=P5el2ntVRaipbQy9XI5P0A, rId=IGs5OWkPR7CcZUaNO8-Img]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,404][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,404][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [[test2][2], node[extra_7], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=1X5W3dbQQmeVo-bMZFZuwg, rId=gBqVmUWeSwma7ZiuAK0VrQ], [test2][3], node[extra_8], relocating [node2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=wXjH0MC2S32T1hlvzJV98g, rId=uR4aGCmVTdCYY-Ma-0mLNA]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,405][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,405][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][3], node[extra_1], relocating [node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=SbGJ3n9-SjiaHxL6JIdmsQ, rId=0YKaxHSqSZ2xalGgOOX8Fg], [test1][2], node[extra_8], relocating [node1], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=QHZeMMIYR_-lp_0e3GTGyg, rId=a5-Qg7M9TNOSabvE2PFWYg]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,406][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,406][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,406][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,406][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,407][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,409][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,409][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,409][INFO ][org.elasticsearch.cluster.routing] [node_s_0] failing primary shards [0, 2, 3] for index [test1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,411][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test1][0], [test1][2], [test1][3]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,411][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [29], init shards: [3], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,411][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][0], node[node0], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=jc-1WjsvRZuwjO9hxi5yIg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-15T10:38:40.410Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]], [test1][3], node[extra_2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=tuDAI6YJRkOnev6c-bvt0Q], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-15T10:38:40.410Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]], [test1][2], node[extra_2], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=zEcdUfzjTwq3dkDnmtPV9Q], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-09-15T10:38:40.410Z], failed_attempts[1], delayed=false, details[test], allocation_status[no_attempt]]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,412][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0], [test1][3], [test1][2]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,412][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,412][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,413][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,413][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [[test1][2], node[node1], relocating [node3], [R], recovery_source[peer recovery], s[INITIALIZING], a[id=L5zw4fEzT_iyKHq3B3QIyQ, rId=Knpc9-i7R8Sw_Kqn5Vx8_A]] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test1]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] start primary shards for index [test2]: [] %0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:38:40,414][INFO ][org.elasticsearch.cluster.routing] [node_s_0] applied reroute. active shards: p [8], t [32], init shards: [0], relocating: [0]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryTermMetaDataSync(org.elasticsearch.cluster.routing.PrimaryTermsTests)",
  "startTimestamp": 1473935920262,
  "executionTime": 152
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.PrimaryTermsTests",
  "startTimestamp": 1473935920238,
  "executionTime": 179
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.search.SearchRequestBuilderTests",
   "displayName": "org.elasticsearch.action.search.SearchRequestBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
   "children": [
    {
     "id": "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testThatToStringDoesntWipeRequestSource",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testSearchSourceBuilderToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testQueryBuilderQueryToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "displayName": "testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
     "methodName": "testEmptySourceToString",
     "className": "org.elasticsearch.action.search.SearchRequestBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935920462
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:40,538][INFO ][org.elasticsearch.plugins] [_client_] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:40,539][INFO ][org.elasticsearch.plugins] [_client_] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:38:40,748][INFO ][org.elasticsearch.transport] [_client_] publish_address {local[13]}, bound_addresses {local[13]}%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatToStringDoesntWipeRequestSource(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1473935920783,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchSourceBuilderToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1473935920793,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryBuilderQueryToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1473935920796,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptySourceToString(org.elasticsearch.action.search.SearchRequestBuilderTests)",
  "startTimestamp": 1473935920798,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.search.SearchRequestBuilderTests",
  "startTimestamp": 1473935920462,
  "executionTime": 342
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.TimestampFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testValueForSearch(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testValueForSearch(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testValueForSearch",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQueryEmptyReader(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testIsFieldWithinQueryEmptyReader(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testIsFieldWithinQueryEmptyReader",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testValueFormat(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testValueFormat(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testValueFormat",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.TimestampFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935920922
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935920945,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testValueForSearch(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueForSearch(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935920956,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935920958,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQueryEmptyReader(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQueryEmptyReader(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935920964,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935920967,
  "executionTime": 164
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935921131,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935921148,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValueFormat(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueFormat(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935921151,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.TimestampFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.TimestampFieldTypeTests)",
  "startTimestamp": 1473935921176,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.TimestampFieldTypeTests",
  "startTimestamp": 1473935920922,
  "executionTime": 259
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "displayName": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "displayName": "testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
     "methodName": "testIllegalArgument",
     "className": "org.elasticsearch.search.suggest.completion.RegexOptionsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935921188
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1473935921214,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1473935921220,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArgument(org.elasticsearch.search.suggest.completion.RegexOptionsTests)",
  "startTimestamp": 1473935921224,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.completion.RegexOptionsTests",
  "startTimestamp": 1473935921188,
  "executionTime": 40
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.query.QueryPhaseTests",
   "displayName": "org.elasticsearch.search.query.QueryPhaseTests",
   "methodName": null,
   "className": "org.elasticsearch.search.query.QueryPhaseTests",
   "children": [
    {
     "id": "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testPostFilterDisablesCountOptimization",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testMinScoreDisablesCountOptimization",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testCountWithoutDeletions",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    },
    {
     "id": "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "displayName": "testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
     "methodName": "testCountWithDeletions",
     "className": "org.elasticsearch.search.query.QueryPhaseTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935921308
 }
]

[
 "TEST_STARTED",
 "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostFilterDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1473935921343,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinScoreDisablesCountOptimization(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1473935921461,
  "executionTime": 49
 }
]

[
 "TEST_STARTED",
 "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCountWithoutDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1473935921510,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCountWithDeletions(org.elasticsearch.search.query.QueryPhaseTests)",
  "startTimestamp": 1473935921602,
  "executionTime": 40
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.query.QueryPhaseTests",
  "startTimestamp": 1473935921308,
  "executionTime": 344
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
   "children": [
    {
     "id": "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testInvalidBounds",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.HistogramTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935921680
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:38:41,950][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{M7D9JVCnTtmchRQxr-wSEw}{local}{local[207]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidBounds(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1473935921964,
  "executionTime": 203
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1473935922167,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1473935922217,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.HistogramTests)",
  "startTimestamp": 1473935922223,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.HistogramTests",
  "startTimestamp": 1473935921680,
  "executionTime": 550
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
   "children": [
    {
     "id": "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testSingleIndexStartedShard",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testSingleIndexShardFailed",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testMultiIndexUnevenNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    },
    {
     "id": "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "displayName": "testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
     "methodName": "testMultiIndexEvenDistribution",
     "className": "org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935922351
 }
]

[
 "TEST_STARTED",
 "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,439][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,443][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding one node and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,444][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Rerouting again, nothing should change%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,444][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,445][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,445][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Starting another node and making sure nothing changed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,445][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Killing node1 where the shard is, checking the shard is relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,445][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start another node, make sure that things remain the same (shard is in node2 and initializing)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shard on node 2%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,448][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleIndexStartedShard(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1473935922431,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding one node and rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,473][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as failed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,476][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleIndexShardFailed(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1473935922448,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,483][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table with 10 indices%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,486][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Starting 3 nodes and rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,500][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start two more nodes, things should remain the same%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,517][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test9][0], [test6][0], [test3][0], [test0][0], [test2][0], [test5][0], [test8][0], [test4][0], [test1][0], [test7][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,518][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Now, mark the relocated as started%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiIndexUnevenNodes(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1473935922476,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,526][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table with 50 indices%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,530][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding 25 nodes%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,712][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding additional 25 nodes, nothing should change%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,721][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Marking the shard as started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:23:42,736][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test30][0], [test9][0], [test3][0], [test8][0], [test7][0], [test29][0], [test28][0], [test6][0], [test5][0], [test27][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiIndexEvenDistribution(org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests)",
  "startTimestamp": 1473935922519,
  "executionTime": 218
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.SingleShardNoReplicasRoutingTests",
  "startTimestamp": 1473935922351,
  "executionTime": 388
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
   "displayName": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
   "children": [
    {
     "id": "ID#testInverseMappingNoShingles(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "displayName": "testInverseMappingNoShingles(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "methodName": "testInverseMappingNoShingles",
     "className": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testInverseMapping(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "displayName": "testInverseMapping(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "methodName": "testInverseMapping",
     "className": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testFillerToken(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "displayName": "testFillerToken(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "methodName": "testFillerToken",
     "className": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
     "children": []
    },
    {
     "id": "ID#testDefault(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "displayName": "testDefault(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
     "methodName": "testDefault",
     "className": "org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935922788
 }
]

[
 "TEST_STARTED",
 "ID#testInverseMappingNoShingles(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInverseMappingNoShingles(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
  "startTimestamp": 1473935922802,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testInverseMapping(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInverseMapping(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
  "startTimestamp": 1473935922885,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testFillerToken(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFillerToken(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
  "startTimestamp": 1473935922894,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testDefault(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefault(org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests)",
  "startTimestamp": 1473935922905,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.ShingleTokenFilterFactoryTests",
  "startTimestamp": 1473935922788,
  "executionTime": 134
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
   "children": [
    {
     "id": "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
     "displayName": "testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
     "methodName": "testRun",
     "className": "org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935922978
 }
]

[
 "TEST_STARTED",
 "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:38:43,126][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:39:42,884][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[tweets-2014-12-29:00][4], [tweets-2014-12-29:00][3], [tweets-2014-12-29:00][2], [tweets-2014-12-29:00][1], [tweets-2014-12-29:00][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRun(org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests)",
  "startTimestamp": 1473935922996,
  "executionTime": 59889
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.BalanceUnbalancedClusterTests",
  "startTimestamp": 1473935922978,
  "executionTime": 59916
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "displayName": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "methodName": null,
   "className": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
   "children": [
    {
     "id": "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
     "displayName": "testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
     "methodName": "testBuildTable",
     "className": "org.elasticsearch.rest.action.cat.RestIndicesActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935982916
 }
]

[
 "TEST_STARTED",
 "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildTable(org.elasticsearch.rest.action.cat.RestIndicesActionTests)",
  "startTimestamp": 1473935982941,
  "executionTime": 63
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.rest.action.cat.RestIndicesActionTests",
  "startTimestamp": 1473935982916,
  "executionTime": 93
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935983038
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:39:43,051][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{G-AgTACCTcm3_uhYdGlG7w}{local}{local[271]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1473935983061,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1473935983064,
  "executionTime": 103
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests)",
  "startTimestamp": 1473935983167,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.ExtendedStatsTests",
  "startTimestamp": 1473935983038,
  "executionTime": 133
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchServiceTests",
   "displayName": "org.elasticsearch.search.SearchServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchServiceTests",
   "children": [
    {
     "id": "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearIndexDelete",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testSearchWhileIndexDeleted",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearOnStop",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testCloseSearchContextOnRewriteException",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    },
    {
     "id": "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
     "displayName": "testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
     "methodName": "testClearOnClose",
     "className": "org.elasticsearch.search.SearchServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473935983236
 }
]

[
 "TEST_STARTED",
 "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,260][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,277][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,277][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,280][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,282][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,282][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,407][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,408][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,408][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[14]}, bound_addresses {local[14]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,410][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{EKQXa7-WSyGDNK3o1ScONg}{eRIOHxq7TRmuUUf0Ab7xEw}{local}{local[14]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,410][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,424][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,437][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,483][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,498][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/H3apM1FLRnKMXCCVfXaqPQ] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,703][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearIndexDelete]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,704][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,705][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,705][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,709][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,718][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,743][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,743][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,745][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,747][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,747][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,845][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,846][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,847][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[15]}, bound_addresses {local[15]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,866][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{LfO000cOQXCvN5vToQn0fA}{c8rC_yEKRPOOilvpj6eUDw}{local}{local[15]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,867][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,881][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearIndexDelete(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1473935983247,
  "executionTime": 647
 }
]

[
 "TEST_STARTED",
 "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,898][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,947][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:43,961][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/e8oxW1sWSfqBli9YNt6zyQ] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,215][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testSearchWhileIndexDeleted]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,345][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,346][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,346][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,348][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,359][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,376][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,376][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,381][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,383][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,383][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,488][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,488][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,489][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[16]}, bound_addresses {local[16]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,490][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{wJLN5k1FSiWsYWD1gjYY1w}{Ete2nO3XR6OnPmWLsxgW_Q}{local}{local[16]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,490][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,499][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchWhileIndexDeleted(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1473935983894,
  "executionTime": 14621
 }
]

[
 "TEST_STARTED",
 "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,523][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,601][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:58,626][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/OkZ_zonNSnKCnX-V8Gc8_w] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,021][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearOnStop]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,057][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,058][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,058][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,061][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,072][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,097][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,097][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,102][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,105][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,105][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,317][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,318][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,318][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[17]}, bound_addresses {local[17]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,319][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{TYbadLH2STy35c1N9I1I4w}{gdPcnS7bQ1eC5nfTlQ-Jkw}{local}{local[17]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,320][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,333][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearOnStop(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1473935998515,
  "executionTime": 831
 }
]

[
 "TEST_STARTED",
 "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,351][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,398][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,412][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/JCTv64ZWQMGxdQRT-8Lthg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,514][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testCloseSearchContextOnRewriteException]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,545][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,545][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,545][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,546][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,552][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,568][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,568][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,573][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,576][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,576][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,681][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,682][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,682][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[18]}, bound_addresses {local[18]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,683][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{5CPcw6QvRvqOTr9lQiXu6Q}{LL1OJo9BRkKemtedA6k_hA}{local}{local[18]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,684][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,696][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseSearchContextOnRewriteException(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1473935999346,
  "executionTime": 362
 }
]

[
 "TEST_STARTED",
 "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,715][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,761][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,776][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index/8LUOPO1gRoK4qY0q3nXCYg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,935][INFO ][org.elasticsearch.search ] [node_s_0] [SearchServiceTests#testClearOnClose]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,961][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,961][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,961][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,963][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,970][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,985][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,985][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,988][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,990][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:09:59,990][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.search.SearchServiceTests$FailOnRewriteQueryPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,106][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,107][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,108][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[19]}, bound_addresses {local[19]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,122][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{i8iGtYdsQrK6YWz0llbU7w}{SsSyrciGR4m6CouBi4FgAg}{local}{local[19]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,123][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,141][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearOnClose(org.elasticsearch.search.SearchServiceTests)",
  "startTimestamp": 1473935999709,
  "executionTime": 449
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,159][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,159][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,160][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T19:10:00,161][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchServiceTests",
  "startTimestamp": 1473935983236,
  "executionTime": 16978
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "displayName": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
   "children": [
    {
     "id": "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
     "displayName": "testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
     "methodName": "testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown",
     "className": "org.elasticsearch.index.query.CommonTermsQueryParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936000262
 }
]

[
 "TEST_STARTED",
 "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,289][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,322][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,322][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,325][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,329][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,329][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,494][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,495][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,495][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[20]}, bound_addresses {local[20]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,496][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{Bso0Jbv5TW6QeL1NzETnWw}{hcqD0SmcSKiB2ih3jXzr1Q}{local}{local[20]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,496][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,507][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,525][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [test-type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,575][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,591][INFO ][org.elasticsearch.index.query] [CommonTermsQueryParserTests#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown(org.elasticsearch.index.query.CommonTermsQueryParserTests)",
  "startTimestamp": 1473936000280,
  "executionTime": 342
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,622][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,623][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,623][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:40:00,626][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.CommonTermsQueryParserTests",
  "startTimestamp": 1473936000262,
  "executionTime": 372
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.threadpool.ThreadPoolStatsTests",
   "displayName": "org.elasticsearch.threadpool.ThreadPoolStatsTests",
   "methodName": null,
   "className": "org.elasticsearch.threadpool.ThreadPoolStatsTests",
   "children": [
    {
     "id": "ID#testThreadPoolStatsToXContent(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
     "displayName": "testThreadPoolStatsToXContent(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
     "methodName": "testThreadPoolStatsToXContent",
     "className": "org.elasticsearch.threadpool.ThreadPoolStatsTests",
     "children": []
    },
    {
     "id": "ID#testThreadPoolStatsSort(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
     "displayName": "testThreadPoolStatsSort(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
     "methodName": "testThreadPoolStatsSort",
     "className": "org.elasticsearch.threadpool.ThreadPoolStatsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936000661
 }
]

[
 "TEST_STARTED",
 "ID#testThreadPoolStatsToXContent(org.elasticsearch.threadpool.ThreadPoolStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThreadPoolStatsToXContent(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
  "startTimestamp": 1473936000677,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testThreadPoolStatsSort(org.elasticsearch.threadpool.ThreadPoolStatsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThreadPoolStatsSort(org.elasticsearch.threadpool.ThreadPoolStatsTests)",
  "startTimestamp": 1473936000680,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.threadpool.ThreadPoolStatsTests",
  "startTimestamp": 1473936000661,
  "executionTime": 22
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "displayName": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
   "children": [
    {
     "id": "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatInvalidFieldLevelBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    },
    {
     "id": "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatFieldLevelMappingBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    },
    {
     "id": "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "displayName": "testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
     "methodName": "testBackCompatFieldLevelBoost",
     "className": "org.elasticsearch.index.mapper.FieldLevelBoostTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936000721
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,737][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,754][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,754][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,757][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,759][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,759][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,909][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,909][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,910][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[21]}, bound_addresses {local[21]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,917][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{5vpWjim2TJqDHrj-gfws9w}{ewhyWzeeQKOxKHVDT_kZ7Q}{local}{local[21]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,918][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,950][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:00,977][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,751][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,768][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,777][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,777][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,777][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,783][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,788][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,795][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,800][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [FieldLevelBoostTests#testBackCompatInvalidFieldLevelBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatInvalidFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1473936000731,
  "executionTime": 1105
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,852][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,925][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:01,975][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,064][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,106][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [FieldLevelBoostTests#testBackCompatFieldLevelMappingBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatFieldLevelMappingBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1473936001836,
  "executionTime": 383
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,227][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,361][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,376][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,376][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,376][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,376][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,377][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,377][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,377][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,378][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [FieldLevelBoostTests#testBackCompatFieldLevelBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatFieldLevelBoost(org.elasticsearch.index.mapper.FieldLevelBoostTests)",
  "startTimestamp": 1473936002219,
  "executionTime": 210
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,430][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,430][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,430][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:02,432][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.FieldLevelBoostTests",
  "startTimestamp": 1473936000721,
  "executionTime": 1725
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "displayName": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    },
    {
     "id": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "displayName": "testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
     "methodName": "testBuildWordScorer",
     "className": "org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936002452
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1473936002466,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1473936002467,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1473936002469,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuildWordScorer(org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests)",
  "startTimestamp": 1473936002470,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.phrase.LinearInterpolationModelTests",
  "startTimestamp": 1473936002452,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
   "children": [
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testHalfFloatRange",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testConversions",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testTermQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testRangeQuery",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.NumberFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936002496
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936002506,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936002507,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHalfFloatRange(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936002508,
  "executionTime": 1619
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004127,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004132,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConversions(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004135,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004145,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRangeQuery(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004151,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004155,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.NumberFieldTypeTests)",
  "startTimestamp": 1473936004157,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.NumberFieldTypeTests",
  "startTimestamp": 1473936002496,
  "executionTime": 1666
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.snapshots.SnapshotTests",
   "displayName": "org.elasticsearch.snapshots.SnapshotTests",
   "methodName": null,
   "className": "org.elasticsearch.snapshots.SnapshotTests",
   "children": [
    {
     "id": "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
     "displayName": "testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
     "methodName": "testSnapshotEquals",
     "className": "org.elasticsearch.snapshots.SnapshotTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
     "displayName": "testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.snapshots.SnapshotTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004191
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotEquals(org.elasticsearch.snapshots.SnapshotTests)",
  "startTimestamp": 1473936004224,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.snapshots.SnapshotTests)",
  "startTimestamp": 1473936004227,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.snapshots.SnapshotTests",
  "startTimestamp": 1473936004191,
  "executionTime": 40
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
   "children": [
    {
     "id": "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
     "displayName": "testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
     "methodName": "testPrioritizedIndicesAllocatedFirst",
     "className": "org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004268
 }
]

[
 "TEST_STARTED",
 "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrioritizedIndicesAllocatedFirst(org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests)",
  "startTimestamp": 1473936004290,
  "executionTime": 10
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.AllocationPriorityTests",
  "startTimestamp": 1473936004268,
  "executionTime": 36
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.ValueSourceTests",
   "displayName": "org.elasticsearch.ingest.ValueSourceTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.ValueSourceTests",
   "children": [
    {
     "id": "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testDeepCopy",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    },
    {
     "id": "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testCopyDoesNotChangeProvidedMap",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    },
    {
     "id": "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
     "displayName": "testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
     "methodName": "testCopyDoesNotChangeProvidedList",
     "className": "org.elasticsearch.ingest.ValueSourceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004330
 }
]

[
 "TEST_STARTED",
 "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeepCopy(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1473936004363,
  "executionTime": 103
 }
]

[
 "TEST_STARTED",
 "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyDoesNotChangeProvidedMap(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1473936004466,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyDoesNotChangeProvidedList(org.elasticsearch.ingest.ValueSourceTests)",
  "startTimestamp": 1473936004468,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.ValueSourceTests",
  "startTimestamp": 1473936004330,
  "executionTime": 142
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004501
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:40:04,549][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{2lKoShouSIiJBYsUEN7RYQ}{local}{local[274]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1473936004561,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:40:04,568][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"sum_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:40:04,569][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"sum_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1473936004564,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests)",
  "startTimestamp": 1473936004570,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.SumBucketTests",
  "startTimestamp": 1473936004501,
  "executionTime": 75
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
   "children": [
    {
     "id": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testIsFieldWithinQuery",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testValueForSearch",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004611
 }
]

[
 "TEST_STARTED",
 "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIsFieldWithinQuery(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004633,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004636,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004642,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueForSearch(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004645,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004647,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004649,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.LegacyLongFieldTypeTests)",
  "startTimestamp": 1473936004652,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyLongFieldTypeTests",
  "startTimestamp": 1473936004611,
  "executionTime": 51
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.CompoundTypesTests",
   "displayName": "org.elasticsearch.index.mapper.CompoundTypesTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.CompoundTypesTests",
   "children": [
    {
     "id": "ID#testBackCompatStringType(org.elasticsearch.index.mapper.CompoundTypesTests)",
     "displayName": "testBackCompatStringType(org.elasticsearch.index.mapper.CompoundTypesTests)",
     "methodName": "testBackCompatStringType",
     "className": "org.elasticsearch.index.mapper.CompoundTypesTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936004693
 }
]

[
 "TEST_STARTED",
 "ID#testBackCompatStringType(org.elasticsearch.index.mapper.CompoundTypesTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,735][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,787][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,787][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,793][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,796][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:04,796][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,055][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,056][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,057][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[22]}, bound_addresses {local[22]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,059][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{QC-WLP7XT--i5fc7vE0FHQ}{HVtdsLUxStqgSkDy1u9kNw}{local}{local[22]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,059][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,084][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,105][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,163][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,174][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompoundTypesTests#testBackCompatStringType]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackCompatStringType(org.elasticsearch.index.mapper.CompoundTypesTests)",
  "startTimestamp": 1473936004716,
  "executionTime": 484
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,201][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,201][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,201][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:40:05,203][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.CompoundTypesTests",
  "startTimestamp": 1473936004693,
  "executionTime": 517
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "displayName": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
   "children": [
    {
     "id": "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testClose",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testReuse",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testDoubleRelease",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testRecycle",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "displayName": "testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
     "methodName": "testDestroyWhenOverCapacity",
     "className": "org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936005240
 }
]

[
 "TEST_STARTED",
 "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClose(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1473936005255,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuse(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1473936005257,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleRelease(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1473936005259,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecycle(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1473936005261,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.ConcurrentRecyclerTests)",
  "startTimestamp": 1473936005263,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.recycler.ConcurrentRecyclerTests",
  "startTimestamp": 1473936005240,
  "executionTime": 27
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936005286
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:40:05,306][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{Kc4eMVerRBS0KanQiEPqZw}{local}{local[275]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
  "startTimestamp": 1473936005317,
  "executionTime": 58
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
  "startTimestamp": 1473936005375,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.DateHistogramTests)",
  "startTimestamp": 1473936005386,
  "executionTime": 52
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.DateHistogramTests",
  "startTimestamp": 1473936005286,
  "executionTime": 155
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "displayName": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
   "children": [
    {
     "id": "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
     "displayName": "testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
     "methodName": "testKnownValues",
     "className": "org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936005475
 }
]

[
 "TEST_STARTED",
 "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testKnownValues(org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests)",
  "startTimestamp": 1473936005493,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.operation.hash.murmur3.Murmur3HashFunctionTests",
  "startTimestamp": 1473936005475,
  "executionTime": 21
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.ActiveShardCountTests",
   "displayName": "org.elasticsearch.action.support.ActiveShardCountTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.ActiveShardCountTests",
   "children": [
    {
     "id": "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelOne",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testParseString",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testFromIntValue",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveRandom",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelAll",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveZero",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testValidate",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveValueBased",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    },
    {
     "id": "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
     "displayName": "testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
     "methodName": "testEnoughShardsActiveLevelDefault",
     "className": "org.elasticsearch.action.support.ActiveShardCountTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936005535
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelOne(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005553,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseString(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005556,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromIntValue(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005560,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveRandom(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005563,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelAll(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005566,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveZero(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005568,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidate(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005571,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005574,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveValueBased(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005577,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnoughShardsActiveLevelDefault(org.elasticsearch.action.support.ActiveShardCountTests)",
  "startTimestamp": 1473936005581,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.ActiveShardCountTests",
  "startTimestamp": 1473936005535,
  "executionTime": 50
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ActionModuleTests",
   "displayName": "org.elasticsearch.action.ActionModuleTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ActionModuleTests",
   "children": [
    {
     "id": "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCanRegisterAction",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testSetupRestHandlerContainsKnownBuiltin",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCanRegisterRestHandler",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testSetupActionsContainsKnownBuiltin",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCantOverwriteBuiltinAction",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    },
    {
     "id": "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "displayName": "testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
     "methodName": "testPluginCantOverwriteBuiltinRestHandler",
     "className": "org.elasticsearch.action.ActionModuleTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936005625
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCanRegisterAction(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936005658,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetupRestHandlerContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936005689,
  "executionTime": 2235
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCanRegisterRestHandler(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936007924,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetupActionsContainsKnownBuiltin(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936007965,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCantOverwriteBuiltinAction(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936007967,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPluginCantOverwriteBuiltinRestHandler(org.elasticsearch.action.ActionModuleTests)",
  "startTimestamp": 1473936007990,
  "executionTime": 19
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ActionModuleTests",
  "startTimestamp": 1473936005625,
  "executionTime": 2389
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "displayName": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
   "children": [
    {
     "id": "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "displayName": "testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "methodName": "testNestedSorting",
     "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "displayName": "testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.search.nested.FloatNestedSortingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936008045
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,074][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,110][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,110][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,115][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,118][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,118][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,260][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,260][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,261][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[23]}, bound_addresses {local[23]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,262][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{LChEVGZeSIOWdXoL5iYv_A}{OG4RcLhYRPegvjmZh5N1XA}{local}{local[23]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,262][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,273][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,292][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,340][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,501][INFO ][org.elasticsearch.index.search.nested] [FloatNestedSortingTests#testNestedSorting]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSorting(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
  "startTimestamp": 1473936008064,
  "executionTime": 467
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,540][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,587][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,601][INFO ][org.elasticsearch.index.search.nested] [FloatNestedSortingTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.search.nested.FloatNestedSortingTests)",
  "startTimestamp": 1473936008531,
  "executionTime": 95
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,626][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,627][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,627][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:08,628][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.search.nested.FloatNestedSortingTests",
  "startTimestamp": 1473936008045,
  "executionTime": 589
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests",
   "children": [
    {
     "id": "ID#testSingleIndexFirstStartPrimaryThenBackups(org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests)",
     "displayName": "testSingleIndexFirstStartPrimaryThenBackups(org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests)",
     "methodName": "testSingleIndexFirstStartPrimaryThenBackups",
     "className": "org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936008738
 }
]

[
 "TEST_STARTED",
 "ID#testSingleIndexFirstStartPrimaryThenBackups(org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,771][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,772][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding one node and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,773][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Add another node and perform rerouting, nothing will happen since primary not started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,774][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the primary shard (on node1)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,776][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Reroute, nothing should change%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,776][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the backup shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,776][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][8], [test][9], [test][7], [test][4], [test][6], [test][5], [test][3], [test][1], [test][2], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,777][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Add another node and perform rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:08,779][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards on node 3%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleIndexFirstStartPrimaryThenBackups(org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests)",
  "startTimestamp": 1473936008760,
  "executionTime": 20
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.TenShardsOneReplicaRoutingTests",
  "startTimestamp": 1473936008738,
  "executionTime": 50
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "displayName": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
   "children": [
    {
     "id": "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testReusableTokenStream",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testLimit",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testFingerprint",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    },
    {
     "id": "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "displayName": "testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
     "methodName": "testAsciifolding",
     "className": "org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936008827
 }
]

[
 "TEST_STARTED",
 "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReusableTokenStream(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1473936008851,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLimit(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1473936008863,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFingerprint(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1473936008865,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAsciifolding(org.elasticsearch.index.analysis.FingerprintAnalyzerTests)",
  "startTimestamp": 1473936008867,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.FingerprintAnalyzerTests",
  "startTimestamp": 1473936008827,
  "executionTime": 45
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "displayName": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
   "children": [
    {
     "id": "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "displayName": "testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "methodName": "testSingleTermWithOrds",
     "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
     "children": []
    },
    {
     "id": "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "displayName": "testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
     "methodName": "testEmptyTermsWithOrds",
     "className": "org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936008938
 }
]

[
 "TEST_STARTED",
 "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleTermWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
  "startTimestamp": 1473936009008,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyTermsWithOrds(org.elasticsearch.search.aggregations.support.IncludeExcludeTests)",
  "startTimestamp": 1473936009029,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.support.IncludeExcludeTests",
  "startTimestamp": 1473936008938,
  "executionTime": 103
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "displayName": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
   "children": [
    {
     "id": "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testParseWithProvidedPipeline",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testParseUsingPipelineStore",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testNullPipelineId",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    },
    {
     "id": "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "displayName": "testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
     "methodName": "testNonExistentPipelineId",
     "className": "org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936009080
 }
]

[
 "TEST_STARTED",
 "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseWithProvidedPipeline(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1473936009108,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUsingPipelineStore(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1473936009154,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1473936009157,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistentPipelineId(org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests)",
  "startTimestamp": 1473936009160,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.SimulatePipelineRequestParsingTests",
  "startTimestamp": 1473936009080,
  "executionTime": 87
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
   "displayName": "org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936009201
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:40:09,225][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{GzQSZjmgQmGpYtST5R7a2Q}{local}{local[279]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
  "startTimestamp": 1473936009289,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
  "startTimestamp": 1473936009292,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests)",
  "startTimestamp": 1473936009295,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityTests",
  "startTimestamp": 1473936009201,
  "executionTime": 100
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.SpatialStrategyTests",
   "displayName": "org.elasticsearch.common.geo.SpatialStrategyTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
   "children": [
    {
     "id": "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testwriteTo",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    },
    {
     "id": "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "displayName": "testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
     "methodName": "testInvalidReadFrom",
     "className": "org.elasticsearch.common.geo.SpatialStrategyTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936009329
 }
]

[
 "TEST_STARTED",
 "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testwriteTo(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1473936009348,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1473936009351,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1473936009354,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidReadFrom(org.elasticsearch.common.geo.SpatialStrategyTests)",
  "startTimestamp": 1473936009356,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.SpatialStrategyTests",
  "startTimestamp": 1473936009329,
  "executionTime": 30
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.similarity.SimilarityTests",
   "displayName": "org.elasticsearch.index.similarity.SimilarityTests",
   "methodName": null,
   "className": "org.elasticsearch.index.similarity.SimilarityTests",
   "children": [
    {
     "id": "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_DFR",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_bm25",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_Unknown",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_IB",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveDefaultSimilarities",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_LMJelinekMercer",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testSimilarityDefaultBackCompat",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_classic",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_LMDirichlet",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    },
    {
     "id": "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
     "displayName": "testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
     "methodName": "testResolveSimilaritiesFromMapping_DFI",
     "className": "org.elasticsearch.index.similarity.SimilarityTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936009416
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,455][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,480][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,480][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,484][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,488][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,488][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,633][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,638][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,638][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[24]}, bound_addresses {local[24]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,645][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{tS88W1buQwWlGayWlypAaA}{499Nj-8rRJy35LjgLPWuLg}{local}{local[24]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,646][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,662][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,706][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,774][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,869][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_DFR]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_DFR(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936009447,
  "executionTime": 455
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:09,910][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,017][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,037][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_bm25]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_bm25(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936009902,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,080][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,201][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,215][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_Unknown]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_Unknown(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010072,
  "executionTime": 185
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,266][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,322][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,337][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_IB]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_IB(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010257,
  "executionTime": 122
 }
]

[
 "TEST_STARTED",
 "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,388][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,446][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,459][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveDefaultSimilarities]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveDefaultSimilarities(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010380,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,504][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,558][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,571][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_LMJelinekMercer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_LMJelinekMercer(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010497,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,621][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_v2.x] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,680][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_v2.x][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,703][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_v3.x] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,758][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_v3.x][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,773][INFO ][org.elasticsearch.index.similarity] [node_s_0] [test_v3.x] [SimilarityTests#testSimilarityDefaultBackCompat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimilarityDefaultBackCompat(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010613,
  "executionTime": 202
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,823][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,872][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,894][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_classic]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_classic(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010816,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,931][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,972][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:10,985][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_LMDirichlet]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_LMDirichlet(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936010924,
  "executionTime": 89
 }
]

[
 "TEST_STARTED",
 "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,021][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [foo] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,071][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[foo][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,084][INFO ][org.elasticsearch.index.similarity] [node_s_0] [foo] [SimilarityTests#testResolveSimilaritiesFromMapping_DFI]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResolveSimilaritiesFromMapping_DFI(org.elasticsearch.index.similarity.SimilarityTests)",
  "startTimestamp": 1473936011014,
  "executionTime": 95
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,109][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,110][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,110][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,111][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.similarity.SimilarityTests",
  "startTimestamp": 1473936009416,
  "executionTime": 1704
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests",
   "displayName": "org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests",
   "children": [
    {
     "id": "ID#testQueryRewriteOnRefresh(org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests)",
     "displayName": "testQueryRewriteOnRefresh(org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests)",
     "methodName": "testQueryRewriteOnRefresh",
     "className": "org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936011150
 }
]

[
 "TEST_STARTED",
 "ID#testQueryRewriteOnRefresh(org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,173][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,193][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,193][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,196][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,198][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,198][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,322][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,322][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,323][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[25]}, bound_addresses {local[25]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,330][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{4qJeKKFSRd-cqYBsx1OO7A}{NyC8hTaKR-iFDIZQxXkY0w}{local}{local[25]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,331][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,344][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,362][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [index] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,412][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[index][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,722][INFO ][org.elasticsearch.index.fieldstats] [FieldStatsProviderRefreshTests#testQueryRewriteOnRefresh]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryRewriteOnRefresh(org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests)",
  "startTimestamp": 1473936011166,
  "executionTime": 590
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,757][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,757][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,757][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:11,759][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fieldstats.FieldStatsProviderRefreshTests",
  "startTimestamp": 1473936011150,
  "executionTime": 616
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
   "children": [
    {
     "id": "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnBooleanPrecision",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseValidFromStrings",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnPrecisionOutOfRange",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseValidFromInts",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    },
    {
     "id": "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "displayName": "testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
     "methodName": "testParseErrorOnNonIntPrecision",
     "className": "org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936011793
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnBooleanPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1473936011812,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseValidFromStrings(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1473936011814,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnPrecisionOutOfRange(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1473936011848,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseValidFromInts(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1473936011851,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseErrorOnNonIntPrecision(org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests)",
  "startTimestamp": 1473936011853,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridParserTests",
  "startTimestamp": 1473936011793,
  "executionTime": 64
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
   "children": [
    {
     "id": "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
     "displayName": "testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
     "methodName": "testElectReplicaAsPrimaryDuringRelocation",
     "className": "org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936011902
 }
]

[
 "TEST_STARTED",
 "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,934][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,936][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,937][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the primary shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,937][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the replica shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,937][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,941][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start another node and perform rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,941][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] find the replica shard that gets relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,942][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] kill the node [node2] of the primary shard for the relocating replica%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,951][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T04:40:11,951][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] make sure all the primary shards are active%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectReplicaAsPrimaryDuringRelocation(org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests)",
  "startTimestamp": 1473936011925,
  "executionTime": 28
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.ElectReplicaAsPrimaryDuringRelocationTests",
  "startTimestamp": 1473936011902,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "displayName": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "methodName": null,
   "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
   "children": [
    {
     "id": "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testBoost",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testSortValues",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testNRTSearchOnClosedWriter",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testSimpleNumericOps",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testNumericTermDocsFreqs",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    },
    {
     "id": "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "displayName": "testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
     "methodName": "testOrdering",
     "className": "org.elasticsearch.deps.lucene.SimpleLuceneTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012009
 }
]

[
 "TEST_STARTED",
 "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoost(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012027,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortValues(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012048,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNRTSearchOnClosedWriter(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012084,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNumericOps(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012091,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumericTermDocsFreqs(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012108,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOrdering(org.elasticsearch.deps.lucene.SimpleLuceneTests)",
  "startTimestamp": 1473936012114,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.deps.lucene.SimpleLuceneTests",
  "startTimestamp": 1473936012009,
  "executionTime": 113
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.FieldTypeLookupTests",
   "displayName": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
   "children": [
    {
     "id": "ID#testAddExistingIndexName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testAddExistingIndexName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testAddExistingIndexName",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testEmpty(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testDefaultMapping(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testDefaultMapping(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testDefaultMapping",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testAddNewField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testAddNewField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testAddNewField",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testAddExistingField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testAddExistingField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testAddExistingField",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibilityMismatchedTypes(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testCheckCompatibilityMismatchedTypes(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testCheckCompatibilityMismatchedTypes",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMatchFullNames(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testSimpleMatchFullNames(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testSimpleMatchFullNames",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testIteratorImmutable(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testIteratorImmutable(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testIteratorImmutable",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testCheckCompatibilityConflict(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testCheckCompatibilityConflict(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testCheckCompatibilityConflict",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    },
    {
     "id": "ID#testAddExistingFullName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "displayName": "testAddExistingFullName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
     "methodName": "testAddExistingFullName",
     "className": "org.elasticsearch.index.mapper.FieldTypeLookupTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012215
 }
]

[
 "TEST_STARTED",
 "ID#testAddExistingIndexName(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddExistingIndexName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012243,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012247,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultMapping(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultMapping(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012250,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAddNewField(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddNewField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012252,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAddExistingField(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddExistingField(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012254,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibilityMismatchedTypes(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibilityMismatchedTypes(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012257,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMatchFullNames(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMatchFullNames(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012260,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIteratorImmutable(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIteratorImmutable(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012262,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibilityConflict(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibilityConflict(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012265,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAddExistingFullName(org.elasticsearch.index.mapper.FieldTypeLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddExistingFullName(org.elasticsearch.index.mapper.FieldTypeLookupTests)",
  "startTimestamp": 1473936012268,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.FieldTypeLookupTests",
  "startTimestamp": 1473936012215,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "displayName": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "methodName": null,
   "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
   "children": [
    {
     "id": "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidPoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_simplePoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiLineString",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_envelope",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_selfCrossingPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidMultipoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_lineString",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_polygonNoHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiPoint",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_geometryCollection",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_circle",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_multiDimensionShapes",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_OGCPolygonWithHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_orientationOption",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_invalidMultiPolygon",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_polygonWithHole",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    },
    {
     "id": "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "displayName": "testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
     "methodName": "testParse_OGCPolygonWithoutHoles",
     "className": "org.elasticsearch.common.geo.GeoJSONShapeParserTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012339
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012373,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_simplePoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012379,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiLineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012381,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_envelope(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012388,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_selfCrossingPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012398,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidMultipoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012408,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_lineString(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012410,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012413,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_polygonNoHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012438,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiPoint(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012441,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_geometryCollection(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012444,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_circle(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012447,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_multiDimensionShapes(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012450,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012453,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_OGCPolygonWithHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012456,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012468,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_orientationOption(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012471,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_invalidMultiPolygon(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012479,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_polygonWithHole(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012482,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParse_OGCPolygonWithoutHoles(org.elasticsearch.common.geo.GeoJSONShapeParserTests)",
  "startTimestamp": 1473936012487,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.geo.GeoJSONShapeParserTests",
  "startTimestamp": 1473936012339,
  "executionTime": 154
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.AllocationIdTests",
   "displayName": "org.elasticsearch.cluster.routing.AllocationIdTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
   "children": [
    {
     "id": "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testCancelRelocation",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testSuccessfulRelocation",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testMoveToUnassigned",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testShardToStarted",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testReinitializing",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "displayName": "testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.cluster.routing.AllocationIdTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012522
 }
]

[
 "TEST_STARTED",
 "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,554][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,555][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- relocate the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,555][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- cancel relocation%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancelRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012550,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,557][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,557][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- relocate the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,557][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- finalize the relocation%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuccessfulRelocation(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012555,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,560][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,560][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- move to unassigned%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMoveToUnassigned(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012558,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,562][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- create unassigned shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,562][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- initialize the shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,562][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- start the shard%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardToStarted(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012560,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,564][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- build started shard%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T07:40:12,564][INFO ][org.elasticsearch.cluster.routing] [node_s_0] -- reinitializing shard%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReinitializing(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012562,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.cluster.routing.AllocationIdTests)",
  "startTimestamp": 1473936012565,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.AllocationIdTests",
  "startTimestamp": 1473936012522,
  "executionTime": 53
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.recycler.QueueRecyclerTests",
   "displayName": "org.elasticsearch.common.recycler.QueueRecyclerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
   "children": [
    {
     "id": "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testClose",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testReuse",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testDoubleRelease",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testRecycle",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    },
    {
     "id": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "displayName": "testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
     "methodName": "testDestroyWhenOverCapacity",
     "className": "org.elasticsearch.common.recycler.QueueRecyclerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012594
 }
]

[
 "TEST_STARTED",
 "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClose(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1473936012613,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReuse(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1473936012649,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleRelease(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1473936012651,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecycle(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1473936012654,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDestroyWhenOverCapacity(org.elasticsearch.common.recycler.QueueRecyclerTests)",
  "startTimestamp": 1473936012656,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.recycler.QueueRecyclerTests",
  "startTimestamp": 1473936012594,
  "executionTime": 66
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "displayName": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
   "children": [
    {
     "id": "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
     "displayName": "testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
     "methodName": "testCompareParsingTokens",
     "className": "org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012696
 }
]

[
 "TEST_STARTED",
 "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompareParsingTokens(org.elasticsearch.common.xcontent.cbor.JsonVsCborTests)",
  "startTimestamp": 1473936012719,
  "executionTime": 24
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.cbor.JsonVsCborTests",
  "startTimestamp": 1473936012696,
  "executionTime": 50
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.settings.SettingTests",
   "displayName": "org.elasticsearch.common.settings.SettingTests",
   "methodName": null,
   "className": "org.elasticsearch.common.settings.SettingTests",
   "children": [
    {
     "id": "ID#testDefault(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testDefault(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testDefault",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testRejectNullProperties(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testRejectNullProperties(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testRejectNullProperties",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testGet(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testGet(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testGet",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testMutuallyExclusiveScopes(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testMutuallyExclusiveScopes(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testMutuallyExclusiveScopes",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testComplexType(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testComplexType(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testComplexType",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testGroups(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testGroups(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testGroups",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testByteSize(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testByteSize(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testByteSize",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testUpdaterIsIsolated(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testUpdaterIsIsolated(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testUpdaterIsIsolated",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testListSettings(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testListSettings(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testListSettings",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testSimpleUpdate(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testSimpleUpdate(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testSimpleUpdate",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testMinMaxInt(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testMinMaxInt(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testMinMaxInt",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testComposite(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testComposite(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testComposite",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testAdfixKeySetting(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testAdfixKeySetting(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testAdfixKeySetting",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testUpdateNotDynamic(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testUpdateNotDynamic(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testUpdateNotDynamic",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testListSettingAcceptsNumberSyntax(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testListSettingAcceptsNumberSyntax(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testListSettingAcceptsNumberSyntax",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testType(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testType(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testType",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    },
    {
     "id": "ID#testDynamicKeySetting(org.elasticsearch.common.settings.SettingTests)",
     "displayName": "testDynamicKeySetting(org.elasticsearch.common.settings.SettingTests)",
     "methodName": "testDynamicKeySetting",
     "className": "org.elasticsearch.common.settings.SettingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012779
 }
]

[
 "TEST_STARTED",
 "ID#testDefault(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefault(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012810,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRejectNullProperties(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectNullProperties(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012814,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGet(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGet(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012816,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMutuallyExclusiveScopes(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMutuallyExclusiveScopes(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012819,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testComplexType(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,824][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [] to [2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,826][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [2] to []%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testComplexType(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012821,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testGroups(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,831][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar.] from [{}] to [{\"1\":{\"value\":\"1\"},\"2\":{\"value\":\"2\"},\"3\":{\"value\":\"3\"}}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,831][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar.] from [{\"1\":{\"value\":\"1\"},\"2\":{\"value\":\"2\"},\"3\":{\"value\":\"3\"}}] to [{\"1\":{\"value\":\"1\"},\"2\":{\"value\":\"2\"}}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,831][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar.] from [{\"1\":{\"value\":\"1\"},\"2\":{\"value\":\"2\"}}] to [{\"1\":{\"value\":\"1\"},\"2\":{\"value\":\"4\"}}]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGroups(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012826,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testByteSize(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,836][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [a.byte.size] from [2048b] to [12b]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testByteSize(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012833,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUpdaterIsIsolated(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,838][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [false] to [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdaterIsIsolated(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012836,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testListSettings(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,842][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [[\"foo,bar\"]] to [[\"test\",\"test1, test2\",\"test\",\",,,,\"]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,842][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [[\"test\",\"test1, test2\",\"test\",\",,,,\"]] to [[\"123\"]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,842][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [[\"123\"]] to [[\"1\",\"2\",\"3\"]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,843][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [[\"1\",\"2\",\"3\"]] to [[\"foo,bar\"]]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testListSettings(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012839,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleUpdate(org.elasticsearch.common.settings.SettingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:40:12,847][INFO ][org.elasticsearch.common.settings] [node_s_0] updating [foo.bar] from [false] to [true]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleUpdate(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012845,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMinMaxInt(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinMaxInt(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012848,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testComposite(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testComposite(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012850,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testAdfixKeySetting(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAdfixKeySetting(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012891,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateNotDynamic(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateNotDynamic(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012895,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testListSettingAcceptsNumberSyntax(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testListSettingAcceptsNumberSyntax(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012898,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testType(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testType(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012901,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDynamicKeySetting(org.elasticsearch.common.settings.SettingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDynamicKeySetting(org.elasticsearch.common.settings.SettingTests)",
  "startTimestamp": 1473936012904,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.settings.SettingTests",
  "startTimestamp": 1473936012779,
  "executionTime": 136
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "displayName": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
   "children": [
    {
     "id": "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "displayName": "testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "methodName": "testTwoPhaseIterator",
     "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
     "children": []
    },
    {
     "id": "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "displayName": "testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
     "methodName": "testRegularIterator",
     "className": "org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936012986
 }
]

[
 "TEST_STARTED",
 "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoPhaseIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
  "startTimestamp": 1473936013002,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegularIterator(org.elasticsearch.common.lucene.search.function.MinScoreScorerTests)",
  "startTimestamp": 1473936013042,
  "executionTime": 19
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.search.function.MinScoreScorerTests",
  "startTimestamp": 1473936012986,
  "executionTime": 77
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.index.IndexRequestTests",
   "displayName": "org.elasticsearch.action.index.IndexRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.index.IndexRequestTests",
   "children": [
    {
     "id": "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testIndexRequestOpTypeFromString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsTimeValue",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testIndexingRejectsLongIds",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testAutoGenIdTimestampIsSet",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testSetTTLAsLong",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testWaitForActiveShards",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testValidateTTL",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testReadBogusString",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    },
    {
     "id": "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
     "displayName": "testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
     "methodName": "testCreateOperationRejectsVersions",
     "className": "org.elasticsearch.action.index.IndexRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013114
 }
]

[
 "TEST_STARTED",
 "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexRequestOpTypeFromString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013133,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsTimeValue(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013136,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013138,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingRejectsLongIds(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013140,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutoGenIdTimestampIsSet(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013146,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSetTTLAsLong(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013148,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWaitForActiveShards(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013150,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidateTTL(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013154,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadBogusString(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013159,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateOperationRejectsVersions(org.elasticsearch.action.index.IndexRequestTests)",
  "startTimestamp": 1473936013161,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.index.IndexRequestTests",
  "startTimestamp": 1473936013114,
  "executionTime": 52
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013198
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:40:13,224][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{I3FC7Gr7QaWlqEEmROhZsg}{local}{local[283]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1473936013237,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1473936013240,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.bucket.nested.NestedTests)",
  "startTimestamp": 1473936013249,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.nested.NestedTests",
  "startTimestamp": 1473936013198,
  "executionTime": 57
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.SourceFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013280
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1473936013299,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1473936013302,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1473936013304,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1473936013306,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.SourceFieldTypeTests)",
  "startTimestamp": 1473936013309,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.SourceFieldTypeTests",
  "startTimestamp": 1473936013280,
  "executionTime": 32
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.hppc.HppcMapsTests",
   "displayName": "org.elasticsearch.common.hppc.HppcMapsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.hppc.HppcMapsTests",
   "children": [
    {
     "id": "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
     "displayName": "testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
     "methodName": "testIntersection",
     "className": "org.elasticsearch.common.hppc.HppcMapsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013337
 }
]

[
 "TEST_STARTED",
 "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIntersection(org.elasticsearch.common.hppc.HppcMapsTests)",
  "startTimestamp": 1473936013355,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.hppc.HppcMapsTests",
  "startTimestamp": 1473936013337,
  "executionTime": 23
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013394
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:10:13,419][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{HnJQCJKrRYaBzPXw5dFENg}{local}{local[284]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1473936013430,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:10:13,435][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"avg_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:10:13,436][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"avg_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1473936013433,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests)",
  "startTimestamp": 1473936013437,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.AvgBucketTests",
  "startTimestamp": 1473936013394,
  "executionTime": 48
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
   "displayName": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
   "children": [
    {
     "id": "ID#testSuccessAfterRetryWithExceptionFromTransport(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testSuccessAfterRetryWithExceptionFromTransport(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testSuccessAfterRetryWithExceptionFromTransport",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testBasicRequestWorks(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testBasicRequestWorks(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testBasicRequestWorks",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testSuccessAfterRetryWithClusterStateUpdate(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testSuccessAfterRetryWithClusterStateUpdate(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testSuccessAfterRetryWithClusterStateUpdate",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testUnresolvableRequestDoesNotHang(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testUnresolvableRequestDoesNotHang(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testUnresolvableRequestDoesNotHang",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testRetryOfAnAlreadyTimedOutRequest(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testRetryOfAnAlreadyTimedOutRequest(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testRetryOfAnAlreadyTimedOutRequest",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testFailureWithoutRetry(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testFailureWithoutRetry(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testFailureWithoutRetry",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    },
    {
     "id": "ID#testGlobalBlock(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "displayName": "testGlobalBlock(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
     "methodName": "testGlobalBlock",
     "className": "org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013558
 }
]

[
 "TEST_STARTED",
 "ID#testSuccessAfterRetryWithExceptionFromTransport(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,582][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{mg9RfIYvROG2kevB_b8n7Q}{local}{local[285]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,589][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{qlsKA4wrQ9a1qhi8O4Tb1g}{local}{local[287]}, previous {node}{mg9RfIYvROG2kevB_b8n7Q}{local}{local[285]}}, removed {{node}{mg9RfIYvROG2kevB_b8n7Q}{local}{local[285]},}, added {{node_1}{qlsKA4wrQ9a1qhi8O4Tb1g}{local}{local[287]},{node_2}{St3mUm6uSsSXb4y17uxOSQ}{local}{local[288]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,657][INFO ][org.elasticsearch.cluster.service] [node_s_0] removed {{node_0}{YyZkvPwWQiKzM3yaZm_JFA}{local}{local[286]},{node_1}{qlsKA4wrQ9a1qhi8O4Tb1g}{local}{local[287]},{node_2}{St3mUm6uSsSXb4y17uxOSQ}{local}{local[288]},}, added {{node_1}{WgnIKqzJTf6oWXXPfwb3gg}{local}{local[293]},{node_2}{gH9rzk6WTRKGcleOXuw9zQ}{local}{local[294]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuccessAfterRetryWithExceptionFromTransport(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013577,
  "executionTime": 81
 }
]

[
 "TEST_STARTED",
 "ID#testBasicRequestWorks(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,667][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{kl-KJtOuTPqmGj0Ex0tL3w}{local}{local[298]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,669][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{DQVWAOM4S_yXEgsF2kEh1g}{local}{local[300]}, previous {node}{kl-KJtOuTPqmGj0Ex0tL3w}{local}{local[298]}}, removed {{node}{kl-KJtOuTPqmGj0Ex0tL3w}{local}{local[298]},}, added {{node_1}{DQVWAOM4S_yXEgsF2kEh1g}{local}{local[300]},{node_2}{BI15HoIeRs2A2z5adcMINA}{local}{local[301]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicRequestWorks(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013658,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSuccessAfterRetryWithClusterStateUpdate(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,675][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{3UxDe4pEQe2Pkqhzv35G6Q}{local}{local[305]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,677][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{_zllx-AlSy2_DymoKn3jWg}{local}{local[307]}, previous {node}{3UxDe4pEQe2Pkqhzv35G6Q}{local}{local[305]}}, removed {{node}{3UxDe4pEQe2Pkqhzv35G6Q}{local}{local[305]},}, added {{node_1}{_zllx-AlSy2_DymoKn3jWg}{local}{local[307]},{node_2}{sme0lcrcSDW51KeU-HCZfg}{local}{local[308]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,678][INFO ][org.elasticsearch.cluster.service] [node_s_0] removed {{node_0}{GZ2x25riSNikA68gjIgjVA}{local}{local[306]},{node_1}{_zllx-AlSy2_DymoKn3jWg}{local}{local[307]},{node_2}{sme0lcrcSDW51KeU-HCZfg}{local}{local[308]},}, added {{node_1}{UuK9YR1qRVCuam1YVaXvbQ}{local}{local[313]},{node_2}{FAT3_aWrStSgs88aJZW2qg}{local}{local[314]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuccessAfterRetryWithClusterStateUpdate(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013670,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testUnresolvableRequestDoesNotHang(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,684][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{OCMko9GSQ2izRzXNNHbgPw}{local}{local[318]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,687][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{BRzdEgLlQ-qh7tMZTxsLXw}{local}{local[320]}, previous {node}{OCMko9GSQ2izRzXNNHbgPw}{local}{local[318]}}, removed {{node}{OCMko9GSQ2izRzXNNHbgPw}{local}{local[318]},}, added {{node_1}{BRzdEgLlQ-qh7tMZTxsLXw}{local}{local[320]},{node_2}{wvmSHA3uRvyVNlk70DU3QQ}{local}{local[321]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnresolvableRequestDoesNotHang(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013678,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testRetryOfAnAlreadyTimedOutRequest(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,704][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{nBPSfAnhRc60CxC-7ib2bA}{local}{local[325]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,706][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{gDloXJX0QcqQElxEovnS9Q}{local}{local[327]}, previous {node}{nBPSfAnhRc60CxC-7ib2bA}{local}{local[325]}}, removed {{node}{nBPSfAnhRc60CxC-7ib2bA}{local}{local[325]},}, added {{node_1}{gDloXJX0QcqQElxEovnS9Q}{local}{local[327]},{node_2}{5bGmCtDYTgOM3o8Wx8UmZQ}{local}{local[328]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRetryOfAnAlreadyTimedOutRequest(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013688,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testFailureWithoutRetry(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,721][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{OGNIfwYBTsSDbX20ibFRLg}{local}{local[332]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,724][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node_1}{LiRZ_jZoQnKlEv_Bl9u-lw}{local}{local[334]}, previous {node}{OGNIfwYBTsSDbX20ibFRLg}{local}{local[332]}}, removed {{node}{OGNIfwYBTsSDbX20ibFRLg}{local}{local[332]},}, added {{node_1}{LiRZ_jZoQnKlEv_Bl9u-lw}{local}{local[334]},{node_2}{Ubo07lPxSr6hAnVkPdY1FQ}{local}{local[335]},}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailureWithoutRetry(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013715,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalBlock(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:40:13,731][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{4dqXAeCjSZ-tuiMoQARJJw}{local}{local[339]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalBlock(org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests)",
  "startTimestamp": 1473936013727,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.single.instance.TransportInstanceSingleOperationActionTests",
  "startTimestamp": 1473936013558,
  "executionTime": 177
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "displayName": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
   "children": [
    {
     "id": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testCheckCompatibility",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testTermQuery",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testCheckTypeName",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testFreeze",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testClone",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    },
    {
     "id": "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "displayName": "testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.index.mapper.TypeFieldTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013773
 }
]

[
 "TEST_STARTED",
 "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckCompatibility(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013789,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermQuery(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013792,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckTypeName(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013824,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreeze(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013826,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClone(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013829,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.index.mapper.TypeFieldTypeTests)",
  "startTimestamp": 1473936013830,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.TypeFieldTypeTests",
  "startTimestamp": 1473936013773,
  "executionTime": 62
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ExceptionSerializationTests",
   "displayName": "org.elasticsearch.ExceptionSerializationTests",
   "methodName": null,
   "className": "org.elasticsearch.ExceptionSerializationTests",
   "children": [
    {
     "id": "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testCircuitBreakingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testActionTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIllegalIndexShardStateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testInterruptedException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchPhaseExecutionException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIOException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIOException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testWithRestHeadersException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testThatIdsAreUnique",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testElasticsearchRemoteException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testElasticsearchSecurityException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testNotSerializableExceptionWrapper",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testFileSystemExceptions",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIds(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIds(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIds",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testAliasesMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testClusterBlockException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRecoverFilesRecoveryException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testNoLongerPrimaryShardException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testActionNotFoundTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRepositoryException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testQueryShardException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testAlreadyExpiredException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testExceptionRegistration",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchContextMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexFailedEngineException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIllegalShardRoutingStateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testFailedNodeException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testConnectTransportException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSnapshotException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testTimestampParsingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexTemplateMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRecoveryEngineException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testSearchParseException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testInvalidIndexTemplateException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testRoutingMissingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testBatchOperationException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testParsingException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testParsingException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testThatIdsArePositive",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    },
    {
     "id": "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
     "displayName": "testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
     "methodName": "testIndexTemplateAlreadyExistsException",
     "className": "org.elasticsearch.ExceptionSerializationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936013960
 }
]

[
 "TEST_STARTED",
 "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCircuitBreakingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936013987,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActionTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936013996,
  "executionTime": 152
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalIndexShardStateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014148,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInterruptedException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014152,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchPhaseExecutionException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014154,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIOException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014159,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithRestHeadersException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014164,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatIdsAreUnique(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014168,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchRemoteException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014171,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchSecurityException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014174,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotSerializableExceptionWrapper(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014177,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileSystemExceptions(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014275,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testIds(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIds(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014288,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAliasesMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014292,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterBlockException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014296,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFilesRecoveryException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014301,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoLongerPrimaryShardException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014308,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActionNotFoundTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014311,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014315,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryShardException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014320,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAlreadyExpiredException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014327,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionRegistration(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936014332,
  "executionTime": 51307
 }
]

[
 "TEST_STARTED",
 "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchContextMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065640,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexFailedEngineException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065646,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065652,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalShardRoutingStateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065657,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedNodeException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065664,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConnectTransportException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065668,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065684,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimestampParsingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065690,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexTemplateMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065695,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryEngineException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065717,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchParseException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065724,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidIndexTemplateException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065729,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoutingMissingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065747,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBatchOperationException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065760,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065766,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatIdsArePositive(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065771,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexTemplateAlreadyExistsException(org.elasticsearch.ExceptionSerializationTests)",
  "startTimestamp": 1473936065776,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ExceptionSerializationTests",
  "startTimestamp": 1473936013960,
  "executionTime": 51834
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
   "children": [
    {
     "id": "ID#testRemovingInitializingReplicasIfPrimariesFails(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
     "displayName": "testRemovingInitializingReplicasIfPrimariesFails(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
     "methodName": "testRemovingInitializingReplicasIfPrimariesFails",
     "className": "org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
     "children": []
    },
    {
     "id": "ID#testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
     "displayName": "testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
     "methodName": "testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode",
     "className": "org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936065804
 }
]

[
 "TEST_STARTED",
 "ID#testRemovingInitializingReplicasIfPrimariesFails(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:05,976][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:05,979][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:05,980][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the primary shards%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:05,981][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail node with primary%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:05,986][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemovingInitializingReplicasIfPrimariesFails(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
  "startTimestamp": 1473936065964,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,007][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,007][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,008][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the primary shard (on node1)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,008][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the backup shard (on node2)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,009][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,009][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding third node and reroute and kill first node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:06,009][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode(org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests)",
  "startTimestamp": 1473936065987,
  "executionTime": 23
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.PrimaryElectionRoutingTests",
  "startTimestamp": 1473936065804,
  "executionTime": 209
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "displayName": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
   "children": [
    {
     "id": "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_Static",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidDateMathFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomTimeZoneInIndexName",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_EscapeStatic",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomTimeZoneInSetting",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testNormal",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_EscapeDateFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_MultiParts",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_MixedArray",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidOpenEnded",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidUnescaped",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpressionInvalidEmptyDateMathFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    },
    {
     "id": "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "displayName": "testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
     "methodName": "testExpression_CustomFormat",
     "className": "org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066020
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066077,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066079,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_Static(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066082,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066084,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:06,102][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] timezone: [+02:12], now [2016-09-15T00:00:00.089Z], name: [.marvel-2016.09.15]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomTimeZoneInIndexName(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066087,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_EscapeStatic(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066104,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:06,108][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] timezone: [+06:00], now [2016-09-15T00:00:00.108Z], name: [.marvel-2016.09.15]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomTimeZoneInSetting(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066106,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormal(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066109,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_EscapeDateFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066111,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_MultiParts(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066113,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_MixedArray(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066115,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidOpenEnded(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066118,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidUnescaped(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066120,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpressionInvalidEmptyDateMathFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066122,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExpression_CustomFormat(org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests)",
  "startTimestamp": 1473936066124,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.DateMathExpressionResolverTests",
  "startTimestamp": 1473936066020,
  "executionTime": 108
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "displayName": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "methodName": null,
   "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
   "children": [
    {
     "id": "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "displayName": "testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "methodName": "testTwoDocuments",
     "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "displayName": "testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.common.lucene.uid.VersionLookupTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066134
 }
]

[
 "TEST_STARTED",
 "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoDocuments(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
  "startTimestamp": 1473936066153,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.common.lucene.uid.VersionLookupTests)",
  "startTimestamp": 1473936066164,
  "executionTime": 15
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.lucene.uid.VersionLookupTests",
  "startTimestamp": 1473936066134,
  "executionTime": 47
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "displayName": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
   "children": [
    {
     "id": "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testElectionBasedOnConflictingNodes",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testFailingJoinsWhenNotMaster",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleMasterElection",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testElectionWithConcurrentJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleMasterElectionWithoutRequiredJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testNormalConcurrentJoins",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingJoinWithSameAddressButDifferentId",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testNewClusterStateOnExistingNodeJoin",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testMasterElectionTimeout",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testRejectingJoinWithSameIdButDifferentNode",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    },
    {
     "id": "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "displayName": "testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
     "methodName": "testSimpleJoinAccumulation",
     "className": "org.elasticsearch.discovery.zen.NodeJoinControllerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066191
 }
]

[
 "TEST_STARTED",
 "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,274][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{hgcN8eRTRmWmu4qm1hajjw}{local}{local[346]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,286][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,289][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{other_node}{-PRtsQQ2QVG6k7g8_oGgaQ}{local}{local[349]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,289][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,290][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{qSu2wWGSSHe1UQN9JBbN_A}{local}{local[349]} (id [1]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,291][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,291][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [1], required [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,293][DEBUG][org.elasticsearch.discovery.zen] removing existing node [{other_node}{-PRtsQQ2QVG6k7g8_oGgaQ}{local}{local[349]}], which conflicts with incoming join from [{other_node}{qSu2wWGSSHe1UQN9JBbN_A}{local}{local[349]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,293][INFO ][org.elasticsearch.cluster.service] [node_s_0] master {new {node}{hgcN8eRTRmWmu4qm1hajjw}{local}{local[346]}}, removed {{other_node}{-PRtsQQ2QVG6k7g8_oGgaQ}{local}{local[349]},}, added {{other_node}{qSu2wWGSSHe1UQN9JBbN_A}{local}{local[349]},}, reason: zen-disco-elected-as-master ([1] nodes joined)[{other_node}{qSu2wWGSSHe1UQN9JBbN_A}{local}{local[349]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,293][DEBUG][org.elasticsearch.discovery.zen] future [join of {other_node}{qSu2wWGSSHe1UQN9JBbN_A}{local}{local[349]} (id [1]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectionBasedOnConflictingNodes(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066266,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,305][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{c9sP-XdfQCKDUd4gICCefw}{local}{local[350]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,310][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,312][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{QBn6m0gyS6uKZhL7H0r6Hw}{local}{local[test_0]} (id [2]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,313][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_0}{0}{QBn6m0gyS6uKZhL7H0r6Hw}{local}{local[test_0]} (id [2]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{c9sP-XdfQCKDUd4gICCefw}{local}{local[350]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][DEBUG][org.elasticsearch.discovery.zen] --> testing joins fail post accumulation%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{lKCmoFW7Ry6hYZIG7BwFqw}{local}{local[test_1]} (id [3]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,315][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,316][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,316][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_1}{1}{lKCmoFW7Ry6hYZIG7BwFqw}{local}{local[test_1]} (id [3]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{c9sP-XdfQCKDUd4gICCefw}{local}{local[350]}] not master for join request%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailingJoinsWhenNotMaster(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066295,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,320][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{vqECBymfRJukJHN69u9WIA}{local}{local[351]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,325][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,327][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,327][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{9G3JBiMdQG2g60PeQ7w9hg}{local}{local[test_0]} (id [4]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,327][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,327][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_0}{0}{9G3JBiMdQG2g60PeQ7w9hg}{local}{local[test_0]} (id [4]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{vqECBymfRJukJHN69u9WIA}{local}{local[351]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,328][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,328][DEBUG][org.elasticsearch.discovery.zen] --> joining [1] unique master nodes. Total of [20] join requests%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,328][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [5]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,328][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,333][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [6]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [7]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [8]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [9]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,334][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [10]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [11]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [12]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [13]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [14]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [15]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [16]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [17]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [18]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,335][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [19]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [20]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [21]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [22]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [23]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [24]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] --> asserting master election didn't finish yet%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] --> joining [8] nodes, with repetition a total of [32]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [25]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,336][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_12}{12}{goCK78pTSwCMtzeUgCDdYQ}{local}{local[test_12]} (id [26]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [27]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [28]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [29]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_19}{19}{H1zenreSQcWrSrkCe_Ji3g}{local}{local[test_19]} (id [30]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [31]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [32]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [33]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [34]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [35]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [36]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,337][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [37]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [38]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [39]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [40]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [6], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [41]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [42]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [43]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [44]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [45]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [7], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_7}{7}{Qk3_pBchQ8-BFH5lyUyttQ}{local}{local[test_7]} (id [46]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [8], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,338][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_14}{14}{v2apTFZAQ7amMhkR3WLRsg}{local}{local[test_14]} (id [47]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [48]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [49]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [50]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [51]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [52]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [53]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [54]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [55]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [56]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [9], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,339][DEBUG][org.elasticsearch.discovery.zen] --> waiting for master election to with no exception%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,340][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [9], required [5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,341][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{vqECBymfRJukJHN69u9WIA}{local}{local[351]}, added {{data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]},{data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]},{master_7}{7}{Qk3_pBchQ8-BFH5lyUyttQ}{local}{local[test_7]},{data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]},{master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]},{master_14}{14}{v2apTFZAQ7amMhkR3WLRsg}{local}{local[test_14]},{data_19}{19}{H1zenreSQcWrSrkCe_Ji3g}{local}{local[test_19]},{master_12}{12}{goCK78pTSwCMtzeUgCDdYQ}{local}{local[test_12]},{master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]},{master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]},{data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]},{data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]},{data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]},{master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]},{master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]},{data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]},{data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]},{data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]},{master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]},}, reason: zen-disco-elected-as-master ([19] nodes joined)[{master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]}, {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]}, {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]}, {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]}, {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]}, {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]}, {master_7}{7}{Qk3_pBchQ8-BFH5lyUyttQ}{local}{local[test_7]}, {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]}, {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]}, {data_19}{19}{H1zenreSQcWrSrkCe_Ji3g}{local}{local[test_19]}, {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]}, {master_12}{12}{goCK78pTSwCMtzeUgCDdYQ}{local}{local[test_12]}, {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]}, {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]}, {master_14}{14}{v2apTFZAQ7amMhkR3WLRsg}{local}{local[test_14]}, {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]}, {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]}, {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]}, {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,342][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [13]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [22]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [8]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [14]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [40]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [43]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [49]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [34]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,344][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [35]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [29]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [48]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [53]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [54]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [9]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [12]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [19]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [24]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_7}{7}{Qk3_pBchQ8-BFH5lyUyttQ}{local}{local[test_7]} (id [46]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [25]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [27]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [31]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [36]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [7]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,345][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [11]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,346][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [16]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,346][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [18]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_19}{19}{H1zenreSQcWrSrkCe_Ji3g}{local}{local[test_19]} (id [30]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [37]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [39]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [44]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [50]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_12}{12}{goCK78pTSwCMtzeUgCDdYQ}{local}{local[test_12]} (id [26]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [5]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [6]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [15]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [20]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [28]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [56]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_14}{14}{v2apTFZAQ7amMhkR3WLRsg}{local}{local[test_14]} (id [47]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [32]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [45]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [52]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [10]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [17]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [21]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [23]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [41]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,347][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [42]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [51]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [55]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [33]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [38]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [10])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] --> waiting on all joins to be processed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [5]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [6]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [7]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [8]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [9]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [10]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [11]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,348][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [12]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [13]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_4}{4}{lWGSscYfSzqY9ypxe5Efiw}{local}{local[test_4]} (id [14]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [15]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [16]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [17]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_6}{6}{uB4LMTuURO27F_JO6lwOAQ}{local}{local[test_6]} (id [18]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [19]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_2}{2}{JytCW-WuSH6xTlH1t4Shwg}{local}{local[test_2]} (id [20]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,349][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [21]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_1}{1}{0UEBNMD_TbaQJ1Y3Da2nZQ}{local}{local[test_1]} (id [22]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_3}{3}{Cp09eqy0RAGf04FYZndUzQ}{local}{local[test_3]} (id [23]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_5}{5}{QwnN6gz0SbuzddncQ_Ku5Q}{local}{local[test_5]} (id [24]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [25]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_12}{12}{goCK78pTSwCMtzeUgCDdYQ}{local}{local[test_12]} (id [26]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [27]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [28]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [29]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_19}{19}{H1zenreSQcWrSrkCe_Ji3g}{local}{local[test_19]} (id [30]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,350][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [31]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [32]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [33]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [34]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_15}{15}{6IhdD31HT9Coxg3VA9Krqg}{local}{local[test_15]} (id [35]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_17}{17}{hpjoxjhoRaa-fMVvNabCnw}{local}{local[test_17]} (id [36]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [37]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_16}{16}{nSsGvAerS1Or5TJMgGTZUw}{local}{local[test_16]} (id [38]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [39]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [40]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [41]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [42]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [43]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [44]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [45]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_7}{7}{Qk3_pBchQ8-BFH5lyUyttQ}{local}{local[test_7]} (id [46]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_14}{14}{v2apTFZAQ7amMhkR3WLRsg}{local}{local[test_14]} (id [47]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [48]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_8}{8}{0RmvgHboRR-QBeYuuXbtag}{local}{local[test_8]} (id [49]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {data_18}{18}{wSR3nRY9RLi_24x3ht3FYQ}{local}{local[test_18]} (id [50]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [51]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,351][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_13}{13}{S7uu4aXQQVmTnKTi3icnWQ}{local}{local[test_13]} (id [52]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [53]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_9}{9}{gUkkVlgkQkaM5TVHbn5QHQ}{local}{local[test_9]} (id [54]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_10}{10}{JcyYyHwUQ3aayVDyP7j_Mw}{local}{local[test_10]} (id [55]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][DEBUG][org.elasticsearch.discovery.zen] waiting on future [join of {master_11}{11}{tUxheCluRkuVGk06MD_mcQ}{local}{local[test_11]} (id [56]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][DEBUG][org.elasticsearch.discovery.zen] --> testing accumulation stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,352][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMasterElection(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066317,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,360][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{zXYuONb_Q0y8mpIliMnTVQ}{local}{local[352]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,367][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,369][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,371][INFO ][org.elasticsearch.discovery.zen] --> waiting to be elected as master (required joins [3])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,371][DEBUG][org.elasticsearch.discovery.zen] {master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,371][DEBUG][org.elasticsearch.discovery.zen] {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,371][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]} (id [57]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,371][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]} (id [58]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]} (id [59]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]} (id [60]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]} (id [61]]%0D%0A[2016-09-15T15:11:06,372][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [4], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]} (id [62]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] {master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [5], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,372][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]} (id [63]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,373][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [5], required [3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,373][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{zXYuONb_Q0y8mpIliMnTVQ}{local}{local[352]}, added {{master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]},{master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]},{master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]},{master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]},{master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]},}, reason: zen-disco-elected-as-master ([5] nodes joined)[{master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]}, {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]}, {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]}, {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]}, {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,373][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]} (id [57]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,373][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]} (id [58]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]} (id [60]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]} (id [61]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]} (id [59]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [6])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][INFO ][org.elasticsearch.discovery.zen] --> waiting for joins to complete%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]},{master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]},}, reason: zen-disco-node-join[{master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]}, {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]} (id [63]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,374][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]} (id [62]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,375][INFO ][org.elasticsearch.discovery.zen] assert for [[{node}{zXYuONb_Q0y8mpIliMnTVQ}{local}{local[352]}, {master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]}, {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]}, {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]}, {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]}, {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]}, {master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]}, {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]}]] in:%0Acluster uuid: _na_%0Aversion: 7%0Astate uuid: df9zDYAFTdKIJ79VUoiwxA%0Afrom_diff: false%0Ameta data version: 0%0Anodes: %0A   {master_2}{2}{PxQTZF0nQ7KUBigesp7Dgw}{local}{local[test_2]}%0A   {master_0}{0}{EAJYcFETQRmuSg1wDZl0uA}{local}{local[test_0]}%0A   {master_5}{5}{BLfKCN9-RJi81IOwLp8_Kg}{local}{local[test_5]}%0A   {master_4}{4}{niF1BGwiRv6W5CvN4J0MoQ}{local}{local[test_4]}%0A   {node}{zXYuONb_Q0y8mpIliMnTVQ}{local}{local[352]}, local, master%0A   {master_1}{1}{4xEEhbA3RVWnNnKsmqy3YA}{local}{local[test_1]}%0A   {master_3}{3}{YUEFxeXmTaCzZhNtOTXsvg}{local}{local[test_3]}%0A   {master_6}{6}{esLAkzppRnGq7GjfypBhqA}{local}{local[test_6]}%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[node][V]%0A---- unassigned%0A%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElectionWithConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066353,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,384][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{i97CEWWRQ1ShWCcb8ddnUw}{local}{local[353]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,390][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,393][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,393][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{HZej9CpMR0SWjFCEi0zWrg}{local}{local[test_0]} (id [64]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,393][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,393][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_0}{0}{HZej9CpMR0SWjFCEi0zWrg}{local}{local[test_0]} (id [64]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{i97CEWWRQ1ShWCcb8ddnUw}{local}{local[353]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,393][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,394][DEBUG][org.elasticsearch.discovery.zen] --> requiredJoins is set to 0. verifying election finished%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,408][TRACE][org.elasticsearch.discovery.zen] have enough joins for election. Got [0], required [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,409][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{i97CEWWRQ1ShWCcb8ddnUw}{local}{local[353]}, reason: zen-disco-elected-as-master ([0] nodes joined)%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMasterElectionWithoutRequiredJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066376,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,431][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{zYd8g6Y2S_a9oqd2i61wkw}{local}{local[354]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,437][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,440][INFO ][org.elasticsearch.discovery.zen] --> waiting for joins to complete%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,442][DEBUG][org.elasticsearch.discovery.zen] {data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,442][DEBUG][org.elasticsearch.discovery.zen] {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,442][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]} (id [65]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,442][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]} (id [66]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,443][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]},}, reason: zen-disco-node-join[{data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,443][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]} (id [65]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,443][DEBUG][org.elasticsearch.discovery.zen] {data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,443][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]} (id [67]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,444][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]},{data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]},}, reason: zen-disco-node-join[{data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]}, {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,444][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]} (id [67]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,444][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]} (id [66]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,443][DEBUG][org.elasticsearch.discovery.zen] {master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,445][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]} (id [68]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,445][DEBUG][org.elasticsearch.discovery.zen] {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,445][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]} (id [69]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]},{master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]},}, reason: zen-disco-node-join[{master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]}, {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][DEBUG][org.elasticsearch.discovery.zen] {data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]} joining%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]} (id [70]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]} (id [68]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]} (id [69]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [3])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]},}, reason: zen-disco-node-join[{data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,447][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]} (id [70]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,448][INFO ][org.elasticsearch.discovery.zen] assert for [[{node}{zYd8g6Y2S_a9oqd2i61wkw}{local}{local[354]}, {data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]}, {data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]}, {master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]}, {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]}, {data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]}, {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]}]] in:%0Acluster uuid: _na_%0Aversion: 8%0Astate uuid: oqKft--6TyaRWTHmIywQkA%0Afrom_diff: false%0Ameta data version: 0%0Anodes: %0A   {data_1}{1}{KezDWszpTCC85IBIY_NNQg}{local}{local[test_1]}%0A   {data_0}{0}{JmiYgVuNQ12duaZWeKGLcA}{local}{local[test_0]}%0A   {node}{zYd8g6Y2S_a9oqd2i61wkw}{local}{local[354]}, local, master%0A   {master_3}{3}{EQBn_TbvSOCJedtoaoPU9w}{local}{local[test_3]}%0A   {data_4}{4}{Ml2svWt-QkeF3L-vn7ARgw}{local}{local[test_4]}%0A   {master_2}{2}{8Y4AxnqvTmiHdaLSM3dw_g}{local}{local[test_2]}%0A   {data_5}{5}{dNHl4irLTmWlJrXcaDioQQ}{local}{local[test_5]}%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[node][V]%0A---- unassigned%0A%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormalConcurrentJoins(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066410,
  "executionTime": 38
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,455][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{-7mWmtmtRl-FWdgRfXJx_A}{local}{local[355]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,463][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,465][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{node_10}{1FZb35CtTiufrvCwJc-4Eg}{local}{local[356]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,466][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{cdtk5jFOR9ioyorsU_c5pQ}{local}{local[356]} (id [71]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,466][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {other_node}{cdtk5jFOR9ioyorsU_c5pQ}{local}{local[356]} (id [71]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {other_node}{cdtk5jFOR9ioyorsU_c5pQ}{local}{local[356]}, found existing node {node_10}{1FZb35CtTiufrvCwJc-4Eg}{local}{local[356]} with same address%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingJoinWithSameAddressButDifferentId(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066449,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,472][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{MVjrYk7TSX6hIJZn1Y4U_w}{local}{local[357]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,479][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,481][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{node_10}{HxWIXGA5TRiVV1uuM1cwrA}{local}{local[358]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,481][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {node_10}{HxWIXGA5TRiVV1uuM1cwrA}{local}{local[358]} (id [72]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,481][DEBUG][org.elasticsearch.discovery.zen] received a join request for an existing node [{node_10}{HxWIXGA5TRiVV1uuM1cwrA}{local}{local[358]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,481][DEBUG][org.elasticsearch.discovery.zen] future [join of {node_10}{HxWIXGA5TRiVV1uuM1cwrA}{local}{local[358]} (id [72]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,482][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {node_10}{Yv1ZX6EgQIGvAKHGPQbrhA}{local}{local[358]} (id [73]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,482][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {node_10}{Yv1ZX6EgQIGvAKHGPQbrhA}{local}{local[358]} (id [73]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {node_10}{Yv1ZX6EgQIGvAKHGPQbrhA}{local}{local[358]}, found existing node {node_10}{HxWIXGA5TRiVV1uuM1cwrA}{local}{local[358]} with the same id but is a different node instance%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingRestartedNodeJoinsBeforeProcessingNodeLeft(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066468,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,502][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{joQz7ORfSQ6_yEcTFdKUwQ}{local}{local[359]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,508][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,512][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{other_node}{zsg01O3hRf-FLKBIam08MQ}{local}{local[360]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,513][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {other_node}{zsg01O3hRf-FLKBIam08MQ}{local}{local[360]} (id [74]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,513][DEBUG][org.elasticsearch.discovery.zen] received a join request for an existing node [{other_node}{zsg01O3hRf-FLKBIam08MQ}{local}{local[360]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,513][DEBUG][org.elasticsearch.discovery.zen] future [join of {other_node}{zsg01O3hRf-FLKBIam08MQ}{local}{local[360]} (id [74]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewClusterStateOnExistingNodeJoin(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066484,
  "executionTime": 30
 }
]

[
 "TEST_STARTED",
 "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,529][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,535][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,537][DEBUG][org.elasticsearch.discovery.zen] --> using requiredJoins [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,537][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_0}{0}{afY0SW9qT-CreKolnTDfOg}{local}{local[test_0]} (id [75]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,537][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,537][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_0}{0}{afY0SW9qT-CreKolnTDfOg}{local}{local[test_0]} (id [75]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,538][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_1}{1}{MqdOhWDlRBmSun3hghbMDQ}{local}{local[test_1]} (id [76]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,538][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,538][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_1}{1}{MqdOhWDlRBmSun3hghbMDQ}{local}{local[test_1]} (id [76]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,538][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_2}{2}{0pxe04r0QXynG99BvxUexQ}{local}{local[test_2]} (id [77]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,539][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,539][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_2}{2}{0pxe04r0QXynG99BvxUexQ}{local}{local[test_2]} (id [77]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,539][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{OFDQ1jr1Qwi3qyQeIYWJeg}{local}{local[test_3]} (id [78]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,539][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,539][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {master_3}{3}{OFDQ1jr1Qwi3qyQeIYWJeg}{local}{local[test_3]} (id [78]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_4}{4}{8OXY1R0eREK-TYqXVPes7A}{local}{local[test_4]} (id [79]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][TRACE][org.elasticsearch.discovery.zen] processing node joins, but we are not the master. current master: null%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {data_4}{4}{8OXY1R0eREK-TYqXVPes7A}{local}{local[test_4]} (id [79]]%0D%0Aorg.elasticsearch.cluster.NotMasterException: Node [{node}{JubVt0gJTzqCYv6JZmTGBw}{local}{local[361]}] not master for join request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][DEBUG][org.elasticsearch.discovery.zen] --> joining [0] nodes, with repetition a total of [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,540][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [0], required [1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,542][TRACE][org.elasticsearch.discovery.zen] timed out waiting to be elected. waited [1ms]. pending master node joins [0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,542][TRACE][org.elasticsearch.discovery.zen] stopping election ([timed out waiting to be elected])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,542][DEBUG][org.elasticsearch.discovery.zen] --> verifying election timed out%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,542][DEBUG][org.elasticsearch.discovery.zen] --> verifying all joins are failed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMasterElectionTimeout(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066514,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,547][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{wOQkWSQ6S8q3mym1MFwmAQ}{local}{local[362]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,553][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,555][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{node_10}{w7OYUoHxQASVNQ3ii0fquw}{local}{local[363]},{node_11}{thOwgKS1TJejj4P65DPjwg}{local}{local[364]},}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,556][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {node}{OwiI2roURZGxnt8Bas09nQ}{local}{local[362]}{attr=other} (id [80]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,556][ERROR][org.elasticsearch.discovery.zen] unexpected error for future [join of {node}{OwiI2roURZGxnt8Bas09nQ}{local}{local[362]}{attr=other} (id [80]]%0D%0Ajava.lang.IllegalArgumentException: can't add node {node}{OwiI2roURZGxnt8Bas09nQ}{local}{local[362]}{attr=other}, found existing node {node}{wOQkWSQ6S8q3mym1MFwmAQ}{local}{local[362]} with the same id but is a different node instance%0A%09at org.elasticsearch.cluster.node.DiscoveryNodes$Builder.add(DiscoveryNodes.java:600) ~[main/:?]%0A%09at org.elasticsearch.discovery.zen.NodeJoinController$JoinTaskExecutor.execute(NodeJoinController.java:448) ~[main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService.runTasksForExecutor(ClusterService.java:555) [main/:?]%0A%09at org.elasticsearch.cluster.service.ClusterService$UpdateTask.run(ClusterService.java:894) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:444) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:237) [main/:?]%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:200) [main/:?]%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_65]%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_65]%0A%09at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectingJoinWithSameIdButDifferentNode(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066543,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,564][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{juBGlM5JRBWZvL2dXrkoGg}{local}{local[365]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,571][DEBUG][org.elasticsearch.discovery.zen.elect] using minimum_master_nodes [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,573][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_0}{0}{Oi1XajdhSYWn-DwXi3fw8Q}{local}{local[test_0]} (id [81]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_0}{0}{Oi1XajdhSYWn-DwXi3fw8Q}{local}{local[test_0]},}, reason: zen-disco-node-join[{data_0}{0}{Oi1XajdhSYWn-DwXi3fw8Q}{local}{local[test_0]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_0}{0}{Oi1XajdhSYWn-DwXi3fw8Q}{local}{local[test_0]} (id [81]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_1}{1}{qA3jR3nFQPGFHXDq4ignfw}{local}{local[test_1]} (id [82]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_1}{1}{qA3jR3nFQPGFHXDq4ignfw}{local}{local[test_1]},}, reason: zen-disco-node-join[{data_1}{1}{qA3jR3nFQPGFHXDq4ignfw}{local}{local[test_1]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_1}{1}{qA3jR3nFQPGFHXDq4ignfw}{local}{local[test_1]} (id [82]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_2}{2}{JM2CPC5SQ36GGtZ1LEkqcw}{local}{local[test_2]} (id [83]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,574][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_2}{2}{JM2CPC5SQ36GGtZ1LEkqcw}{local}{local[test_2]},}, reason: zen-disco-node-join[{master_2}{2}{JM2CPC5SQ36GGtZ1LEkqcw}{local}{local[test_2]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_2}{2}{JM2CPC5SQ36GGtZ1LEkqcw}{local}{local[test_2]} (id [83]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][WARN ][org.elasticsearch.discovery.zen.elect] value for setting \"discovery.zen.minimum_master_nodes\" is too low. This can result in data loss! Please set it to at least a quorum of master-eligible nodes (current value: [-1], total number of master-eligible nodes used for publishing in this round: [2])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_3}{3}{cV74quh3QIydmg7BDdB8Vw}{local}{local[test_3]} (id [84]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_3}{3}{cV74quh3QIydmg7BDdB8Vw}{local}{local[test_3]},}, reason: zen-disco-node-join[{master_3}{3}{cV74quh3QIydmg7BDdB8Vw}{local}{local[test_3]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_3}{3}{cV74quh3QIydmg7BDdB8Vw}{local}{local[test_3]} (id [84]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_4}{4}{X51ZUAYAQoKuC2RDyo37Jw}{local}{local[test_4]} (id [85]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_4}{4}{X51ZUAYAQoKuC2RDyo37Jw}{local}{local[test_4]},}, reason: zen-disco-node-join[{master_4}{4}{X51ZUAYAQoKuC2RDyo37Jw}{local}{local[test_4]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,575][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_4}{4}{X51ZUAYAQoKuC2RDyo37Jw}{local}{local[test_4]} (id [85]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] starting an election context, will accumulate joins%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_5}{5}{f4Fs3ph3ThiNTploLZ7kBQ}{local}{local[test_5]} (id [86]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_6}{6}{bmMbmPnXT7Kfb44uoHbDoA}{local}{local[test_6]} (id [87]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [1], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_7}{7}{RGM-ET5PR6Kf1MNtLudvKw}{local}{local[test_7]} (id [88]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_8}{8}{G1T4mDoaQtmp0XCjY82BRA}{local}{local[test_8]} (id [89]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [2], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_9}{9}{oeSRWWXERFayfpLMwmshbQ}{local}{local[test_9]} (id [90]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] not enough joins for election. Got [3], required [-1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][TRACE][org.elasticsearch.discovery.zen] stopping election ([test])%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,576][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_10}{10}{MmCvsU0yQaqQKfCEBKVvXQ}{local}{local[test_10]} (id [91]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,577][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_9}{9}{oeSRWWXERFayfpLMwmshbQ}{local}{local[test_9]},{master_5}{5}{f4Fs3ph3ThiNTploLZ7kBQ}{local}{local[test_5]},{data_8}{8}{G1T4mDoaQtmp0XCjY82BRA}{local}{local[test_8]},{master_7}{7}{RGM-ET5PR6Kf1MNtLudvKw}{local}{local[test_7]},{data_10}{10}{MmCvsU0yQaqQKfCEBKVvXQ}{local}{local[test_10]},{data_6}{6}{bmMbmPnXT7Kfb44uoHbDoA}{local}{local[test_6]},}, reason: zen-disco-node-join[{data_10}{10}{MmCvsU0yQaqQKfCEBKVvXQ}{local}{local[test_10]}], zen-disco-election-stop [test][{master_5}{5}{f4Fs3ph3ThiNTploLZ7kBQ}{local}{local[test_5]}, {data_8}{8}{G1T4mDoaQtmp0XCjY82BRA}{local}{local[test_8]}, {data_6}{6}{bmMbmPnXT7Kfb44uoHbDoA}{local}{local[test_6]}, {master_9}{9}{oeSRWWXERFayfpLMwmshbQ}{local}{local[test_9]}, {master_7}{7}{RGM-ET5PR6Kf1MNtLudvKw}{local}{local[test_7]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,577][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_5}{5}{f4Fs3ph3ThiNTploLZ7kBQ}{local}{local[test_5]} (id [86]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,577][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_8}{8}{G1T4mDoaQtmp0XCjY82BRA}{local}{local[test_8]} (id [89]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,577][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_6}{6}{bmMbmPnXT7Kfb44uoHbDoA}{local}{local[test_6]} (id [87]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,578][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_9}{9}{oeSRWWXERFayfpLMwmshbQ}{local}{local[test_9]} (id [90]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,578][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_7}{7}{RGM-ET5PR6Kf1MNtLudvKw}{local}{local[test_7]} (id [88]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,578][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_10}{10}{MmCvsU0yQaqQKfCEBKVvXQ}{local}{local[test_10]} (id [91]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,578][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {data_11}{11}{nOrOSSh6Rku0B-WHwD50Dw}{local}{local[test_11]} (id [92]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,578][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{data_11}{11}{nOrOSSh6Rku0B-WHwD50Dw}{local}{local[test_11]},}, reason: zen-disco-node-join[{data_11}{11}{nOrOSSh6Rku0B-WHwD50Dw}{local}{local[test_11]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,579][DEBUG][org.elasticsearch.discovery.zen] future [join of {data_11}{11}{nOrOSSh6Rku0B-WHwD50Dw}{local}{local[test_11]} (id [92]] completed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,579][DEBUG][org.elasticsearch.discovery.zen] starting future [join of {master_12}{12}{TsaB9LgUTG6rpTaUX6maaA}{local}{local[test_12]} (id [93]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,579][INFO ][org.elasticsearch.cluster.service] [node_s_0] added {{master_12}{12}{TsaB9LgUTG6rpTaUX6maaA}{local}{local[test_12]},}, reason: zen-disco-node-join[{master_12}{12}{TsaB9LgUTG6rpTaUX6maaA}{local}{local[test_12]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:11:06,579][DEBUG][org.elasticsearch.discovery.zen] future [join of {master_12}{12}{TsaB9LgUTG6rpTaUX6maaA}{local}{local[test_12]} (id [93]] completed%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleJoinAccumulation(org.elasticsearch.discovery.zen.NodeJoinControllerTests)",
  "startTimestamp": 1473936066557,
  "executionTime": 22
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.NodeJoinControllerTests",
  "startTimestamp": 1473936066191,
  "executionTime": 391
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.unit.SizeValueTests",
   "displayName": "org.elasticsearch.common.unit.SizeValueTests",
   "methodName": null,
   "className": "org.elasticsearch.common.unit.SizeValueTests",
   "children": [
    {
     "id": "ID#testThatParsingWorks(org.elasticsearch.common.unit.SizeValueTests)",
     "displayName": "testThatParsingWorks(org.elasticsearch.common.unit.SizeValueTests)",
     "methodName": "testThatParsingWorks",
     "className": "org.elasticsearch.common.unit.SizeValueTests",
     "children": []
    },
    {
     "id": "ID#testThatNegativeValuesThrowException(org.elasticsearch.common.unit.SizeValueTests)",
     "displayName": "testThatNegativeValuesThrowException(org.elasticsearch.common.unit.SizeValueTests)",
     "methodName": "testThatNegativeValuesThrowException",
     "className": "org.elasticsearch.common.unit.SizeValueTests",
     "children": []
    },
    {
     "id": "ID#testThatConversionWorks(org.elasticsearch.common.unit.SizeValueTests)",
     "displayName": "testThatConversionWorks(org.elasticsearch.common.unit.SizeValueTests)",
     "methodName": "testThatConversionWorks",
     "className": "org.elasticsearch.common.unit.SizeValueTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066586
 }
]

[
 "TEST_STARTED",
 "ID#testThatParsingWorks(org.elasticsearch.common.unit.SizeValueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatParsingWorks(org.elasticsearch.common.unit.SizeValueTests)",
  "startTimestamp": 1473936066600,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testThatNegativeValuesThrowException(org.elasticsearch.common.unit.SizeValueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatNegativeValuesThrowException(org.elasticsearch.common.unit.SizeValueTests)",
  "startTimestamp": 1473936066603,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testThatConversionWorks(org.elasticsearch.common.unit.SizeValueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatConversionWorks(org.elasticsearch.common.unit.SizeValueTests)",
  "startTimestamp": 1473936066606,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.unit.SizeValueTests",
  "startTimestamp": 1473936066586,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "displayName": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "methodName": null,
   "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
   "children": [
    {
     "id": "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testSourceDisabled",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testMultipleFiltering",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testFetchSource",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    },
    {
     "id": "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "displayName": "testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
     "methodName": "testBasicFiltering",
     "className": "org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066616
 }
]

[
 "TEST_STARTED",
 "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceDisabled(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1473936066641,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1473936066644,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFetchSource(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1473936066647,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicFiltering(org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests)",
  "startTimestamp": 1473936066649,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.fetch.subphase.FetchSourceSubPhaseTests",
  "startTimestamp": 1473936066616,
  "executionTime": 37
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "displayName": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
   "children": [
    {
     "id": "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testRandomValues",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    },
    {
     "id": "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testOrdinals",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    },
    {
     "id": "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "displayName": "testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
     "methodName": "testMultiValuesDocsWithOverlappingStorageArrays",
     "className": "org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066658
 }
]

[
 "TEST_STARTED",
 "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomValues(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1473936066683,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOrdinals(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1473936066853,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuesDocsWithOverlappingStorageArrays(org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests)",
  "startTimestamp": 1473936066856,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.ordinals.MultiOrdinalsTests",
  "startTimestamp": 1473936066658,
  "executionTime": 202
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.transport.BoundTransportAddressTests",
   "displayName": "org.elasticsearch.common.transport.BoundTransportAddressTests",
   "methodName": null,
   "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "displayName": "testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
     "children": []
    },
    {
     "id": "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "displayName": "testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
     "methodName": "testBadBoundAddressArray",
     "className": "org.elasticsearch.common.transport.BoundTransportAddressTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936066881
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.common.transport.BoundTransportAddressTests)",
  "startTimestamp": 1473936067055,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadBoundAddressArray(org.elasticsearch.common.transport.BoundTransportAddressTests)",
  "startTimestamp": 1473936067058,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.transport.BoundTransportAddressTests",
  "startTimestamp": 1473936066881,
  "executionTime": 182
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "displayName": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "methodName": null,
   "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
   "children": [
    {
     "id": "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testDisabledSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testNegativeSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testIllegalOverheadSettings",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testMissingSetting",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    },
    {
     "id": "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "displayName": "testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
     "methodName": "testEmptySettingsAreOkay",
     "className": "org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067070
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1473936067253,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNegativeSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1473936067266,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalOverheadSettings(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1473936067283,
  "executionTime": 59
 }
]

[
 "TEST_STARTED",
 "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingSetting(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1473936067342,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptySettingsAreOkay(org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests)",
  "startTimestamp": 1473936067348,
  "executionTime": 22
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.monitor.jvm.JvmGcMonitorServiceSettingsTests",
  "startTimestamp": 1473936067070,
  "executionTime": 302
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "displayName": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
   "children": [
    {
     "id": "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testScoreMutual",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testAssertions",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testReduce",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testStreamResponse",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testGNDCornerCases",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testBasicScoreProperties",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    },
    {
     "id": "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "displayName": "testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
     "methodName": "testBuilderAndParser",
     "className": "org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067380
 }
]

[
 "TEST_STARTED",
 "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScoreMutual(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067400,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAssertions(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067403,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReduce(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067406,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamResponse(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067414,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGNDCornerCases(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067432,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicScoreProperties(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067435,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBuilderAndParser(org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests)",
  "startTimestamp": 1473936067438,
  "executionTime": 5
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.significant.SignificanceHeuristicTests",
  "startTimestamp": 1473936067380,
  "executionTime": 70
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.IngestMetadataTests",
   "displayName": "org.elasticsearch.ingest.IngestMetadataTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.IngestMetadataTests",
   "children": [
    {
     "id": "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
     "displayName": "testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.ingest.IngestMetadataTests",
     "children": []
    },
    {
     "id": "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
     "displayName": "testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
     "methodName": "testDiff",
     "className": "org.elasticsearch.ingest.IngestMetadataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067455
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.ingest.IngestMetadataTests)",
  "startTimestamp": 1473936067506,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiff(org.elasticsearch.ingest.IngestMetadataTests)",
  "startTimestamp": 1473936067512,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.IngestMetadataTests",
  "startTimestamp": 1473936067455,
  "executionTime": 62
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "displayName": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
   "children": [
    {
     "id": "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSuccess",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSuccessWithOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testUpdatingStatsWhenRemovingPipelineWorks",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSetTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecutePropagateAllMetaDataUpdates",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testBulkRequestExecution",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailureWithOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteEmptyPipeline",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testStats",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteProvidedTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteSetInvalidTTL",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailureWithNestedOnFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteFailure",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testBulkRequestExecutionWithFailures",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteIndexPipelineDoesNotExist",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    },
    {
     "id": "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "displayName": "testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
     "methodName": "testExecuteBulkPipelineDoesNotExist",
     "className": "org.elasticsearch.ingest.PipelineExecutionServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067525
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSuccess(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067560,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSuccessWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067596,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdatingStatsWhenRemovingPipelineWorks(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067613,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSetTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067619,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecutePropagateAllMetaDataUpdates(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067630,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulkRequestExecution(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067635,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailureWithOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067644,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteEmptyPipeline(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067651,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStats(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067654,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteProvidedTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067658,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteSetInvalidTTL(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067664,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailureWithNestedOnFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067668,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteFailure(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067675,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulkRequestExecutionWithFailures(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067680,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteIndexPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067691,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExecuteBulkPipelineDoesNotExist(org.elasticsearch.ingest.PipelineExecutionServiceTests)",
  "startTimestamp": 1473936067696,
  "executionTime": 17
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.ingest.PipelineExecutionServiceTests",
  "startTimestamp": 1473936067525,
  "executionTime": 191
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
   "children": [
    {
     "id": "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testRebalanceFailure",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testSingleShardMultipleAllocationFailures",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFirstAllocationFailureSingleNode",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailPrimaryStartedCheckReplicaElected",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailAllReplicasInitializingOnPrimaryFail",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFirstAllocationFailureTwoNodes",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailedShardPrimaryRelocatingToAndFrom",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    },
    {
     "id": "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "displayName": "testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
     "methodName": "testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect",
     "className": "org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067726
 }
]

[
 "TEST_STARTED",
 "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,755][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,755][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,756][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,757][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (backups)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,757][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][1], [test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,757][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding third node and reroute%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,758][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Fail the shards on node 3%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRebalanceFailure(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067747,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,773][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,774][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding 4 nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,775][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] failing shard on node [node2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,775][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] failing shard on node [node0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,776][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0], [test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShardMultipleAllocationFailures(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067759,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,784][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,784][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding single node and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,787][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the first shard, will have no place to be rerouted to (single node), so stays unassigned%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,787][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFirstAllocationFailureSingleNode(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067776,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,794][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,795][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,795][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (primaries)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,795][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Start the shards (backups)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,796][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,796][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the primary shard, will have no place to be rerouted to (single node), so stays unassigned%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,796][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailPrimaryStartedCheckReplicaElected(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067787,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,805][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,806][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailAllReplicasInitializingOnPrimaryFail(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067797,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,837][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,838][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Adding two nodes and performing rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,838][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] fail the first shard, will start INITIALIZING on the second node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,839][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [RED] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFirstAllocationFailureTwoNodes(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067806,
  "executionTime": 33
 }
]

[
 "TEST_STARTED",
 "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,847][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,848][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,848][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,849][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,849][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,849][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,849][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node3 being initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,850][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,850][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node1 being relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:07,850][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [shards failed [[test][0]] ...]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedShardPrimaryRelocatingToAndFrom(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067839,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect(org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests)",
  "startTimestamp": 1473936067851,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.FailedShardsRoutingTests",
  "startTimestamp": 1473936067726,
  "executionTime": 136
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.io.stream.BytesStreamsTests",
   "displayName": "org.elasticsearch.common.io.stream.BytesStreamsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
   "children": [
    {
     "id": "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testOneFullOneShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testReadWriteGeoPoint",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteStreamableList",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteable",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapOfLists",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableReaderReturnsNull",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteableReaderReturnsWrongName",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleShortPageBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableNotSupportedWithoutWrapping",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleByte",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testNamedWriteableList",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testIllegalBulkWrite",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSeek",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testAccessAfterClose",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapWithConsistentOrder",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSkip",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testOptionalWriteableReaderReturnsNull",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testTwoFullOneShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testReadMapByUsingWriteMapWithConsistentOrder",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWriteWithOffset",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleShortPage",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSingleFullPageBulkWriteWithOffsetCrossover",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    },
    {
     "id": "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "displayName": "testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
     "methodName": "testSimpleStreams",
     "className": "org.elasticsearch.common.io.stream.BytesStreamsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936067893
 }
]

[
 "TEST_STARTED",
 "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOneFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936067941,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936067961,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936067963,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936067979,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadWriteGeoPoint(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936067996,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteStreamableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068022,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteable(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068025,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapOfLists(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068029,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068032,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteableReaderReturnsWrongName(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068038,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShortPageBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068042,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableNotSupportedWithoutWrapping(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068044,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleByte(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068046,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNamedWriteableList(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068048,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalBulkWrite(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068051,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSeek(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068054,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068061,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:140)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:766)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/12620))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAccessAfterClose(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068058,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068062,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSkip(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068068,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068071,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOptionalWriteableReaderReturnsNull(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068073,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoFullOneShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068077,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadMapByUsingWriteMapWithConsistentOrder(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068103,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWriteWithOffset(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068106,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShortPage(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068116,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFullPageBulkWriteWithOffsetCrossover(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068118,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleStreams(org.elasticsearch.common.io.stream.BytesStreamsTests)",
  "startTimestamp": 1473936068138,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.io.stream.BytesStreamsTests",
  "startTimestamp": 1473936067893,
  "executionTime": 255
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.ExistsQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
   "children": [
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.ExistsQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936068156
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,309][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{JEzLScllRPa-gM69TTLBbA}{local}{local[389]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,319][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,319][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,348][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,348][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,348][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,354][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,354][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,354][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,362][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,363][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:08,363][WARN ][org.elasticsearch.deprecation.index.mapper]  [lXjxAiYsv] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068182,
  "executionTime": 194
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068426,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068430,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068437,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068440,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068442,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068478,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068481,
  "executionTime": 54
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068535,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.ExistsQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.ExistsQueryBuilderTests)",
  "startTimestamp": 1473936068538,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.ExistsQueryBuilderTests",
  "startTimestamp": 1473936068156,
  "executionTime": 391
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.store.DirectoryUtilsTests",
   "displayName": "org.elasticsearch.index.store.DirectoryUtilsTests",
   "methodName": null,
   "className": "org.elasticsearch.index.store.DirectoryUtilsTests",
   "children": [
    {
     "id": "ID#testGetLeave(org.elasticsearch.index.store.DirectoryUtilsTests)",
     "displayName": "testGetLeave(org.elasticsearch.index.store.DirectoryUtilsTests)",
     "methodName": "testGetLeave",
     "className": "org.elasticsearch.index.store.DirectoryUtilsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936068552
 }
]

[
 "TEST_STARTED",
 "ID#testGetLeave(org.elasticsearch.index.store.DirectoryUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetLeave(org.elasticsearch.index.store.DirectoryUtilsTests)",
  "startTimestamp": 1473936068596,
  "executionTime": 853
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.store.DirectoryUtilsTests",
  "startTimestamp": 1473936068552,
  "executionTime": 901
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.term.SuggestModeTests",
   "displayName": "org.elasticsearch.search.suggest.term.SuggestModeTests",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
   "children": [
    {
     "id": "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testWriteTo",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testValidOrdinals",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testReadFrom",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    },
    {
     "id": "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "displayName": "testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
     "methodName": "testFromString",
     "className": "org.elasticsearch.search.suggest.term.SuggestModeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936069459
 }
]

[
 "TEST_STARTED",
 "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteTo(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1473936069480,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidOrdinals(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1473936069483,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadFrom(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1473936069485,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromString(org.elasticsearch.search.suggest.term.SuggestModeTests)",
  "startTimestamp": 1473936069487,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.suggest.term.SuggestModeTests",
  "startTimestamp": 1473936069459,
  "executionTime": 33
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.RootObjectMapperTests",
   "displayName": "org.elasticsearch.index.mapper.RootObjectMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
   "children": [
    {
     "id": "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testNumericDetection",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDynamicTemplates",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDateFormatters",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    },
    {
     "id": "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "displayName": "testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
     "methodName": "testDateDetection",
     "className": "org.elasticsearch.index.mapper.RootObjectMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936069498
 }
]

[
 "TEST_STARTED",
 "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,527][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,556][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,557][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,560][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,562][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,562][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,716][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,717][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,717][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[26]}, bound_addresses {local[26]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,719][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{OBNeeTMFRjm4SwV2YIU7VA}{z7_rI9bJQCOiL9dTxG_RRw}{local}{local[26]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,720][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,734][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,753][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,828][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,847][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testNumericDetection]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumericDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1473936069516,
  "executionTime": 363
 }
]

[
 "TEST_STARTED",
 "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,886][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,944][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:09,965][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDynamicTemplates]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDynamicTemplates(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1473936069880,
  "executionTime": 117
 }
]

[
 "TEST_STARTED",
 "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,004][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,062][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,079][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDateFormatters]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateFormatters(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1473936069997,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,122][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,189][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,207][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [RootObjectMapperTests#testDateDetection]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateDetection(org.elasticsearch.index.mapper.RootObjectMapperTests)",
  "startTimestamp": 1473936070115,
  "executionTime": 128
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,244][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,244][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,245][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T13:41:10,246][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.RootObjectMapperTests",
  "startTimestamp": 1473936069498,
  "executionTime": 758
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "displayName": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
     "displayName": "testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936070261
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests)",
  "startTimestamp": 1473936070294,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.state.ClusterStateRequestTests",
  "startTimestamp": 1473936070261,
  "executionTime": 38
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.recovery.RecoveriesCollectionTests",
   "displayName": "org.elasticsearch.recovery.RecoveriesCollectionTests",
   "methodName": null,
   "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
   "children": [
    {
     "id": "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testIndexingDuringFileRecovery",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testResetRecovery",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testRecoveryCancellation",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testRecoveryTimeout",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    },
    {
     "id": "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "displayName": "testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
     "methodName": "testLastAccessTimeUpdate",
     "className": "org.elasticsearch.recovery.RecoveriesCollectionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936070306
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,364][DEBUG][org.elasticsearch.index.shard] [s0] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,366][TRACE][org.elasticsearch.index.shard] [s0] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=ORMjIgFeT_K8JLsJ6NgrJA]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,398][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,398][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=S_yM0dClR1KkFHRmwn48Ig]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,409][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,409][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] starting recovery from store ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,435][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [post recovery from shard_store]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,435][TRACE][org.elasticsearch.index.shard] [s1] [test][0] recovery completed from [shard_store], took [25ms]%0A    index    : files           [0] with total_size [0b], took[0s]%0A             : recovered_files [0] with total_size [0b]%0A             : reusing_files   [0] with total_size [0b]%0A    verify_index    : took [0s], check_index [0s]%0A    translog : number_of_operations [0], took [24ms]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,435][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,435][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,435][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,483][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,483][DEBUG][org.elasticsearch.index.shard] [s1] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,483][TRACE][org.elasticsearch.index.shard] [s1] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,483][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@26177641]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,488][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][1][org.elasticsearch.index.mapper.ParseContext$Document@81f44fe]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,492][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@3e1e8993]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,493][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][2][org.elasticsearch.index.mapper.ParseContext$Document@18bc1026]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,493][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@10dc7821]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,494][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][3][org.elasticsearch.index.mapper.ParseContext$Document@104c763e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,494][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@189abf9b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,495][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][4][org.elasticsearch.index.mapper.ParseContext$Document@480f56d7]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,495][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@48603858]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,495][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][5][org.elasticsearch.index.mapper.ParseContext$Document@48086af0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,496][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@5dbc6907]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,496][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][6][org.elasticsearch.index.mapper.ParseContext$Document@359c3d10]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,496][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@26258a8c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,497][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][7][org.elasticsearch.index.mapper.ParseContext$Document@8c96dac]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,497][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@63dae734]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,497][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][8][org.elasticsearch.index.mapper.ParseContext$Document@31b99676]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,498][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@6726d5fb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,498][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][9][org.elasticsearch.index.mapper.ParseContext$Document@1980ea8c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,499][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@102e10c9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,499][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][10][org.elasticsearch.index.mapper.ParseContext$Document@541baa88]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,500][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@4130c630]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,500][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][11][org.elasticsearch.index.mapper.ParseContext$Document@d0c1964]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,501][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@2ac66c4f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,501][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][12][org.elasticsearch.index.mapper.ParseContext$Document@1693f2e6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,502][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@637615d1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,502][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][13][org.elasticsearch.index.mapper.ParseContext$Document@59ef8128]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,502][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@2ddeefe2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,503][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][14][org.elasticsearch.index.mapper.ParseContext$Document@4ad5870f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,503][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@43033806]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,503][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][15][org.elasticsearch.index.mapper.ParseContext$Document@7f2c42bb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,503][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@7f3e8685]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,504][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][16][org.elasticsearch.index.mapper.ParseContext$Document@41853683]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,504][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@55f5ce58]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,504][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][17][org.elasticsearch.index.mapper.ParseContext$Document@6daca5ed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,504][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@6bd4c3bf]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,505][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][18][org.elasticsearch.index.mapper.ParseContext$Document@4bd5f03a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,505][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@546ccfad]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,505][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][19][org.elasticsearch.index.mapper.ParseContext$Document@607fe23]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,506][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@6c64c52b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,507][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][20][org.elasticsearch.index.mapper.ParseContext$Document@bf13424]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,508][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@2493d867]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,508][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][21][org.elasticsearch.index.mapper.ParseContext$Document@65a9bd1e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,510][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@1131b549]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,511][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][22][org.elasticsearch.index.mapper.ParseContext$Document@13506bb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,511][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@6e9f0877]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,511][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][23][org.elasticsearch.index.mapper.ParseContext$Document@e5d7a6b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,512][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][24][org.elasticsearch.index.mapper.ParseContext$Document@293afc69]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,518][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][24][org.elasticsearch.index.mapper.ParseContext$Document@4e2013ae]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,518][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][25][org.elasticsearch.index.mapper.ParseContext$Document@bf6344a]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,519][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][25][org.elasticsearch.index.mapper.ParseContext$Document@336cb11e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,519][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][26][org.elasticsearch.index.mapper.ParseContext$Document@7695c9d0]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,519][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][26][org.elasticsearch.index.mapper.ParseContext$Document@26bd00dc]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,520][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][27][org.elasticsearch.index.mapper.ParseContext$Document@6dd580b1]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,520][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][27][org.elasticsearch.index.mapper.ParseContext$Document@2e7eb20f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,520][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][28][org.elasticsearch.index.mapper.ParseContext$Document@6a980c8e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,521][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][28][org.elasticsearch.index.mapper.ParseContext$Document@e30786f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,521][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][29][org.elasticsearch.index.mapper.ParseContext$Document@41801616]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,521][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][29][org.elasticsearch.index.mapper.ParseContext$Document@33b4598c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,522][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][30][org.elasticsearch.index.mapper.ParseContext$Document@2d103523]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,522][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][30][org.elasticsearch.index.mapper.ParseContext$Document@57b1a728]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,522][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][31][org.elasticsearch.index.mapper.ParseContext$Document@1ad47841]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,522][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][31][org.elasticsearch.index.mapper.ParseContext$Document@41ad73b3]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,523][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][32][org.elasticsearch.index.mapper.ParseContext$Document@41ae5562]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,523][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][32][org.elasticsearch.index.mapper.ParseContext$Document@85012d2]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,523][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][33][org.elasticsearch.index.mapper.ParseContext$Document@4a741b30]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,523][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][33][org.elasticsearch.index.mapper.ParseContext$Document@36ea206c]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,524][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][34][org.elasticsearch.index.mapper.ParseContext$Document@372554a5]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,524][TRACE][org.elasticsearch.index.shard] [s1] [test][0] index [type][34][org.elasticsearch.index.mapper.ParseContext$Document@4d8d66f6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,524][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,707][TRACE][org.elasticsearch.index.shard] [s1] [test][0] flush with FlushRequest{waitIfOngoing=false, force=false}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,892][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,892][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] writing shard state, reason [initial state with allocation id [[id=Uf7CELiPRWKMBHk1IYVMcg]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,909][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [CREATED]->[RECOVERING], reason [remote]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,944][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@4796abf4]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,948][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@21690643]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,953][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@47f0e50b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,953][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@7093580f]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,954][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@1ab340a6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,954][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@5c860cb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,955][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@624f935]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:10,955][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@27ca5c7e]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,000][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][35]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,000][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][35][org.elasticsearch.index.mapper.ParseContext$Document@5e2071c9]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][36]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][36][org.elasticsearch.index.mapper.ParseContext$Document@21e11277]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][37]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][37][org.elasticsearch.index.mapper.ParseContext$Document@9afbed6]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [translog] recover [index] op of [type][38]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,004][TRACE][org.elasticsearch.index.shard] [s2] [test][0] index [type][38][org.elasticsearch.index.mapper.ParseContext$Document@624a8dbd]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,080][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [peer recovery done]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,080][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,080][TRACE][org.elasticsearch.index.shard] [s2] [test][0] [test][0] skip writing shard state, has been written before%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,080][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [146.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,186][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [146.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,186][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [146.6kb]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,267][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [146.6kb] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,267][TRACE][org.elasticsearch.index.shard] [s2] [test][0] refresh with source [get_uids] indexBufferRAMBytesUsed [0b]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,267][TRACE][org.elasticsearch.index.shard] [s2] [test][0] remove [0b] writing bytes for shard [[test][0]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,268][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,280][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T20:41:11,291][DEBUG][org.elasticsearch.index.shard] [s2] [test][0] state: [STARTED]->[CLOSED], reason [eol]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingDuringFileRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1473936070336,
  "executionTime": 972
 }
]

[
 "TEST_STARTED",
 "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResetRecovery(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1473936071308,
  "executionTime": 283
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryCancellation(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1473936071591,
  "executionTime": 79
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryTimeout(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1473936071670,
  "executionTime": 153
 }
]

[
 "TEST_STARTED",
 "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLastAccessTimeUpdate(org.elasticsearch.recovery.RecoveriesCollectionTests)",
  "startTimestamp": 1473936071823,
  "executionTime": 64
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.recovery.RecoveriesCollectionTests",
  "startTimestamp": 1473936070306,
  "executionTime": 1642
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
   "children": [
    {
     "id": "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedQuery",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testWeight1fStillProducesWeightFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testRewrite",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessageWhenMissingFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFieldValueFactorFactorArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testCustomWeightFactorQueryBuilderWithFunctionScore",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testParseFunctionsArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testRewriteWithFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedQueryFunctionFieldNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testMalformedThrowsException",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testProperErrorMessagesForMisplacedWeightsAndFunctions",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryMalformedFieldNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testQueryMalformedArrayNotSupported",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "displayName": "testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
     "methodName": "testParseSingleFunction",
     "className": "org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936071956
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:11,977][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{syAx_oYjS6Ku_cZT9oPuxQ}{local}{local[390]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:11,985][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:11,985][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] loaded plugin [org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests$TestPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,004][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,004][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,004][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,006][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,008][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,008][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,008][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,010][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,012][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,012][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,013][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,016][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,016][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,016][WARN ][org.elasticsearch.deprecation.index.mapper]  [IxtvSc] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936071973,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072019,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072023,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072025,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072028,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072031,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072040,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWeight1fStillProducesWeightFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072043,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072045,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072051,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewrite(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072054,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,057][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,057][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [5:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,058][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [9:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,058][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,058][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [5:20]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T22:41:12,058][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [9:20]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072056,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessageWhenMissingFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072058,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldValueFactorFactorArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072060,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomWeightFactorQueryBuilderWithFunctionScore(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072062,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFunctionsArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072065,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072071,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072074,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteWithFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072083,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072085,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedQueryFunctionFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072111,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072113,
  "executionTime": 72
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedThrowsException(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072186,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testProperErrorMessagesForMisplacedWeightsAndFunctions(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072190,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryMalformedFieldNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072193,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryMalformedArrayNotSupported(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072196,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseSingleFunction(org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests)",
  "startTimestamp": 1473936072198,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilderTests",
  "startTimestamp": 1473936071956,
  "executionTime": 251
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "displayName": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
   "children": [
    {
     "id": "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testSimpleDeadNodeOnStartedPrimaryShard",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    },
    {
     "id": "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testDeadNodeWhileRelocatingOnToNode",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    },
    {
     "id": "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "displayName": "testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
     "methodName": "testDeadNodeWhileRelocatingOnFromNode",
     "className": "org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936072214
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,246][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,247][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,248][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,249][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,249][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail node with primary%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,249][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDeadNodeOnStartedPrimaryShard(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1473936072238,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,261][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,261][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,261][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,262][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,262][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,262][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,262][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on node3 being initialized by killing node3%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeadNodeWhileRelocatingOnToNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1473936072250,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,270][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> building initial routing table%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,270][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding 2 nodes on same rack and do rerouting%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,271][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,271][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> verifying all is allocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,271][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> adding additional node%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,271][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> moving primary shard to node3%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,272][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] --> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T21:11:12,272][INFO ][org.elasticsearch.cluster] [node_s_0] Cluster health status changed from [GREEN] to [YELLOW] (reason: [reroute]).%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeadNodeWhileRelocatingOnFromNode(org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests)",
  "startTimestamp": 1473936072263,
  "executionTime": 9
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.DeadNodesAllocationTests",
  "startTimestamp": 1473936072214,
  "executionTime": 60
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
   "children": [
    {
     "id": "ID#testAutomaticDateParser(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testAutomaticDateParser(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testAutomaticDateParser",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDayWithoutYearFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testDayWithoutYearFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testDayWithoutYearFormat",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testThatNewIndicesOnlyAllowStrictDates(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testThatNewIndicesOnlyAllowStrictDates(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testThatNewIndicesOnlyAllowStrictDates",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDateDetection(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testDateDetection(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testDateDetection",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testTimestampAsDate(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testTimestampAsDate(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testTimestampAsDate",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreMalformedOption(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testIgnoreMalformedOption(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testIgnoreMalformedOption",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testLocale(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testLocale(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testLocale",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testThatEpochCanBeIgnoredWithCustomFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testThatEpochCanBeIgnoredWithCustomFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testThatEpochCanBeIgnoredWithCustomFormat",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testHourFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testHourFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testHourFormat",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaultDocValues(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testDefaultDocValues(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testDefaultDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testParseLocal(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testParseLocal(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testParseLocal",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testThatMergingWorks(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "displayName": "testThatMergingWorks(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
     "methodName": "testThatMergingWorks",
     "className": "org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936072283
 }
]

[
 "TEST_STARTED",
 "ID#testAutomaticDateParser(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,353][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,440][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,440][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,445][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,448][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,448][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,592][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,593][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,594][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[27]}, bound_addresses {local[27]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,596][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{m8g3bxm-SviCS--w8mBHZQ}{q2kX98lARLGI95ItTvNvnA}{local}{local[27]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,597][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,649][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:12,698][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,015][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,107][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/8YPjQC1JSEWoUikYI2nzDw] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,168][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/8YPjQC1JSEWoUikYI2nzDw] update_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,215][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testAutomaticDateParser]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutomaticDateParser(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936072344,
  "executionTime": 938
 }
]

[
 "TEST_STARTED",
 "ID#testDayWithoutYearFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,289][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,589][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,640][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/_d_c-CAESAC9jRmq-OQs0A] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,732][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testDayWithoutYearFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDayWithoutYearFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936073282,
  "executionTime": 519
 }
]

[
 "TEST_STARTED",
 "ID#testThatNewIndicesOnlyAllowStrictDates(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:13,809][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,122][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,168][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/FNVtko6WRQCQRbCkd_wq_g] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,210][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testThatNewIndicesOnlyAllowStrictDates]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatNewIndicesOnlyAllowStrictDates(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936073801,
  "executionTime": 464
 }
]

[
 "TEST_STARTED",
 "ID#testDateDetection(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,270][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,630][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,679][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ViDlIE7XSe-b_hpdVylbIA] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,719][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testDateDetection]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateDetection(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936074265,
  "executionTime": 509
 }
]

[
 "TEST_STARTED",
 "ID#testTimestampAsDate(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:14,780][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,062][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,110][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/kvkp0pmvSGOynAN-Nf61bg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,152][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testTimestampAsDate]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimestampAsDate(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936074774,
  "executionTime": 433
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreMalformedOption(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,214][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,579][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,618][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/leRGdOa5Q_mY6lq92N8SPA] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:15,664][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,114][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,160][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [LegacyDateFieldMapperTests#testIgnoreMalformedOption]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreMalformedOption(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936075208,
  "executionTime": 1022
 }
]

[
 "TEST_STARTED",
 "ID#testLocale(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,239][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,523][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,570][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/u8M-M3RWTXC1jTLD6Td16g] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,614][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testLocale]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocale(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936076231,
  "executionTime": 425
 }
]

[
 "TEST_STARTED",
 "ID#testThatEpochCanBeIgnoredWithCustomFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,662][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:16,955][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:17,003][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1/8AS5Vt-uT8Sz9ERKFAy-8Q] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:17,047][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [auto(index api)], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:17,487][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:17,557][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2/44-bjrcQRfiRGr9xJaSOhw] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:17,689][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [auto(index api)], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,007][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,055][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/L_ZBuQTQR1G4dqe9wKzLxA] create_mapping [test]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,270][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testThatEpochCanBeIgnoredWithCustomFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatEpochCanBeIgnoredWithCustomFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936076656,
  "executionTime": 1738
 }
]

[
 "TEST_STARTED",
 "ID#testHourFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,400][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,803][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,864][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/9J8g7ig5QoKUYXht7Fd7_A] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:18,964][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testHourFormat]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHourFormat(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936078394,
  "executionTime": 621
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultDocValues(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,024][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,626][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,716][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/h_qeqWKBT-GdBExvl1UrdQ] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,763][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testDefaultDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultDocValues(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936079016,
  "executionTime": 802
 }
]

[
 "TEST_STARTED",
 "ID#testParseLocal(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,822][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyDateFieldMapperTests#testParseLocal]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseLocal(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936079818,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testThatMergingWorks(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:19,830][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:20,198][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:20,256][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test1/1K3hMQFlTxCvEuxqDl8v8Q] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:20,302][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:20,891][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:20,944][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2/hgE5ssZ6Qn2eFG4SB8Ljvw] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:21,018][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [LegacyDateFieldMapperTests#testThatMergingWorks]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatMergingWorks(org.elasticsearch.index.mapper.LegacyDateFieldMapperTests)",
  "startTimestamp": 1473936079823,
  "executionTime": 1272
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:21,095][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:21,096][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:21,096][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T15:41:21,098][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyDateFieldMapperTests",
  "startTimestamp": 1473936072283,
  "executionTime": 8826
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.VersionTypeTests",
   "displayName": "org.elasticsearch.index.VersionTypeTests",
   "methodName": null,
   "className": "org.elasticsearch.index.VersionTypeTests",
   "children": [
    {
     "id": "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testExternalGTEVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testVersionValidation",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testExternalVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testUpdateVersion",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testForceVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    },
    {
     "id": "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "displayName": "testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
     "methodName": "testInternalVersionConflict",
     "className": "org.elasticsearch.index.VersionTypeTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936081115
 }
]

[
 "TEST_STARTED",
 "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalGTEVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081133,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionValidation(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081139,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081143,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateVersion(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081145,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testForceVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081147,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInternalVersionConflict(org.elasticsearch.index.VersionTypeTests)",
  "startTimestamp": 1473936081149,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.VersionTypeTests",
  "startTimestamp": 1473936081115,
  "executionTime": 39
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.StringsTests",
   "displayName": "org.elasticsearch.common.StringsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.StringsTests",
   "children": [
    {
     "id": "ID#testSubstring(org.elasticsearch.common.StringsTests)",
     "displayName": "testSubstring(org.elasticsearch.common.StringsTests)",
     "methodName": "testSubstring",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)",
     "displayName": "testSplitStringToSet(org.elasticsearch.common.StringsTests)",
     "methodName": "testSplitStringToSet",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testEvilToString(org.elasticsearch.common.StringsTests)",
     "displayName": "testEvilToString(org.elasticsearch.common.StringsTests)",
     "methodName": "testEvilToString",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    },
    {
     "id": "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)",
     "displayName": "testCleanTruncate(org.elasticsearch.common.StringsTests)",
     "methodName": "testCleanTruncate",
     "className": "org.elasticsearch.common.StringsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936081159
 }
]

[
 "TEST_STARTED",
 "ID#testSubstring(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSubstring(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1473936081177,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSplitStringToSet(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1473936081179,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEvilToString(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvilToString(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1473936081181,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCleanTruncate(org.elasticsearch.common.StringsTests)",
  "startTimestamp": 1473936081184,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.StringsTests",
  "startTimestamp": 1473936081159,
  "executionTime": 29
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "displayName": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "methodName": null,
   "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
   "children": [
    {
     "id": "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    },
    {
     "id": "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testHashCode",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    },
    {
     "id": "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "displayName": "testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
     "methodName": "testDifferentCompressedRepresentation",
     "className": "org.elasticsearch.common.compress.DeflateCompressedXContentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936081193
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1473936081209,
  "executionTime": 1879
 }
]

[
 "TEST_STARTED",
 "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHashCode(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1473936083088,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentCompressedRepresentation(org.elasticsearch.common.compress.DeflateCompressedXContentTests)",
  "startTimestamp": 1473936083091,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.compress.DeflateCompressedXContentTests",
  "startTimestamp": 1473936081193,
  "executionTime": 1904
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.DynamicTemplateTests",
   "displayName": "org.elasticsearch.index.mapper.DynamicTemplateTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
   "children": [
    {
     "id": "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testMatchAllTemplate",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testParseUnknownMatchType",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testParseUnknownParam",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    },
    {
     "id": "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "displayName": "testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
     "methodName": "testMatchTypeTemplate",
     "className": "org.elasticsearch.index.mapper.DynamicTemplateTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936083102
 }
]

[
 "TEST_STARTED",
 "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchAllTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1473936083124,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1473936083127,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T11:41:23,132][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test2] Ignoring unrecognized match_mapping_type: [short]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUnknownMatchType(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1473936083129,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseUnknownParam(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1473936083133,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchTypeTemplate(org.elasticsearch.index.mapper.DynamicTemplateTests)",
  "startTimestamp": 1473936083135,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.DynamicTemplateTests",
  "startTimestamp": 1473936083102,
  "executionTime": 37
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
   "displayName": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
   "methodName": null,
   "className": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
   "children": [
    {
     "id": "ID#testThreadedUpdatesToChildBreakerWithParentLimit(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "displayName": "testThreadedUpdatesToChildBreakerWithParentLimit(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "methodName": "testThreadedUpdatesToChildBreakerWithParentLimit",
     "className": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
     "children": []
    },
    {
     "id": "ID#testThreadedUpdatesToChildBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "displayName": "testThreadedUpdatesToChildBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "methodName": "testThreadedUpdatesToChildBreaker",
     "className": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
     "children": []
    },
    {
     "id": "ID#testThreadedUpdatesToBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "displayName": "testThreadedUpdatesToBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "methodName": "testThreadedUpdatesToBreaker",
     "className": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
     "children": []
    },
    {
     "id": "ID#testConstantFactor(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "displayName": "testConstantFactor(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
     "methodName": "testConstantFactor",
     "className": "org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936083145
 }
]

[
 "TEST_STARTED",
 "ID#testThreadedUpdatesToChildBreakerWithParentLimit(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,167][INFO ][org.elasticsearch.common.breaker] --> NUM_THREADS: [5], BYTES_PER_THREAD: [1423], TOTAL_BYTES: [7115], PARENT_LIMIT: [7113], CHILD_LIMIT: [7123]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,167][INFO ][org.elasticsearch.common.breaker] --> starting threads...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,173][INFO ][org.elasticsearch.common.breaker] --> parent tripped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,173][INFO ][org.elasticsearch.common.breaker] --> parent tripped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,174][INFO ][org.elasticsearch.common.breaker] --> child breaker: used: 7113, limit: 7123%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,174][INFO ][org.elasticsearch.common.breaker] --> parent tripped: 2, total trip count: 2 (expecting 1-2 for each)%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThreadedUpdatesToChildBreakerWithParentLimit(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
  "startTimestamp": 1473936083162,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testThreadedUpdatesToChildBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,217][WARN ][org.elasticsearch.common.breaker] [request] New used memory 5373 [5.2kb] for data of [test] would be larger than configured breaker: 5372 [5.2kb], breaking%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThreadedUpdatesToChildBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
  "startTimestamp": 1473936083174,
  "executionTime": 44
 }
]

[
 "TEST_STARTED",
 "ID#testThreadedUpdatesToBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,231][WARN ][org.elasticsearch.common.breaker] New used memory 5330 [5.2kb] from field [test] would be larger than configured breaker: 5329 [5.2kb], breaking%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThreadedUpdatesToBreaker(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
  "startTimestamp": 1473936083218,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testConstantFactor(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,234][WARN ][org.elasticsearch.common.breaker] New used memory 16 [16b] from field [myfield] would be larger than configured breaker: 15 [15b], breaking%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T00:41:23,234][WARN ][org.elasticsearch.common.breaker] New used memory 19 [19b] from field [myfield] would be larger than configured breaker: 15 [15b], breaking%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConstantFactor(org.elasticsearch.common.breaker.MemoryCircuitBreakerTests)",
  "startTimestamp": 1473936083232,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.breaker.MemoryCircuitBreakerTests",
  "startTimestamp": 1473936083145,
  "executionTime": 90
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
   "displayName": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
   "children": [
    {
     "id": "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleFieldWithWildcardExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField1Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleFieldExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testNoMatch(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testNoMatch",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testArrays(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testArrays",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSingleFieldObject",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testObjectsInArrayWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecursiveSameObjectWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testWithLfAtEnd",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRawField(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRawField",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsPropertyInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecursiveObjectsInArrayWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField4Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testMultipleFieldsInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField2Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSingleFieldWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecursiveObjectsPropertiesWithBothExcludesIncludes",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField4Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleFieldInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField3Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testMultipleFieldsExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField1Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField2Inclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleFieldWithWildcardInclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testEmptyObject",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testRecurseField3Exclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsPropertyExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testSimpleArrayOfObjectsExclusive",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    },
    {
     "id": "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "displayName": "testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
     "methodName": "testNoFiltering",
     "className": "org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936083248
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldWithWildcardExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083268,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField1Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083277,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083279,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083281,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoMatch(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083283,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArrays(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083289,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFieldObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083300,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083303,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083306,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveSameObjectWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083308,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithLfAtEnd(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083310,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawField(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083316,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsPropertyInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083319,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveObjectsInArrayWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083321,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField4Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083323,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083327,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFieldsInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083330,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField2Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083332,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleFieldWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083334,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecursiveObjectsPropertiesWithBothExcludesIncludes(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083337,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField4Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083340,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083345,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField3Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083347,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleFieldsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083349,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField1Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083353,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField2Inclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083357,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFieldWithWildcardInclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083360,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyObject(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083362,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecurseField3Exclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083369,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsPropertyExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083372,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleArrayOfObjectsExclusive(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083374,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoFiltering(org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests)",
  "startTimestamp": 1473936083377,
  "executionTime": 6
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.support.filtering.JsonFilteringGeneratorTests",
  "startTimestamp": 1473936083248,
  "executionTime": 138
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "displayName": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
   "children": [
    {
     "id": "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDisableNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFileddataDisabled",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testFielddataLoading",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDefaultsForAnalyzed",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithEagerGlobalOrdinals",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeStringIntoStringWithSimilarity",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithPositionIncrementGap",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithBoost",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testTextFieldAsStringWithUnsupportedField",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithSimilarity",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIndexFalse",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testPositionOffsetGapDeprecation",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithFields",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testSearchAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithCopyTo",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testBwCompatDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testNonAnalyzedFieldPositionIncrement",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDefaultsForNotAnalyzed",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithSearchQuoteAnayzer",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIndexOptions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithBoost",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithIncludeInAll",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithStore",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFields",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIgnoreAbove",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testTermVectors",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithStore",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoStringWithIncludeInAll",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testDisabledFielddata",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeKeywordIntoString",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testAnalyzedFieldPositionIncrementWithoutPositions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithNorms",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithCopyTo",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testLimit",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testFielddataFilter",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithDocValues",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testSearchQuoteAnalyzerSerialization",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testKeywordFieldAsStringWithUnsupportedField",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithFielddataFrequencyFilter",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoString",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    },
    {
     "id": "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "displayName": "testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
     "methodName": "testMergeTextIntoStringWithIndexOptions",
     "className": "org.elasticsearch.index.mapper.LegacyStringMappingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936083398
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,447][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,483][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,483][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,486][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,488][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,488][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,630][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,631][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,631][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[28]}, bound_addresses {local[28]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,632][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{p4EVRkXDQKW_FYyXuxgD0Q}{atLuJKeeTRC6sqFzb5qHLg}{local}{local[28]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,633][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,644][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,662][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,737][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,753][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,756][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/fGyMwqIQT0KTsrNjSJ9dOg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,772][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,791][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936083436,
  "executionTime": 425
 }
]

[
 "TEST_STARTED",
 "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:23,872][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,065][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,126][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,130][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,145][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDisableNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936083861,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,195][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,363][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,392][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,396][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/TMlNPmXuTU2YRY9o2UqjqA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,414][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,467][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFileddataDisabled]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFileddataDisabled(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936084186,
  "executionTime": 334
 }
]

[
 "TEST_STARTED",
 "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,528][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,605][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,621][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testFielddataLoading]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFielddataLoading(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936084520,
  "executionTime": 157
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,684][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,805][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,876][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDefaultsForAnalyzed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsForAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936084677,
  "executionTime": 276
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:24,960][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,058][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,097][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":{\"format\":\"pagedbytes\",\"loading\":\"eager_global_ordinals\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,099][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/C7MZZ_UoQ16BgvF7EOKdFw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,132][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"eager_global_ordinals\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,176][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithEagerGlobalOrdinals]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithEagerGlobalOrdinals(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936084953,
  "executionTime": 261
 }
]

[
 "TEST_STARTED",
 "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,221][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,360][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,377][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,379][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/CTtlpwrzQhm8C59CBpreXA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,443][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"similarity\":\"BM25\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,461][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeStringIntoStringWithSimilarity]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeStringIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936085215,
  "executionTime": 291
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,515][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,579][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,596][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"position_increment_gap\":269}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,598][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/UP1x8r_rRu2KnJnLikE8ug] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,613][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"position_increment_gap\":269,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,630][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithPositionIncrementGap]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithPositionIncrementGap(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936085507,
  "executionTime": 180
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,705][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,771][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,785][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,787][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/B7f_EISbTpujzBkRcJ7izw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,803][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,820][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"boost\":1.4}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,823][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/B7f_EISbTpujzBkRcJ7izw] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,837][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936085688,
  "executionTime": 185
 }
]

[
 "TEST_STARTED",
 "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,879][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,928][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,941][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testTextFieldAsStringWithUnsupportedField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTextFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936085873,
  "executionTime": 94
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:25,973][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,038][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,049][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,051][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/0_3mnmu8RNW0YTkSVuZJkg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,060][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"similarity\":\"BM25\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,083][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithSimilarity]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithSimilarity(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936085967,
  "executionTime": 142
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,115][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,159][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,170][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"no\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,172][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Mu2OL6UzS_KBrv59Q91Vxg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,183][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"index\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,199][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIndexFalse]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIndexFalse(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086109,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,226][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,268][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,279][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testPositionOffsetGapDeprecation]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPositionOffsetGapDeprecation(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086221,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,308][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,377][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,387][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,388][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/RoHkoej4T2C-cRt2kUMehg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,399][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,414][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,417][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/RoHkoej4T2C-cRt2kUMehg] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,433][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,451][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086303,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,478][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,529][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,543][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testSearchAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086473,
  "executionTime": 93
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,573][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,625][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,636][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,637][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/yQTHMu7ARXub9XLG1l_7nw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,649][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,666][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithCopyTo]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086566,
  "executionTime": 124
 }
]

[
 "TEST_STARTED",
 "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,695][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,739][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,753][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,802][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,814][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [LegacyStringMappingTests#testBwCompatDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086690,
  "executionTime": 169
 }
]

[
 "TEST_STARTED",
 "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,866][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,938][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,952][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086859,
  "executionTime": 125
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:26,991][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,046][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,059][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"norms\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,061][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Jou4_NPPQmy2KDhQk7i63g] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,074][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"norms\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,089][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"norms\":{\"enabled\":true,\"loading\":\"CYrGG\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,090][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,090][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,105][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"norms\":{\"enabled\":true,\"loading\":\"XXDCP\"}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,105][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,106][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,121][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936086984,
  "executionTime": 171
 }
]

[
 "TEST_STARTED",
 "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,162][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,221][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,236][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testNonAnalyzedFieldPositionIncrement]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonAnalyzedFieldPositionIncrement(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087156,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,274][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,330][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,345][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,346][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test] [omit_norms] is deprecated, please use [norms] instead with the opposite boolean value%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,347][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDefaultsForNotAnalyzed]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsForNotAnalyzed(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087267,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,385][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,435][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,446][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"analyzer\":\"standard\",\"search_analyzer\":\"whitespace\",\"search_quote_analyzer\":\"keyword\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,448][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/W6smdV8xTQyWtUQ7g-NXOQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,462][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"analyzer\":\"standard\",\"search_analyzer\":\"whitespace\",\"search_quote_analyzer\":\"keyword\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,479][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithSearchQuoteAnayzer]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithSearchQuoteAnayzer(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087378,
  "executionTime": 131
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,517][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,571][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,584][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"index_options\":\"freqs\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,587][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/4RliqIYSQMGaVkxCdPQaQA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,603][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"index_options\":\"freqs\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,620][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087510,
  "executionTime": 143
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,660][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,716][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,729][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"boost\":1.5}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,731][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/VKKZFtOMTxWgMyi78kQMBQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,745][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"boost\":1.5,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,762][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"boost\":1.4,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,765][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/VKKZFtOMTxWgMyi78kQMBQ] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,778][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithBoost(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087653,
  "executionTime": 157
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,818][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,879][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,893][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,895][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/GAIIpyhUQtWTGbt_jyrnNA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,909][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"include_in_all\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,925][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087810,
  "executionTime": 148
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:27,966][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,029][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,045][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,047][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Pr8V3b-jSNenlc3QSzajpw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,062][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"store\":true,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,081][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936087958,
  "executionTime": 154
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,119][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,182][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,197][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,199][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Cj5A51P0SKmJXPSBO72e8g] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,214][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,230][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,233][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Cj5A51P0SKmJXPSBO72e8g] update_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,247][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fields\":{\"foo\":{\"type\":\"string\",\"analyzer\":\"standard\"},\"bar\":{\"type\":\"string\",\"analyzer\":\"whitespace\"}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,262][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFields(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088112,
  "executionTime": 181
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,300][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,363][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,393][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"ignore_above\":128}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,395][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/uw-c4kZkSTehtQO_iupe4A] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,410][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"ignore_above\":128}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,428][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIgnoreAbove]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIgnoreAbove(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088294,
  "executionTime": 169
 }
]

[
 "TEST_STARTED",
 "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,472][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,534][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,549][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testTermVectors]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermVectors(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088464,
  "executionTime": 118
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,589][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,656][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,668][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,670][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/_zDe4uj9SyOeqybuXEQcmg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,682][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"store\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,694][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithStore(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088582,
  "executionTime": 137
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,724][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,769][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,780][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,782][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/Ix_0VRjSQLmZuCmOSkaMpQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,792][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\",\"include_in_all\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,803][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoStringWithIncludeInAll]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoStringWithIncludeInAll(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088719,
  "executionTime": 105
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,830][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,873][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,883][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testDisabledFielddata]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledFielddata(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088825,
  "executionTime": 81
 }
]

[
 "TEST_STARTED",
 "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,912][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,958][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,969][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index\":\"not_analyzed\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,970][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/RYE4Oy7KRaKPW0seKS7LJw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:28,984][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"keyword\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,001][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeKeywordIntoString]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeKeywordIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936088906,
  "executionTime": 127
 }
]

[
 "TEST_STARTED",
 "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,039][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,080][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,090][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testAnalyzedFieldPositionIncrementWithoutPositions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAnalyzedFieldPositionIncrementWithoutPositions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089034,
  "executionTime": 77
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,116][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,158][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,168][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"norms\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,169][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/EYLUomZ8RMiFtJpMhQgteg] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,179][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"norms\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,191][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithNorms(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089112,
  "executionTime": 101
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,219][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,272][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,281][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"copy_to\":\"another_field\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,283][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ugB8N-bqRSCcugsqIKPARA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,296][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"copy_to\":\"another_field\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,308][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithCopyTo]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithCopyTo(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089213,
  "executionTime": 117
 }
]

[
 "TEST_STARTED",
 "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,335][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,374][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,384][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testLimit]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLimit(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089330,
  "executionTime": 75
 }
]

[
 "TEST_STARTED",
 "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,411][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,448][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,459][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testFielddataFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFielddataFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089406,
  "executionTime": 75
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,487][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,531][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,540][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"doc_values\":false}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,541][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/7BW21eWpQ1i5shWOTAi5nw] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,551][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"doc_values\":false,\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,562][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithDocValues(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089481,
  "executionTime": 109
 }
]

[
 "TEST_STARTED",
 "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,596][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,639][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,650][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testSearchQuoteAnalyzerSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchQuoteAnalyzerSerialization(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089590,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,702][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,748][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,759][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testKeywordFieldAsStringWithUnsupportedField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testKeywordFieldAsStringWithUnsupportedField(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089696,
  "executionTime": 86
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,787][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,830][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,839][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"fielddata\":{\"format\":\"pagedbytes\",\"filter\":{\"frequency\":{\"min\":0.001,\"max\":0.1,\"min_segment_size\":100}}}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,840][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/w9_yvw6XRJ-BTrXsH80P4Q] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,850][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true,\"fielddata_frequency_filter\":{\"min\":0.001,\"max\":0.1,\"min_segment_size\":100}}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,936][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithFielddataFrequencyFilter]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithFielddataFrequencyFilter(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089782,
  "executionTime": 176
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:29,964][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,004][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,013][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,015][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/ZUhGG2qMSOKl8Vm4d5n8WQ] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,026][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,036][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoString]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoString(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936089958,
  "executionTime": 99
 }
]

[
 "TEST_STARTED",
 "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,064][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,104][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,113][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"string\",\"index_options\":\"docs\"}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,115][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/dzoVVUlxRy6kQqGzPRZBdA] create_mapping [test_type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,153][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] --> Updating mapping to {\"test_type\":{\"properties\":{\"test_field\":{\"type\":\"text\",\"index_options\":\"docs\",\"fielddata\":true}}}}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,165][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [LegacyStringMappingTests#testMergeTextIntoStringWithIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeTextIntoStringWithIndexOptions(org.elasticsearch.index.mapper.LegacyStringMappingTests)",
  "startTimestamp": 1473936090057,
  "executionTime": 130
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,187][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,188][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,188][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T05:41:30,189][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.LegacyStringMappingTests",
  "startTimestamp": 1473936083398,
  "executionTime": 6807
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "displayName": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "methodName": null,
   "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
   "children": [
    {
     "id": "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testBigInteger",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testMissingEndArray",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testRawValue",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testMissingEndObject",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    },
    {
     "id": "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "displayName": "testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
     "methodName": "testRawField",
     "className": "org.elasticsearch.common.xcontent.smile.SmileXContentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090209
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090222,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBigInteger(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090223,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndArray(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090225,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawValue(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090227,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingEndObject(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090230,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRawField(org.elasticsearch.common.xcontent.smile.SmileXContentTests)",
  "startTimestamp": 1473936090231,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.xcontent.smile.SmileXContentTests",
  "startTimestamp": 1473936090209,
  "executionTime": 26
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "displayName": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "methodName": null,
   "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
   "children": [
    {
     "id": "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testToXContent",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090239
 }
]

[
 "TEST_STARTED",
 "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToXContent(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1473936090249,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1473936090252,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.action.ingest.WriteableIngestDocumentTests)",
  "startTimestamp": 1473936090259,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.ingest.WriteableIngestDocumentTests",
  "startTimestamp": 1473936090239,
  "executionTime": 24
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
   "displayName": "org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
   "methodName": null,
   "className": "org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
   "children": [
    {
     "id": "ID#testSimpleFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
     "displayName": "testSimpleFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
     "methodName": "testSimpleFormat",
     "className": "org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
     "children": []
    },
    {
     "id": "ID#testHtmlEncodeFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
     "displayName": "testHtmlEncodeFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
     "methodName": "testHtmlEncodeFormat",
     "className": "org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090292
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
  "startTimestamp": 1473936090304,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testHtmlEncodeFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHtmlEncodeFormat(org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests)",
  "startTimestamp": 1473936090314,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.apache.lucene.search.postingshighlight.CustomPassageFormatterTests",
  "startTimestamp": 1473936090292,
  "executionTime": 28
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.rest.RestUtilsTests",
   "displayName": "org.elasticsearch.rest.RestUtilsTests",
   "methodName": null,
   "className": "org.elasticsearch.rest.RestUtilsTests",
   "children": [
    {
     "id": "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testDecodeQueryStringEdgeCases",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testDecodeQueryString",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testCrazyURL",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    },
    {
     "id": "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
     "displayName": "testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
     "methodName": "testCorsSettingIsARegex",
     "className": "org.elasticsearch.rest.RestUtilsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090324
 }
]

[
 "TEST_STARTED",
 "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDecodeQueryStringEdgeCases(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1473936090333,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDecodeQueryString(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1473936090336,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCrazyURL(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1473936090338,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorsSettingIsARegex(org.elasticsearch.rest.RestUtilsTests)",
  "startTimestamp": 1473936090339,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.rest.RestUtilsTests",
  "startTimestamp": 1473936090324,
  "executionTime": 18
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090346
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,361][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{agCMHynLQWqE00mqPBBqRg}{local}{local[404]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1473936090372,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,377][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"min_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,378][INFO ][org.elasticsearch.search.aggregations.pipeline.bucketmetrics] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"min_bucket\" : {%0A      \"buckets_path\" : [%0A        \"rAGF\"%0A      ],%0A      \"format\" : \"lEmRiqlkxK\",%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1473936090375,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests)",
  "startTimestamp": 1473936090379,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.bucketmetrics.MinBucketTests",
  "startTimestamp": 1473936090346,
  "executionTime": 41
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.ElasticsearchCliTests",
   "displayName": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
   "children": [
    {
     "id": "ID#testUnknownOption(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testUnknownOption(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testUnknownOption",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchSettingCanNotBeEmpty(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testElasticsearchSettingCanNotBeEmpty(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testElasticsearchSettingCanNotBeEmpty",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testThatPidFileCanBeConfigured(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testThatPidFileCanBeConfigured(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testThatPidFileCanBeConfigured",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testVersion(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testVersion(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testVersion",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testThatParsingDaemonizeWorks(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testThatParsingDaemonizeWorks(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testThatParsingDaemonizeWorks",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testElasticsearchSettings(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testElasticsearchSettings(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testElasticsearchSettings",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    },
    {
     "id": "ID#testPositionalArgs(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "displayName": "testPositionalArgs(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
     "methodName": "testPositionalArgs",
     "className": "org.elasticsearch.bootstrap.ElasticsearchCliTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090398
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownOption(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownOption(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090410,
  "executionTime": 240
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchSettingCanNotBeEmpty(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchSettingCanNotBeEmpty(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090650,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testThatPidFileCanBeConfigured(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatPidFileCanBeConfigured(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090655,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testVersion(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersion(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090663,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testThatParsingDaemonizeWorks(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatParsingDaemonizeWorks(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090678,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testElasticsearchSettings(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testElasticsearchSettings(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090683,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testPositionalArgs(org.elasticsearch.bootstrap.ElasticsearchCliTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPositionalArgs(org.elasticsearch.bootstrap.ElasticsearchCliTests)",
  "startTimestamp": 1473936090687,
  "executionTime": 8
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.ElasticsearchCliTests",
  "startTimestamp": 1473936090398,
  "executionTime": 302
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
   "displayName": "org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
   "children": [
    {
     "id": "ID#testDocValue(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
     "displayName": "testDocValue(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
     "methodName": "testDocValue",
     "className": "org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
     "displayName": "testEmpty(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936090708
 }
]

[
 "TEST_STARTED",
 "ID#testDocValue(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,740][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,759][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,759][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,762][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,764][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,764][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,859][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,859][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,859][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[29]}, bound_addresses {local[29]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,860][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{JeM46Sq1S_S0zO62nk6FSQ}{UBKdZoMrQrGQZEPKC9i4vw}{local}{local[29]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,861][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,870][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,888][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,923][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,950][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [BinaryDVFieldDataTests#testDocValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValue(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
  "startTimestamp": 1473936090732,
  "executionTime": 243
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:30,980][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,014][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,025][INFO ][org.elasticsearch.index.fielddata] [node_s_0] [test] [BinaryDVFieldDataTests#testEmpty]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.index.fielddata.BinaryDVFieldDataTests)",
  "startTimestamp": 1473936090975,
  "executionTime": 70
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,045][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,046][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,046][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:31,047][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.BinaryDVFieldDataTests",
  "startTimestamp": 1473936090708,
  "executionTime": 343
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091055
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:41:31,068][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{ls1C9taFR-S_owpZfeRTiQ}{local}{local[405]}, reason: test setting state%0D%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1473936091076,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:41:31,080][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"bucket_script\" : {%0A      \"buckets_path\" : {%0A        \"tWDgqHpqFeggWznWEA\" : \"Eaj\",%0A        \"AoyLTjaMzjuTavAOHByY\" : \"jnxyGhnLFbjKSjRuJlAxGkuTa\",%0A        \"AGFRBl\" : \"mRiqlkxKQNuwzykiCKUwBQlgFmA\",%0A        \"ochWRwJmQpCJv\" : \"APheLsRzGaCDQ\",%0A        \"TQ\" : \"LqDXpmPwOMJKzaScP\",%0A        \"oHhRUfwOEjeBTPVSLy\" : \"NbmtGkVwszvXcfjjn\"%0A      },%0A      \"script\" : {%0A        \"inline\" : \"script\"%0A      },%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-16T00:41:31,080][INFO ][org.elasticsearch.search.aggregations.pipeline] Content string: {%0A  \"jBPgTOGAZdjDTwVkN\" : {%0A    \"bucket_script\" : {%0A      \"buckets_path\" : {%0A        \"tWDgqHpqFeggWznWEA\" : \"Eaj\",%0A        \"AoyLTjaMzjuTavAOHByY\" : \"jnxyGhnLFbjKSjRuJlAxGkuTa\",%0A        \"AGFRBl\" : \"mRiqlkxKQNuwzykiCKUwBQlgFmA\",%0A        \"ochWRwJmQpCJv\" : \"APheLsRzGaCDQ\",%0A        \"TQ\" : \"LqDXpmPwOMJKzaScP\",%0A        \"oHhRUfwOEjeBTPVSLy\" : \"NbmtGkVwszvXcfjjn\"%0A      },%0A      \"script\" : {%0A        \"inline\" : \"script\"%0A      },%0A      \"gap_policy\" : \"skip\"%0A    }%0A  }%0A}%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1473936091078,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.search.aggregations.pipeline.BucketScriptTests)",
  "startTimestamp": 1473936091081,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.BucketScriptTests",
  "startTimestamp": 1473936091055,
  "executionTime": 30
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testNoneFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testToQueryInnerQueryType",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testIgnoreUnmapped",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testIllegalValues",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testAvgFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testSumFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testNonDefaultSimilarity",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMinFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMaxFromString",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testThatNullFromStringThrowsException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromJsonEmptyQueryBody",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testThatUnrecognizedFromStringThrowsException",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.HasChildQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091091
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,111][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{l_ZpgvFwTL-_CeWYdSOTkQ}{local}{local[406]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,118][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,118][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,130][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,131][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,131][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,132][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,132][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,132][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,135][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,135][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,135][WARN ][org.elasticsearch.deprecation.index.mapper]  [FSY] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091107,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoneFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091155,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091159,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQueryInnerQueryType(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091162,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091169,
  "executionTime": 74
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreUnmapped(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091243,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091246,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalValues(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091249,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAvgFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091254,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSumFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091256,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091258,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonDefaultSimilarity(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091263,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091266,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091270,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091273,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxFromString(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091282,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatNullFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091285,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,290][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T12:41:31,291][WARN ][org.elasticsearch.deprecation.index.query] query malformed, empty clause found at [3:17]%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJsonEmptyQueryBody(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091287,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatUnrecognizedFromStringThrowsException(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091291,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091294,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.HasChildQueryBuilderTests)",
  "startTimestamp": 1473936091315,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.HasChildQueryBuilderTests",
  "startTimestamp": 1473936091091,
  "executionTime": 232
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.bulk.BulkShardRequestTests",
   "displayName": "org.elasticsearch.action.bulk.BulkShardRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.bulk.BulkShardRequestTests",
   "children": [
    {
     "id": "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
     "displayName": "testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
     "methodName": "testToString",
     "className": "org.elasticsearch.action.bulk.BulkShardRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091328
 }
]

[
 "TEST_STARTED",
 "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToString(org.elasticsearch.action.bulk.BulkShardRequestTests)",
  "startTimestamp": 1473936091343,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.bulk.BulkShardRequestTests",
  "startTimestamp": 1473936091328,
  "executionTime": 20
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
   "children": [
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091355
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,378][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{j21h7E1MQByH7JUQC8uPFA}{local}{local[407]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,385][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,385][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091372,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091399,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091401,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091402,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091404,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091407,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091412,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091415,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.MatchNoneQueryBuilderTests)",
  "startTimestamp": 1473936091421,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.MatchNoneQueryBuilderTests",
  "startTimestamp": 1473936091355,
  "executionTime": 74
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "displayName": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
   "children": [
    {
     "id": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testEqualsAndHashcode",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testParseFailsWithMultipleFields",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testMustRewrite",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testBlendedRewriteMethod",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testIllegalArguments",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testToQuery",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testFromJson",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testUnknownField",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testQueryWrappedInArray",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testFromXContent",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testUnknownObjectException",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    },
    {
     "id": "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "displayName": "testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
     "methodName": "testNumeric",
     "className": "org.elasticsearch.index.query.PrefixQueryBuilderTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091437
 }
]

[
 "TEST_STARTED",
 "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,490][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node}{hw1WS5kyRtWPcV2ykn277Q}{local}{local[408]}, reason: test setting state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,495][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,495][INFO ][org.elasticsearch.plugins] [class org.elasticsearch.test.AbstractQueryTestCase] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,508][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,508][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,508][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,510][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,510][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,510][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,512][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,512][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,513][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,514][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,516][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,516][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,516][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,519][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,519][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,519][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,520][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,521][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,521][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,523][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,523][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,523][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,526][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point lat_lon parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,527][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:31,527][WARN ][org.elasticsearch.deprecation.index.mapper]  [oTQrcBpCL] geo_point geohash_prefix parameter is deprecated and will be removed in the next major release%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEqualsAndHashcode(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091485,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseFailsWithMultipleFields(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091529,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMustRewrite(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091532,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091535,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBlendedRewriteMethod(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091538,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIllegalArguments(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091542,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToQuery(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091545,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromJson(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091562,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownField(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091565,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryWrappedInArray(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091567,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFromXContent(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091570,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownObjectException(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091578,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumeric(org.elasticsearch.index.query.PrefixQueryBuilderTests)",
  "startTimestamp": 1473936091581,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.PrefixQueryBuilderTests",
  "startTimestamp": 1473936091437,
  "executionTime": 153
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.collect.EvictingQueueTests",
   "displayName": "org.elasticsearch.common.collect.EvictingQueueTests",
   "methodName": null,
   "className": "org.elasticsearch.common.collect.EvictingQueueTests",
   "children": [
    {
     "id": "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeThree",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeZero",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testEvictingAfterThree",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testCreateWithZeroSize",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testAddAll",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testRemainingCapacityMaximumSizeOne",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testEvictingAfterOne",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    },
    {
     "id": "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "displayName": "testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
     "methodName": "testCreateWithNegativeSize",
     "className": "org.elasticsearch.common.collect.EvictingQueueTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091596
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeThree(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091613,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeZero(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091615,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvictingAfterThree(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091617,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateWithZeroSize(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091619,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddAll(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091621,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRemainingCapacityMaximumSizeOne(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091623,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEvictingAfterOne(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091625,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateWithNegativeSize(org.elasticsearch.common.collect.EvictingQueueTests)",
  "startTimestamp": 1473936091627,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.collect.EvictingQueueTests",
  "startTimestamp": 1473936091596,
  "executionTime": 35
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "displayName": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
   "children": [
    {
     "id": "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testThatSerializationIncludesAllElements",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    },
    {
     "id": "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "displayName": "testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
     "methodName": "testDefaultConfiguration",
     "className": "org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936091638
 }
]

[
 "TEST_STARTED",
 "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,666][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,694][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,694][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,697][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,700][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,700][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,826][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,826][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,826][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[30]}, bound_addresses {local[30]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,827][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{fh-fTYo_TXCJydXl0ue_PQ}{EYOgaSpdQ2-iRnXtwKvz5A}{local}{local[30]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,828][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,841][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,863][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,925][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:31,944][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testThatSerializationIncludesAllElements]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSerializationIncludesAllElements(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1473936091655,
  "executionTime": 349
 }
]

[
 "TEST_STARTED",
 "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,011][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,061][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,073][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1473936092004,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,110][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,164][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,178][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1473936092103,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,214][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,259][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,269][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [CompletionFieldMapper2xTests#testDefaultConfiguration]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultConfiguration(org.elasticsearch.index.mapper.CompletionFieldMapper2xTests)",
  "startTimestamp": 1473936092209,
  "executionTime": 84
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,293][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,294][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,294][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T02:41:32,295][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.CompletionFieldMapper2xTests",
  "startTimestamp": 1473936091638,
  "executionTime": 666
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
   "children": [
    {
     "id": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testBwCompatDocValues",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testMultiFields",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testDocValues",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.BooleanFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936092308
 }
]

[
 "TEST_STARTED",
 "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,326][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,347][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,347][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,349][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,351][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,352][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,435][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,435][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,435][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[31]}, bound_addresses {local[31]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,436][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{zYy76aE3TUi66GPPis17sA}{Kx20NVYkRGC2f90QNuuI6w}{local}{local[31]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,437][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,447][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,460][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,518][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,530][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,568][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,577][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test_old] Expected a boolean for property [index] but got [no]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,577][WARN ][org.elasticsearch.deprecation.index.mapper] [node_s_0] [test_old] Expected a boolean for property [index] but got [not_analyzed]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,578][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [BooleanFieldMapperTests#testBwCompatDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBwCompatDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092320,
  "executionTime": 290
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,617][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,654][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,664][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testSerialization]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092610,
  "executionTime": 78
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,696][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,740][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,755][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092688,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,786][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,827][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,839][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testMultiFields]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiFields(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092780,
  "executionTime": 86
 }
]

[
 "TEST_STARTED",
 "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,871][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,914][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,925][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [BooleanFieldMapperTests#testDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValues(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092867,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,955][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:32,998][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,011][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,051][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,063][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [BooleanFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.BooleanFieldMapperTests)",
  "startTimestamp": 1473936092949,
  "executionTime": 151
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,100][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,101][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,101][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T18:41:33,102][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.BooleanFieldMapperTests",
  "startTimestamp": 1473936092308,
  "executionTime": 800
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.bytes.PagedBytesReferenceTests",
   "displayName": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
   "methodName": null,
   "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
   "children": [
    {
     "id": "ID#testEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testEquals",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testIteratorRandom(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testIteratorRandom(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testIteratorRandom",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceWriteToOutputStream",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testToUtf8(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testToUtf8(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testToUtf8",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testGet(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testGet(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testGet",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testArrayOffset",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSinglePage",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testStreamInputMarkAndReset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testStreamInputMarkAndReset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testStreamInputMarkAndReset",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testHashCode(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testHashCode(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testHashCode",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceToBytesRef",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testToBytesRefMaterializedPages(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testToBytesRefMaterializedPages(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testToBytesRefMaterializedPages",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testInputStreamSkip(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testInputStreamSkip(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testInputStreamSkip",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testToBytesRefSharedPage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testToBytesRefSharedPage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testToBytesRefSharedPage",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceIterator",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceEquals",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testStreamInput",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testCopyBytesRefSharesBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testCopyBytesRefSharesBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testCopyBytesRefSharesBytes",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testLength(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testLength(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testLength",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testToBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testToBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testToBytes",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceStreamInput",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceCopyBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceCopyBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceCopyBytesRef",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testWriteToOutputStream",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSliceArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSliceArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSliceArrayOffset",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testCompareTo(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testCompareTo(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testCompareTo",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testIterator",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testRandomReads(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testRandomReads(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testRandomReads",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testHasSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testHasSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testHasSinglePage",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testBasicEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testBasicEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testBasicEquals",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testSlice(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testSlice(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testSlice",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testToBytesRef",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testStreamInputBulkReadWithOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testStreamInputBulkReadWithOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testStreamInputBulkReadWithOffset",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    },
    {
     "id": "ID#testEmptyToBytesRefIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "displayName": "testEmptyToBytesRefIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
     "methodName": "testEmptyToBytesRefIterator",
     "className": "org.elasticsearch.common.bytes.PagedBytesReferenceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936093115
 }
]

[
 "TEST_STARTED",
 "ID#testEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093132,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testIteratorRandom(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIteratorRandom(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093135,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testSliceWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093149,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testToUtf8(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToUtf8(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093175,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testGet(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGet(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093178,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093189,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093199,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testStreamInputMarkAndReset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamInputMarkAndReset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093230,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testHashCode(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHashCode(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093337,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testSliceToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093344,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testToBytesRefMaterializedPages(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToBytesRefMaterializedPages(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093348,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testInputStreamSkip(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInputStreamSkip(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093358,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testToBytesRefSharedPage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToBytesRefSharedPage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093366,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testSliceIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093368,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSliceEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093371,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093374,
  "executionTime": 19
 }
]

[
 "TEST_STARTED",
 "ID#testCopyBytesRefSharesBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCopyBytesRefSharesBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093393,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testLength(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLength(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093397,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testToBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToBytes(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093406,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testSliceStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceStreamInput(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093421,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSliceCopyBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceCopyBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093433,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteToOutputStream(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093449,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testSliceArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSliceArrayOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093458,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testCompareTo(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompareTo(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093465,
  "executionTime": 152
 }
]

[
 "TEST_STARTED",
 "ID#testIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093617,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testRandomReads(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomReads(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093655,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testHasSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHasSinglePage(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093683,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testBasicEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicEquals(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093687,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testSlice(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSlice(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093690,
  "executionTime": 15
 }
]

[
 "TEST_STARTED",
 "ID#testToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testToBytesRef(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093705,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testStreamInputBulkReadWithOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamInputBulkReadWithOffset(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093709,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyToBytesRefIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyToBytesRefIterator(org.elasticsearch.common.bytes.PagedBytesReferenceTests)",
  "startTimestamp": 1473936093719,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.bytes.PagedBytesReferenceTests",
  "startTimestamp": 1473936093115,
  "executionTime": 607
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.RangeQueryRewriteTests",
   "displayName": "org.elasticsearch.index.query.RangeQueryRewriteTests",
   "methodName": null,
   "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
   "children": [
    {
     "id": "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteMissingReader",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    },
    {
     "id": "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteMissingField",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    },
    {
     "id": "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "displayName": "testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
     "methodName": "testRewriteEmptyReader",
     "className": "org.elasticsearch.index.query.RangeQueryRewriteTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936093728
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,825][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,847][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,847][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,850][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,852][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,852][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,959][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,960][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,960][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[32]}, bound_addresses {local[32]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,961][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{hc_fNKpuSLyc566wngkY2Q}{oPi_1MIWQTGo1ECjL31hDA}{local}{local[32]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,962][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,975][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:33,992][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,034][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,085][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteMissingReader]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteMissingReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1473936093739,
  "executionTime": 374
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,117][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,157][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,169][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteMissingField]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteMissingField(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1473936094113,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,201][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,247][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,283][INFO ][org.elasticsearch.index.query] [RangeQueryRewriteTests#testRewriteEmptyReader]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRewriteEmptyReader(org.elasticsearch.index.query.RangeQueryRewriteTests)",
  "startTimestamp": 1473936094195,
  "executionTime": 111
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,306][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,307][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,307][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T06:41:34,308][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.RangeQueryRewriteTests",
  "startTimestamp": 1473936093728,
  "executionTime": 586
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.metadata.IndexMetaDataTests",
   "displayName": "org.elasticsearch.cluster.metadata.IndexMetaDataTests",
   "methodName": null,
   "className": "org.elasticsearch.cluster.metadata.IndexMetaDataTests",
   "children": [
    {
     "id": "ID#testSelectShrinkShards(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "displayName": "testSelectShrinkShards(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "methodName": "testSelectShrinkShards",
     "className": "org.elasticsearch.cluster.metadata.IndexMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testIndexMetaDataSerialization(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "displayName": "testIndexMetaDataSerialization(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "methodName": "testIndexMetaDataSerialization",
     "className": "org.elasticsearch.cluster.metadata.IndexMetaDataTests",
     "children": []
    },
    {
     "id": "ID#testGetRoutingFactor(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "displayName": "testGetRoutingFactor(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
     "methodName": "testGetRoutingFactor",
     "className": "org.elasticsearch.cluster.metadata.IndexMetaDataTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094319
 }
]

[
 "TEST_STARTED",
 "ID#testSelectShrinkShards(org.elasticsearch.cluster.metadata.IndexMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSelectShrinkShards(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
  "startTimestamp": 1473936094335,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIndexMetaDataSerialization(org.elasticsearch.cluster.metadata.IndexMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexMetaDataSerialization(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
  "startTimestamp": 1473936094338,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testGetRoutingFactor(org.elasticsearch.cluster.metadata.IndexMetaDataTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetRoutingFactor(org.elasticsearch.cluster.metadata.IndexMetaDataTests)",
  "startTimestamp": 1473936094343,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.metadata.IndexMetaDataTests",
  "startTimestamp": 1473936094319,
  "executionTime": 28
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.translog.TranslogVersionTests",
   "displayName": "org.elasticsearch.index.translog.TranslogVersionTests",
   "methodName": null,
   "className": "org.elasticsearch.index.translog.TranslogVersionTests",
   "children": [
    {
     "id": "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testV1ChecksummedTranslogVersion",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testV0LegacyTranslogVersion",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testTruncatedTranslog",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    },
    {
     "id": "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
     "displayName": "testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
     "methodName": "testCorruptedTranslogs",
     "className": "org.elasticsearch.index.translog.TranslogVersionTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094350
 }
]

[
 "TEST_STARTED",
 "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testV1ChecksummedTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1473936094363,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testV0LegacyTranslogVersion(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1473936094369,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTruncatedTranslog(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1473936094376,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorruptedTranslogs(org.elasticsearch.index.translog.TranslogVersionTests)",
  "startTimestamp": 1473936094382,
  "executionTime": 15
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.translog.TranslogVersionTests",
  "startTimestamp": 1473936094350,
  "executionTime": 48
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.ZenPingTests",
   "displayName": "org.elasticsearch.discovery.zen.ZenPingTests",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.ZenPingTests",
   "children": [
    {
     "id": "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
     "displayName": "testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
     "methodName": "testPingCollection",
     "className": "org.elasticsearch.discovery.zen.ZenPingTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094403
 }
]

[
 "TEST_STARTED",
 "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPingCollection(org.elasticsearch.discovery.zen.ZenPingTests)",
  "startTimestamp": 1473936094413,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.ZenPingTests",
  "startTimestamp": 1473936094403,
  "executionTime": 13
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "displayName": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "methodName": null,
   "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
   "children": [
    {
     "id": "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testAddedReplicaAfterPrimaryOperation",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testWaitForActiveShards",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testDemotedPrimary",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testReplicationWithShadowIndex",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testIndexDeletedAfterPrimaryOperation",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    },
    {
     "id": "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "displayName": "testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
     "methodName": "testReplication",
     "className": "org.elasticsearch.action.support.replication.ReplicationOperationTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094420
 }
]

[
 "TEST_STARTED",
 "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAddedReplicaAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094437,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWaitForActiveShards(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094441,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDemotedPrimary(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094443,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicationWithShadowIndex(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094449,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexDeletedAfterPrimaryOperation(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094453,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplication(org.elasticsearch.action.support.replication.ReplicationOperationTests)",
  "startTimestamp": 1473936094455,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.replication.ReplicationOperationTests",
  "startTimestamp": 1473936094420,
  "executionTime": 38
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests",
   "displayName": "org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests",
   "children": [
    {
     "id": "ID#testSerialization(org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests)",
     "displayName": "testSerialization(org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests)",
     "methodName": "testSerialization",
     "className": "org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094461
 }
]

[
 "TEST_STARTED",
 "ID#testSerialization(org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSerialization(org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests)",
  "startTimestamp": 1473936094473,
  "executionTime": 2
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.allocation.ClusterAllocationExplainRequestTests",
  "startTimestamp": 1473936094461,
  "executionTime": 15
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.network.NetworkServiceTests",
   "displayName": "org.elasticsearch.common.network.NetworkServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.common.network.NetworkServiceTests",
   "children": [
    {
     "id": "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMulticastV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishAnyLocalV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishAnyLocalV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMulticastV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindAnyLocalV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMultipleAddressesWithWildcard",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishMulticastV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testPublishMulticastV4",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindMultipleAddresses",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    },
    {
     "id": "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "displayName": "testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
     "methodName": "testBindAnyLocalV6",
     "className": "org.elasticsearch.common.network.NetworkServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094480
 }
]

[
 "TEST_STARTED",
 "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094496,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094498,
  "executionTime": 144
 }
]

[
 "TEST_STARTED",
 "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094643,
  "executionTime": 125
 }
]

[
 "TEST_STARTED",
 "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094768,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindAnyLocalV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094769,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMultipleAddressesWithWildcard(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094771,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishMulticastV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094772,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPublishMulticastV4(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094773,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindMultipleAddresses(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094775,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBindAnyLocalV6(org.elasticsearch.common.network.NetworkServiceTests)",
  "startTimestamp": 1473936094777,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.network.NetworkServiceTests",
  "startTimestamp": 1473936094480,
  "executionTime": 299
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.analysis.StopAnalyzerTests",
   "displayName": "org.elasticsearch.index.analysis.StopAnalyzerTests",
   "methodName": null,
   "className": "org.elasticsearch.index.analysis.StopAnalyzerTests",
   "children": [
    {
     "id": "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
     "displayName": "testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
     "methodName": "testDefaultsCompoundAnalysis",
     "className": "org.elasticsearch.index.analysis.StopAnalyzerTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094782
 }
]

[
 "TEST_STARTED",
 "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaultsCompoundAnalysis(org.elasticsearch.index.analysis.StopAnalyzerTests)",
  "startTimestamp": 1473936094791,
  "executionTime": 12
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.analysis.StopAnalyzerTests",
  "startTimestamp": 1473936094782,
  "executionTime": 22
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.KeywordFieldMapperTests",
   "displayName": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
   "children": [
    {
     "id": "ID#testNullValue(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testNullValue(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testNullValue",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEnableNorms(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testEnableNorms(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testEnableNorms",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDefaults(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testDefaults(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testDefaults",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIgnoreAbove(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testIgnoreAbove(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testIgnoreAbove",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testIndexOptions(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testIndexOptions(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testIndexOptions",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDisableDocValues(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testDisableDocValues(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testDisableDocValues",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testBoostImplicitlyEnablesNormsOnOldIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testBoostImplicitlyEnablesNormsOnOldIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testBoostImplicitlyEnablesNormsOnOldIndex",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testDisableIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testDisableIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testDisableIndex",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEmptyName(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testEmptyName(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testEmptyName",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testEnableStore(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testEnableStore(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testEnableStore",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    },
    {
     "id": "ID#testBoost(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "displayName": "testBoost(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
     "methodName": "testBoost",
     "className": "org.elasticsearch.index.mapper.KeywordFieldMapperTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936094810
 }
]

[
 "TEST_STARTED",
 "ID#testNullValue(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,826][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,841][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,842][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,844][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,846][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,846][INFO ][org.elasticsearch.plugins] [node_s_0] loaded plugin [org.elasticsearch.test.InternalSettingsPlugin]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,925][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,925][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,926][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[33]}, bound_addresses {local[33]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,926][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{NvgvoVCOSXmm7sYzvBs3eg}{A-LYz-OvT_-mQxdFBRdE8Q}{local}{local[33]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,927][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,936][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:34,949][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,027][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,037][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testNullValue]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNullValue(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936094820,
  "executionTime": 242
 }
]

[
 "TEST_STARTED",
 "ID#testEnableNorms(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,067][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,105][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,116][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testEnableNorms]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnableNorms(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095062,
  "executionTime": 81
 }
]

[
 "TEST_STARTED",
 "ID#testDefaults(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,147][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,182][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,192][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testDefaults]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDefaults(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095143,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoreAbove(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,217][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,253][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,262][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testIgnoreAbove]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoreAbove(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095212,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testIndexOptions(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,290][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,327][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,337][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testIndexOptions]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexOptions(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095284,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testDisableDocValues(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,362][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,400][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,412][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testDisableDocValues]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableDocValues(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095357,
  "executionTime": 77
 }
]

[
 "TEST_STARTED",
 "ID#testBoostImplicitlyEnablesNormsOnOldIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,440][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,472][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,484][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test2] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,519][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test2][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,528][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test2] [KeywordFieldMapperTests#testBoostImplicitlyEnablesNormsOnOldIndex]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoostImplicitlyEnablesNormsOnOldIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095435,
  "executionTime": 126
 }
]

[
 "TEST_STARTED",
 "ID#testDisableIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,566][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,600][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,610][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testDisableIndex]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableIndex(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095561,
  "executionTime": 88
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyName(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,655][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,691][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,704][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test_old] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,741][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test_old][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,785][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test_old] [KeywordFieldMapperTests#testEmptyName]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyName(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095649,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testEnableStore(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,827][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,861][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,870][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testEnableStore]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnableStore(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095820,
  "executionTime": 72
 }
]

[
 "TEST_STARTED",
 "ID#testBoost(org.elasticsearch.index.mapper.KeywordFieldMapperTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,898][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,940][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,951][INFO ][org.elasticsearch.index.mapper] [node_s_0] [test] [KeywordFieldMapperTests#testBoost]: cleaning up after test%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoost(org.elasticsearch.index.mapper.KeywordFieldMapperTests)",
  "startTimestamp": 1473936095892,
  "executionTime": 83
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,975][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,975][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,976][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T16:41:35,977][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.KeywordFieldMapperTests",
  "startTimestamp": 1473936094810,
  "executionTime": 1176
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.shard.RefreshListenersTests",
   "displayName": "org.elasticsearch.index.shard.RefreshListenersTests",
   "methodName": null,
   "className": "org.elasticsearch.index.shard.RefreshListenersTests",
   "children": [
    {
     "id": "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testTooMany",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testLotsOfThreads",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testConcurrentRefresh",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    },
    {
     "id": "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "displayName": "testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
     "methodName": "testAfterRefresh",
     "className": "org.elasticsearch.index.shard.RefreshListenersTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936095992
 }
]

[
 "TEST_STARTED",
 "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooMany(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1473936096004,
  "executionTime": 33
 }
]

[
 "TEST_STARTED",
 "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLotsOfThreads(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1473936096037,
  "executionTime": 5278
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1473936101315,
  "executionTime": 3396
 }
]

[
 "TEST_STARTED",
 "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAfterRefresh(org.elasticsearch.index.shard.RefreshListenersTests)",
  "startTimestamp": 1473936104711,
  "executionTime": 27
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.shard.RefreshListenersTests",
  "startTimestamp": 1473936095992,
  "executionTime": 8752
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.IndicesServiceTests",
   "displayName": "org.elasticsearch.indices.IndicesServiceTests",
   "methodName": null,
   "className": "org.elasticsearch.indices.IndicesServiceTests",
   "children": [
    {
     "id": "ID#testPendingTasks(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testPendingTasks(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testPendingTasks",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testCanDeleteIndexContent(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testCanDeleteIndexContent(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testCanDeleteIndexContent",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testIndexAndTombstoneWithSameNameOnStartup(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testIndexAndTombstoneWithSameNameOnStartup(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testIndexAndTombstoneWithSameNameOnStartup",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testVerifyIfIndexContentDeleted(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testVerifyIfIndexContentDeleted(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testVerifyIfIndexContentDeleted",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexStore(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testDeleteIndexStore(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testDeleteIndexStore",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testCanDeleteShardContent(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testCanDeleteShardContent(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testCanDeleteShardContent",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    },
    {
     "id": "ID#testDanglingIndicesWithAliasConflict(org.elasticsearch.indices.IndicesServiceTests)",
     "displayName": "testDanglingIndicesWithAliasConflict(org.elasticsearch.indices.IndicesServiceTests)",
     "methodName": "testDanglingIndicesWithAliasConflict",
     "className": "org.elasticsearch.indices.IndicesServiceTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936104751
 }
]

[
 "TEST_STARTED",
 "ID#testPendingTasks(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,768][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,786][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,787][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,789][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,791][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,791][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,889][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,889][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,890][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[34]}, bound_addresses {local[34]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,891][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{73RtDI_ITpems_esXaOG0g}{WfYpm9glShKYQYvLqeGSnw}{local}{local[34]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,891][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,899][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,915][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,986][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:44,999][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[test/ae_LYQ6UQfy01B4NHTaO7w]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,025][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[test/ae_LYQ6UQfy01B4NHTaO7w]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,035][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testPendingTasks]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,047][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,048][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,048][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,049][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,055][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,069][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,070][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,072][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,073][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,074][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,148][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,148][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,149][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[35]}, bound_addresses {local[35]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,149][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{lrT3EhneROec5EMiMsEfJg}{c3XMYHhqQmCwHjKVaC4YNg}{local}{local[35]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,150][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,158][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPendingTasks(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936104762,
  "executionTime": 407
 }
]

[
 "TEST_STARTED",
 "ID#testCanDeleteIndexContent(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,173][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testCanDeleteIndexContent]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,174][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,175][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,175][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,175][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,180][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,195][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,195][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,198][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,199][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,199][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,276][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,276][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,276][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[36]}, bound_addresses {local[36]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,277][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{C09-YJRwRJ26gN2kaYNlPg}{0vGKDvvFQ2ug5-fjX0doPQ}{local}{local[36]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,277][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,285][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanDeleteIndexContent(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936105169,
  "executionTime": 127
 }
]

[
 "TEST_STARTED",
 "ID#testIndexAndTombstoneWithSameNameOnStartup(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,299][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testIndexAndTombstoneWithSameNameOnStartup]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,300][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,300][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,300][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,302][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,307][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,322][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,322][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,325][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,327][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,327][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,401][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,401][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,402][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[37]}, bound_addresses {local[37]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,402][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{PZ9GGYhmQZOaRyvQRoYLuA}{oQlWknSGSfmWAr_pEc7SCA}{local}{local[37]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,402][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,412][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexAndTombstoneWithSameNameOnStartup(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936105296,
  "executionTime": 126
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyIfIndexContentDeleted(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,438][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testVerifyIfIndexContentDeleted]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,438][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,439][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,439][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,440][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,446][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,460][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,460][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,463][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,464][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,464][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,542][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,542][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,543][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[38]}, bound_addresses {local[38]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,543][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{faxQ5zoAQW2zWbAsYlgtJw}{5G67w4x5Q6u3zXLIJaj_Ow}{local}{local[38]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,544][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,552][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyIfIndexContentDeleted(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936105422,
  "executionTime": 142
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexStore(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,570][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,615][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,671][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,706][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,720][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test/4pxrzqwNR0S27n79baDOdg] create_mapping [type]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,852][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] closing indices [[[test/4pxrzqwNR0S27n79baDOdg]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,868][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] opening indices [[[test/4pxrzqwNR0S27n79baDOdg]]]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,912][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,922][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testDeleteIndexStore]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,941][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,941][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,941][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,943][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,949][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,964][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,964][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,966][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,968][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:45,968][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,043][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,043][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,044][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[39]}, bound_addresses {local[39]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,044][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{tocAMiExQf-FYx7SCIbfSA}{JlDMP3vwRFC5HzsfAMJxew}{local}{local[39]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,045][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,090][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexStore(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936105564,
  "executionTime": 537
 }
]

[
 "TEST_STARTED",
 "ID#testCanDeleteShardContent(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,107][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,143][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,161][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testCanDeleteShardContent]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,176][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,177][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,177][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,178][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,186][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,200][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,200][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,203][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,204][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,204][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,277][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,278][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,278][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[40]}, bound_addresses {local[40]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,279][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{K-gmz35VRp-5_Qk2l6AVEw}{mWxDuAvPTHqEM0lROGnguA}{local}{local[40]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,279][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,288][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanDeleteShardContent(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936106101,
  "executionTime": 197
 }
]

[
 "TEST_STARTED",
 "ID#testDanglingIndicesWithAliasConflict(org.elasticsearch.indices.IndicesServiceTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,303][INFO ][org.elasticsearch.cluster.metadata] [node_s_0] [test-idx1] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings []%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,363][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s_0] Cluster health status changed from [YELLOW] to [GREEN] (reason: [shards started [[test-idx1][0]] ...]).%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,388][WARN ][org.elasticsearch.gateway] [node_s_0] ignoring dangled index [[test-alias/IV1_M8XKSXC9ldjhRNPH3Q]] on node [{node_s_0}{K-gmz35VRp-5_Qk2l6AVEw}{mWxDuAvPTHqEM0lROGnguA}{local}{local[40]}] due to an existing alias with the same name%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,396][INFO ][org.elasticsearch.gateway] [node_s_0] auto importing dangled indices [[test-alias/IV1_M8XKSXC9ldjhRNPH3Q]/OPEN] from [{node_s_0}{K-gmz35VRp-5_Qk2l6AVEw}{mWxDuAvPTHqEM0lROGnguA}{local}{local[40]}]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,471][INFO ][org.elasticsearch.indices] [node_s_0] [IndicesServiceTests#testDanglingIndicesWithAliasConflict]: cleaning up after test%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,503][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,503][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,503][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,505][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,513][INFO ][org.elasticsearch.node   ] [node_s_0] initializing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,548][INFO ][org.elasticsearch.env    ] [node_s_0] using [1] data paths, mounts [[Acer (C:)]], net usable_space [789.1gb], net total_space [930.9gb], spins? [unknown], types [NTFS]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,548][INFO ][org.elasticsearch.env    ] [node_s_0] heap size [491mb], compressed ordinary object pointers [true]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,550][INFO ][org.elasticsearch.node   ] [node_s_0] version[5.0.0-alpha6-SNAPSHOT], pid[8548], build[Unknown/Unknown], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_65/25.65-b01]%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,552][INFO ][org.elasticsearch.plugins] [node_s_0] no modules loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,552][INFO ][org.elasticsearch.plugins] [node_s_0] no plugins loaded%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,636][INFO ][org.elasticsearch.node   ] [node_s_0] initialized%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,636][INFO ][org.elasticsearch.node   ] [node_s_0] starting ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,636][INFO ][org.elasticsearch.transport] [node_s_0] publish_address {local[41]}, bound_addresses {local[41]}%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,637][INFO ][org.elasticsearch.cluster.service] [node_s_0] new_master {node_s_0}{XkRIPoBGSSSCdpcPypOGJQ}{5Odq8Ns2TQGiIqVixzB9Fg}{local}{local[41]}, reason: local-disco-initial_connect(master)%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,638][INFO ][org.elasticsearch.node   ] [node_s_0] started%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,649][INFO ][org.elasticsearch.gateway] [node_s_0] recovered [0] indices into cluster_state%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDanglingIndicesWithAliasConflict(org.elasticsearch.indices.IndicesServiceTests)",
  "startTimestamp": 1473936106298,
  "executionTime": 365
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,663][INFO ][org.elasticsearch.node   ] [node_s_0] stopping ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,664][INFO ][org.elasticsearch.node   ] [node_s_0] stopped%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,664][INFO ][org.elasticsearch.node   ] [node_s_0] closing ...%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T10:41:46,665][INFO ][org.elasticsearch.node   ] [node_s_0] closed%0D%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.IndicesServiceTests",
  "startTimestamp": 1473936104751,
  "executionTime": 1954
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "displayName": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "methodName": null,
   "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
   "children": [
    {
     "id": "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testScaleDown",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testFixedForcedExecution",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testRejectionMessageAndShuttingDownFlag",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testScaleUp",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testInheritContext",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testFixedRejected",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    },
    {
     "id": "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "displayName": "testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
     "methodName": "testGetTasks",
     "className": "org.elasticsearch.common.util.concurrent.EsExecutorsTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936106711
 }
]

[
 "TEST_STARTED",
 "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScaleDown(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106723,
  "executionTime": 131
 }
]

[
 "TEST_STARTED",
 "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFixedForcedExecution(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106854,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRejectionMessageAndShuttingDownFlag(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106856,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScaleUp(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106859,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInheritContext(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106863,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFixedRejected(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106865,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetTasks(org.elasticsearch.common.util.concurrent.EsExecutorsTests)",
  "startTimestamp": 1473936106867,
  "executionTime": 7
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.common.util.concurrent.EsExecutorsTests",
  "startTimestamp": 1473936106711,
  "executionTime": 165
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.BootstrapCheckTests",
   "displayName": "org.elasticsearch.bootstrap.BootstrapCheckTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
   "children": [
    {
     "id": "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testLogMessageInProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testFileDescriptorLimitsThrowsOnInvalidLimit",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testNoLogMessageInNonProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxSizeVirtualMemory",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testHeapSizeCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testEnforceLimitsWhenBoundToNonLocalAddress",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testOnOutOfMemoryErrorCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testFileDescriptorLimits",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testAlwaysEnforcedChecks",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testExceptionAggregation",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testClientJvmCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxMapCountCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMaxNumberOfThreadsCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testNonProductionMode",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMlockallCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testIgnoringSystemChecks",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testOnErrorCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testMightForkCheck",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    },
    {
     "id": "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "displayName": "testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
     "methodName": "testEnforceLimitsWhenPublishingToNonLocalAddress",
     "className": "org.elasticsearch.bootstrap.BootstrapCheckTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936106881
 }
]

[
 "TEST_STARTED",
 "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLogMessageInProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106893,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileDescriptorLimitsThrowsOnInvalidLimit(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106964,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoLogMessageInNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106966,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,970][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,972][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,973][INFO ][org.elasticsearch.bootstrap] [testMaxSizeVirtualMemory] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxSizeVirtualMemory(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106968,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,976][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,976][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,976][INFO ][org.elasticsearch.bootstrap] [testHeapSizeCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHeapSizeCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106973,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnforceLimitsWhenBoundToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106976,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,992][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,992][WARN ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,992][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,993][INFO ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,993][WARN ][org.elasticsearch.bootstrap] [testOnOutOfMemoryErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnOutOfMemoryErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106988,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,996][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,997][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:46,997][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimits] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFileDescriptorLimits(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106993,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAlwaysEnforcedChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936106997,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,003][INFO ][org.elasticsearch.bootstrap] [testExceptionAggregation] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionAggregation(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107000,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,005][INFO ][org.elasticsearch.bootstrap] [testClientJvmCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,005][INFO ][org.elasticsearch.bootstrap] [testClientJvmCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClientJvmCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107003,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,007][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,008][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,008][INFO ][org.elasticsearch.bootstrap] [testMaxMapCountCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxMapCountCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107005,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,010][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,011][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,011][INFO ][org.elasticsearch.bootstrap] [testMaxNumberOfThreadsCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMaxNumberOfThreadsCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107008,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonProductionMode(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107011,
  "executionTime": 5
 }
]

[
 "TEST_STARTED",
 "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,017][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,018][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,018][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,018][INFO ][org.elasticsearch.bootstrap] [testFileDescriptorLimitsThrowsOnInvalidLimit] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMlockallCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107016,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,023][INFO ][org.elasticsearch.bootstrap] [testIgnoringSystemChecks] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIgnoringSystemChecks(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107019,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,029][INFO ][org.elasticsearch.bootstrap] [testOnErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,029][WARN ][org.elasticsearch.bootstrap] [testOnErrorCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,029][INFO ][org.elasticsearch.bootstrap] [testOnErrorCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnErrorCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107027,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,032][INFO ][org.elasticsearch.bootstrap] [testMightForkCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,032][WARN ][org.elasticsearch.bootstrap] [testMightForkCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,033][INFO ][org.elasticsearch.bootstrap] [testMightForkCheck] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks%0D%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-09-15T08:11:47,033][WARN ][org.elasticsearch.bootstrap] [testMightForkCheck] enforcing bootstrap checks but ignoring system bootstrap checks, consider not ignoring system checks%0D%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMightForkCheck(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107030,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnforceLimitsWhenPublishingToNonLocalAddress(org.elasticsearch.bootstrap.BootstrapCheckTests)",
  "startTimestamp": 1473936107033,
  "executionTime": 3
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.BootstrapCheckTests",
  "startTimestamp": 1473936106881,
  "executionTime": 157
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.store.StoreTests",
   "displayName": "org.elasticsearch.index.store.StoreTests",
   "methodName": null,
   "className": "org.elasticsearch.index.store.StoreTests",
   "children": [
    {
     "id": "ID#testOnCloseCallback(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testOnCloseCallback(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testOnCloseCallback",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testMarkCorruptedOnTruncatedSegmentsFile(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testMarkCorruptedOnTruncatedSegmentsFile(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testMarkCorruptedOnTruncatedSegmentsFile",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testVerifyingIndexInput(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testVerifyingIndexInput(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testVerifyingIndexInput",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testStoreStats(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testStoreStats(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testStoreStats",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testMetadataSnapshotStreaming(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testMetadataSnapshotStreaming(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testMetadataSnapshotStreaming",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testCheckIntegrity(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testCheckIntegrity(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testCheckIntegrity",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testVerifyingIndexOutputWithBogusInput(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testVerifyingIndexOutputWithBogusInput(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testVerifyingIndexOutputWithBogusInput",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testDeserializeCorruptionException(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testDeserializeCorruptionException(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testDeserializeCorruptionException",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testCanOpenIndex(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testCanOpenIndex(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testCanOpenIndex",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testCleanupFromSnapshot(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testCleanupFromSnapshot(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testCleanupFromSnapshot",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testCanReadOldCorruptionMarker(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testCanReadOldCorruptionMarker(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testCanReadOldCorruptionMarker",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testRecoveryDiff(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testRecoveryDiff(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testRecoveryDiff",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testRefCount(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testRefCount(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testRefCount",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testVerifyingIndexOutput(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testVerifyingIndexOutput(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testVerifyingIndexOutput",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testUserDataRead(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testUserDataRead(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testUserDataRead",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testNewChecksums(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testNewChecksums(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testNewChecksums",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testVerifyingIndexOutputOnEmptyFile(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testVerifyingIndexOutputOnEmptyFile(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testVerifyingIndexOutputOnEmptyFile",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testStreamStoreFilesMetaData(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testStreamStoreFilesMetaData(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testStreamStoreFilesMetaData",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    },
    {
     "id": "ID#testChecksumCorrupted(org.elasticsearch.index.store.StoreTests)",
     "displayName": "testChecksumCorrupted(org.elasticsearch.index.store.StoreTests)",
     "methodName": "testChecksumCorrupted",
     "className": "org.elasticsearch.index.store.StoreTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936107048
 }
]

[
 "TEST_STARTED",
 "ID#testOnCloseCallback(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnCloseCallback(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107059,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testMarkCorruptedOnTruncatedSegmentsFile(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMarkCorruptedOnTruncatedSegmentsFile(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107061,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyingIndexInput(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyingIndexInput(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107067,
  "executionTime": 7
 }
]

[
 "TEST_STARTED",
 "ID#testStoreStats(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStoreStats(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107074,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testMetadataSnapshotStreaming(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetadataSnapshotStreaming(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107078,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testCheckIntegrity(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckIntegrity(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107082,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyingIndexOutputWithBogusInput(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyingIndexOutputWithBogusInput(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107085,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testDeserializeCorruptionException(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeserializeCorruptionException(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107086,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testCanOpenIndex(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanOpenIndex(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107090,
  "executionTime": 89
 }
]

[
 "TEST_STARTED",
 "ID#testCleanupFromSnapshot(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCleanupFromSnapshot(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107179,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testCanReadOldCorruptionMarker(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanReadOldCorruptionMarker(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107213,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testRecoveryDiff(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoveryDiff(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107218,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testRefCount(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefCount(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107251,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyingIndexOutput(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyingIndexOutput(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107253,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testUserDataRead(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUserDataRead(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107256,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testNewChecksums(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNewChecksums(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107263,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyingIndexOutputOnEmptyFile(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyingIndexOutputOnEmptyFile(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107287,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testStreamStoreFilesMetaData(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamStoreFilesMetaData(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107291,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testChecksumCorrupted(org.elasticsearch.index.store.StoreTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChecksumCorrupted(org.elasticsearch.index.store.StoreTests)",
  "startTimestamp": 1473936107294,
  "executionTime": 4
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.store.StoreTests",
  "startTimestamp": 1473936107048,
  "executionTime": 258
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bootstrap.JarHellTests",
   "displayName": "org.elasticsearch.bootstrap.JarHellTests",
   "methodName": null,
   "className": "org.elasticsearch.bootstrap.JarHellTests",
   "children": [
    {
     "id": "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDuplicateClasspathLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testWithinSingleJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testInvalidVersions",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testCrazyEclipseClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testValidVersions",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDirsOnClasspath",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testEmptyClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testParseClassPathUnix",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testRequiredJDKVersionIsOK",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testLog4jLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDifferentJars",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBaseDateTimeLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testGoodESVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testXmlBeansLeniency",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBadESVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testEmptyClassPathUnix",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testParseClassPathWindows",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testDirAndJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testRequiredJDKVersionTooOld",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    },
    {
     "id": "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "displayName": "testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
     "methodName": "testBadJDKVersionInJar",
     "className": "org.elasticsearch.bootstrap.JarHellTests",
     "children": []
    }
   ]
  },
  "startTimestamp": 1473936107339
 }
]

[
 "TEST_STARTED",
 "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuplicateClasspathLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936107355,
  "executionTime": 939
 }
]

[
 "TEST_STARTED",
 "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithinSingleJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108294,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidVersions(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108316,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCrazyEclipseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108317,
  "executionTime": 3
 }
]

[
 "TEST_STARTED",
 "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValidVersions(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108320,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDirsOnClasspath(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108321,
  "executionTime": 6
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108328,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "message": "test is designed for unix-like systems only",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:6142250BF50C0ECA]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.bootstrap.JarHellTests.testParseClassPathUnix(JarHellTests.java:251)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108329,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredJDKVersionIsOK(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108331,
  "executionTime": 162
 }
]

[
 "TEST_STARTED",
 "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLog4jLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108494,
  "executionTime": 242
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentJars(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936108736,
  "executionTime": 276
 }
]

[
 "TEST_STARTED",
 "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBaseDateTimeLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936109013,
  "executionTime": 420
 }
]

[
 "TEST_STARTED",
 "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGoodESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936109433,
  "executionTime": 301
 }
]

[
 "TEST_STARTED",
 "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testXmlBeansLeniency(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936109734,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadESVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936109754,
  "executionTime": 255
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "message": "test is designed for unix-like systems only",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only\r\n\tat __randomizedtesting.SeedInfo.seed([9CF13790D965C5A7:B966380E1E7A21B4]:0)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedTest.assumeTrue(RandomizedTest.java:627)\r\n\tat org.apache.lucene.util.LuceneTestCase.assumeTrue(LuceneTestCase.java:845)\r\n\tat org.elasticsearch.bootstrap.JarHellTests.testEmptyClassPathUnix(JarHellTests.java:265)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: test is designed for unix-like systems only",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyClassPathUnix(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936110009,
  "executionTime": 2
 }
]

[
 "TEST_STARTED",
 "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClassPathWindows(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936110011,
  "executionTime": 4
 }
]

[
 "TEST_STARTED",
 "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDirAndJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936110015,
  "executionTime": 137
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredJDKVersionTooOld(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936110152,
  "executionTime": 333
 }
]

[
 "TEST_STARTED",
 "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadJDKVersionInJar(org.elasticsearch.bootstrap.JarHellTests)",
  "startTimestamp": 1473936110486,
  "executionTime": 226
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bootstrap.JarHellTests",
  "startTimestamp": 1473936107339,
  "executionTime": 3396
 }
]

[
 "IDLE",
 {}
]

[
 "QUIT",
 {}
]

