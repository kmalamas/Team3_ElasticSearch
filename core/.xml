<?xml version="1.0" encoding="UTF-8" ?>

<sourcemonitor_metrics>
  <project version="3.5">
    <project_name></project_name>
    <project_directory>C:\Users\kmala\workspace\Team3\core</project_directory>
    <project_language>Java</project_language>
    <ignore_headers_footers>false</ignore_headers_footers>
    <export_raw_numbers>false</export_raw_numbers>
    <metric_names name_count="15">
      <metric_name id="M0" type="number">Lines</metric_name>
      <metric_name id="M1" type="number">Statements</metric_name>
      <metric_name id="M2" type="percent" divisor="M1">Percent Branch Statements</metric_name>
      <metric_name id="M3" type="number">Method Call Statements</metric_name>
      <metric_name id="M4" type="percent" divisor="M0">Percent Lines with Comments</metric_name>
      <metric_name id="M5" type="number">Classes and Interfaces</metric_name>
      <metric_name id="M6" type="ratio" divisor="M5">Methods per Class</metric_name>
      <metric_name id="M7" type="ratio" divisor="M6">Average Statements per Method</metric_name>
      <metric_name id="M8" type="string">Line Number of Most Complex Method</metric_name>
      <metric_name id="M9" type="string">Name of Most Complex Method</metric_name>
      <metric_name id="M10" type="maximum">Maximum Complexity</metric_name>
      <metric_name id="M11" type="string">Line Number of Deepest Block</metric_name>
      <metric_name id="M12" type="maximum">Maximum Block Depth</metric_name>
      <metric_name id="M13" type="average" values="block_depths">Average Block Depth</metric_name>
      <metric_name id="M14" type="average">Average Complexity</metric_name>
    </metric_names>
    <checkpoints checkpoint_count="1">
      <checkpoint checkpoint_name="Baseline" checkpoint_date="2016-11-03" ignore_blank_lines="false" modified_complexity="false">
        <files file_count="5">
          <file file_name="src\main\java\org\elasticsearch\action\admin\indices\stats\CommonStats.java">
            <metrics metric_count="15">
              <metric id="M0">655</metric>
              <metric id="M1">433</metric>
              <metric id="M2">42.0</metric>
              <metric id="M3">243</metric>
              <metric id="M4">4.1</metric>
              <metric id="M5">1</metric>
              <metric id="M6">25.00</metric>
              <metric id="M7">14.56</metric>
              <metric id="M8">232</metric>
              <metric id="M9">CommonStats.add()</metric>
              <metric id="M10">49</metric>
              <metric id="M11">64</metric>
              <metric id="M12">5</metric>
              <metric id="M13">2.81</metric>
              <metric id="M14">6.76</metric>
            </metrics>
            <method_metrics method_count="25">
              <method name="CommonStats.add()" line="232">
                <complexity>49</complexity>
                <statements>96</statements>
                <maximum_depth>4</maximum_depth>
                <calls>96</calls>
              </method>
              <method name="CommonStats.CommonStats()" line="121">
                <complexity>20</complexity>
                <statements>55</statements>
                <maximum_depth>5</maximum_depth>
                <calls>25</calls>
              </method>
              <method name="CommonStats.CommonStats()" line="58">
                <complexity>20</complexity>
                <statements>55</statements>
                <maximum_depth>5</maximum_depth>
                <calls>18</calls>
              </method>
              <method name="CommonStats.CommonStats()" line="54">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="CommonStats.getCompletion()" line="420">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getDocs()" line="365">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getFieldData()" line="415">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getFlush()" line="400">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getGet()" line="380">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getIndexing()" line="375">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getMerge()" line="390">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getQueryCache()" line="410">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getRecoveryStats()" line="440">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getRefresh()" line="395">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getRequestCache()" line="435">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getSearch()" line="385">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getSegments()" line="425">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getStore()" line="370">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getTotalMemory()" line="454">
                <complexity>4</complexity>
                <statements>8</statements>
                <maximum_depth>3</maximum_depth>
                <calls>14</calls>
              </method>
              <method name="CommonStats.getTranslog()" line="430">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.getWarmer()" line="405">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="CommonStats.readCommonStats()" line="444">
                <complexity>1</complexity>
                <statements>3</statements>
                <maximum_depth>2</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="CommonStats.readFrom()" line="472">
                <complexity>14</complexity>
                <statements>29</statements>
                <maximum_depth>3</maximum_depth>
                <calls>29</calls>
              </method>
              <method name="CommonStats.toXContent()" line="604">
                <complexity>17</complexity>
                <statements>33</statements>
                <maximum_depth>3</maximum_depth>
                <calls>16</calls>
              </method>
              <method name="CommonStats.writeTo()" line="518">
                <complexity>27</complexity>
                <statements>68</statements>
                <maximum_depth>3</maximum_depth>
                <calls>42</calls>
              </method>
            </method_metrics>
            <block_depths depth_count="10">
              <block_depth level="0">28</block_depth>
              <block_depth level="1">41</block_depth>
              <block_depth level="2">123</block_depth>
              <block_depth level="3">103</block_depth>
              <block_depth level="4">70</block_depth>
              <block_depth level="5">68</block_depth>
              <block_depth level="6">0</block_depth>
              <block_depth level="7">0</block_depth>
              <block_depth level="8">0</block_depth>
              <block_depth level="9+">0</block_depth>
            </block_depths>
          </file>
          <file file_name="src\main\java\org\elasticsearch\index\query\GeoDistanceRangeQueryBuilder.java">
            <metrics metric_count="15">
              <metric id="M0">626</metric>
              <metric id="M1">394</metric>
              <metric id="M2">25.9</metric>
              <metric id="M3">256</metric>
              <metric id="M4">8.8</metric>
              <metric id="M5">1</metric>
              <metric id="M6">33.00</metric>
              <metric id="M7">9.03</metric>
              <metric id="M8">387</metric>
              <metric id="M9">GeoDistanceRangeQueryBuilder.fromXContent()</metric>
              <metric id="M10">77</metric>
              <metric id="M11">535</metric>
              <metric id="M12">7</metric>
              <metric id="M13">2.66</metric>
              <metric id="M14">4.58</metric>
            </metrics>
            <method_metrics method_count="33">
              <method name="GeoDistanceRangeQueryBuilder.doEquals()" line="603">
                <complexity>10</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>10</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.doHashCode()" line="617">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.doToQuery()" line="290">
                <complexity>24</complexity>
                <statements>46</statements>
                <maximum_depth>4</maximum_depth>
                <calls>41</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.doWriteTo()" line="144">
                <complexity>1</complexity>
                <statements>12</statements>
                <maximum_depth>2</maximum_depth>
                <calls>12</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.doXContent()" line="369">
                <complexity>2</complexity>
                <statements>14</statements>
                <maximum_depth>3</maximum_depth>
                <calls>30</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.fieldName()" line="158">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.from()" line="182">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.from()" line="174">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.from()" line="166">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.fromXContent()" line="387">
                <complexity>77</complexity>
                <statements>158</statements>
                <maximum_depth>7</maximum_depth>
                <calls>115</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.geoDistance()" line="232">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.geoDistance()" line="224">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.GeoDistanceRangeQueryBuilder()" line="128">
                <complexity>1</complexity>
                <statements>12</statements>
                <maximum_depth>2</maximum_depth>
                <calls>13</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.GeoDistanceRangeQueryBuilder()" line="121">
                <complexity>2</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>3</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.GeoDistanceRangeQueryBuilder()" line="117">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.GeoDistanceRangeQueryBuilder()" line="106">
                <complexity>3</complexity>
                <statements>6</statements>
                <maximum_depth>3</maximum_depth>
                <calls>3</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.getValidationMethod()" line="266">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.getWriteableName()" line="623">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.ignoreUnmapped()" line="285">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.ignoreUnmapped()" line="275">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.includeLower()" line="211">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.includeLower()" line="206">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.includeUpper()" line="220">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.includeUpper()" line="215">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.optimizeBbox()" line="255">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.optimizeBbox()" line="249">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.point()" line="162">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.setValidationMethod()" line="260">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.to()" line="202">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.to()" line="194">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.to()" line="186">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.unit()" line="244">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GeoDistanceRangeQueryBuilder.unit()" line="236">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
            </method_metrics>
            <block_depths depth_count="10">
              <block_depth level="0">28</block_depth>
              <block_depth level="1">68</block_depth>
              <block_depth level="2">136</block_depth>
              <block_depth level="3">45</block_depth>
              <block_depth level="4">39</block_depth>
              <block_depth level="5">53</block_depth>
              <block_depth level="6">24</block_depth>
              <block_depth level="7">1</block_depth>
              <block_depth level="8">0</block_depth>
              <block_depth level="9+">0</block_depth>
            </block_depths>
          </file>
          <file file_name="src\main\java\org\elasticsearch\common\joda\Joda.java">
            <metrics metric_count="15">
              <metric id="M0">433</metric>
              <metric id="M1">220</metric>
              <metric id="M2">20.9</metric>
              <metric id="M3">430</metric>
              <metric id="M4">9.2</metric>
              <metric id="M5">2</metric>
              <metric id="M6">1.50</metric>
              <metric id="M7">32.67</metric>
              <metric id="M8">59</metric>
              <metric id="M9">Joda.forPattern()</metric>
              <metric id="M10">87</metric>
              <metric id="M11">61</metric>
              <metric id="M12">3</metric>
              <metric id="M13">1.34</metric>
              <metric id="M14">29.67</metric>
            </metrics>
            <method_metrics method_count="3">
              <method name="?(instance of DurationFieldType).chronology.months()" line="300">
                <complexity>1</complexity>
                <statements>3</statements>
                <maximum_depth>2</maximum_depth>
                <calls>6</calls>
              </method>
              <method name="Joda.forPattern()" line="59">
                <complexity>87</complexity>
                <statements>94</statements>
                <maximum_depth>3</maximum_depth>
                <calls>142</calls>
              </method>
              <method name="Joda.forPattern()" line="52">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
            </method_metrics>
            <block_depths depth_count="10">
              <block_depth level="0">68</block_depth>
              <block_depth level="1">55</block_depth>
              <block_depth level="2">52</block_depth>
              <block_depth level="3">46</block_depth>
              <block_depth level="4">0</block_depth>
              <block_depth level="5">0</block_depth>
              <block_depth level="6">0</block_depth>
              <block_depth level="7">0</block_depth>
              <block_depth level="8">0</block_depth>
              <block_depth level="9+">0</block_depth>
            </block_depths>
          </file>
          <file file_name="src\main\java\org\elasticsearch\common\inject\internal\MoreTypes.java">
            <metrics metric_count="15">
              <metric id="M0">683</metric>
              <metric id="M1">337</metric>
              <metric id="M2">24.3</metric>
              <metric id="M3">203</metric>
              <metric id="M4">13.3</metric>
              <metric id="M5">6</metric>
              <metric id="M6">7.33</metric>
              <metric id="M7">5.34</metric>
              <metric id="M8">0</metric>
              <metric id="M9">CompositeType.{none}()</metric>
              <metric id="M10">98</metric>
              <metric id="M11">282</metric>
              <metric id="M12">6</metric>
              <metric id="M13">3.28</metric>
              <metric id="M14">5.42</metric>
            </metrics>
            <method_metrics method_count="43">
              <method name="CompositeType.{none}" line="0">
                <complexity>98</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GenericArrayTypeImpl.equals()" line="538">
                <complexity>2</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GenericArrayTypeImpl.GenericArrayTypeImpl()" line="523">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GenericArrayTypeImpl.getGenericComponentType()" line="528">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="GenericArrayTypeImpl.hashCode()" line="544">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GenericArrayTypeImpl.isFullySpecified()" line="533">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="GenericArrayTypeImpl.toString()" line="549">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().canonicalize()" line="112">
                <complexity>10</complexity>
                <statements>16</statements>
                <maximum_depth>4</maximum_depth>
                <calls>12</calls>
              </method>
              <method name="isFullySpecified().declaringClassOf()" line="432">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().equals()" line="604">
                <complexity>2</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().equals()" line="178">
                <complexity>16</complexity>
                <statements>30</statements>
                <maximum_depth>5</maximum_depth>
                <calls>24</calls>
              </method>
              <method name="isFullySpecified().getGenericSupertype()" line="368">
                <complexity>10</complexity>
                <statements>18</statements>
                <maximum_depth>6</maximum_depth>
                <calls>12</calls>
              </method>
              <method name="isFullySpecified().getRawType()" line="141">
                <complexity>7</complexity>
                <statements>14</statements>
                <maximum_depth>5</maximum_depth>
                <calls>7</calls>
              </method>
              <method name="isFullySpecified().hashCode()" line="610">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().hashCode()" line="236">
                <complexity>6</complexity>
                <statements>12</statements>
                <maximum_depth>4</maximum_depth>
                <calls>14</calls>
              </method>
              <method name="isFullySpecified().hashCodeOrZero()" line="260">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().indexOf()" line="419">
                <complexity>3</complexity>
                <statements>4</statements>
                <maximum_depth>5</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="isFullySpecified().isFullySpecified()" line="598">
                <complexity>2</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="isFullySpecified().memberKey()" line="357">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().memberType()" line="318">
                <complexity>6</complexity>
                <statements>11</statements>
                <maximum_depth>4</maximum_depth>
                <calls>3</calls>
              </method>
              <method name="isFullySpecified().resolveTypeVariable()" line="402">
                <complexity>3</complexity>
                <statements>8</statements>
                <maximum_depth>4</maximum_depth>
                <calls>5</calls>
              </method>
              <method name="isFullySpecified().toString()" line="615">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="isFullySpecified().toString()" line="343">
                <complexity>5</complexity>
                <statements>9</statements>
                <maximum_depth>4</maximum_depth>
                <calls>10</calls>
              </method>
              <method name="isFullySpecified().toString()" line="264">
                <complexity>15</complexity>
                <statements>33</statements>
                <maximum_depth>6</maximum_depth>
                <calls>27</calls>
              </method>
              <method name="MemberImpl.getDeclaringClass()" line="649">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="MemberImpl.getModifiers()" line="659">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="MemberImpl.getName()" line="654">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="MemberImpl.isSynthetic()" line="664">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="MemberImpl.MemberImpl()" line="639">
                <complexity>1</complexity>
                <statements>6</statements>
                <maximum_depth>3</maximum_depth>
                <calls>6</calls>
              </method>
              <method name="MemberImpl.toString()" line="669">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="MoreTypes.checkNotPrimitive()" line="620">
                <complexity>3</complexity>
                <statements>2</statements>
                <maximum_depth>3</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="MoreTypes.MoreTypes()" line="53">
                <complexity>1</complexity>
                <statements>0</statements>
                <maximum_depth>0</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="ParameterizedTypeImpl.equals()" line="503">
                <complexity>2</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="ParameterizedTypeImpl.getActualTypeArguments()" line="469">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="ParameterizedTypeImpl.getOwnerType()" line="479">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="ParameterizedTypeImpl.getRawType()" line="474">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="ParameterizedTypeImpl.hashCode()" line="509">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="ParameterizedTypeImpl.isFullySpecified()" line="484">
                <complexity>6</complexity>
                <statements>8</statements>
                <maximum_depth>6</maximum_depth>
                <calls>3</calls>
              </method>
              <method name="ParameterizedTypeImpl.ParameterizedTypeImpl()" line="445">
                <complexity>7</complexity>
                <statements>13</statements>
                <maximum_depth>6</maximum_depth>
                <calls>10</calls>
              </method>
              <method name="ParameterizedTypeImpl.toString()" line="514">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="WildcardTypeImpl.getLowerBounds()" line="593">
                <complexity>1</complexity>
                <statements>0</statements>
                <maximum_depth>0</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="WildcardTypeImpl.getUpperBounds()" line="588">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>4</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="WildcardTypeImpl.WildcardTypeImpl()" line="563">
                <complexity>6</complexity>
                <statements>16</statements>
                <maximum_depth>6</maximum_depth>
                <calls>9</calls>
              </method>
            </method_metrics>
            <block_depths depth_count="10">
              <block_depth level="0">22</block_depth>
              <block_depth level="1">6</block_depth>
              <block_depth level="2">47</block_depth>
              <block_depth level="3">103</block_depth>
              <block_depth level="4">109</block_depth>
              <block_depth level="5">40</block_depth>
              <block_depth level="6">10</block_depth>
              <block_depth level="7">0</block_depth>
              <block_depth level="8">0</block_depth>
              <block_depth level="9+">0</block_depth>
            </block_depths>
          </file>
          <file file_name="src\main\java\org\elasticsearch\search\suggest\phrase\PhraseSuggestionBuilder.java">
            <metrics metric_count="15">
              <metric id="M0">736</metric>
              <metric id="M1">407</metric>
              <metric id="M2">19.9</metric>
              <metric id="M3">281</metric>
              <metric id="M4">19.2</metric>
              <metric id="M5">2</metric>
              <metric id="M6">21.00</metric>
              <metric id="M7">7.05</metric>
              <metric id="M8">0</metric>
              <metric id="M9">CandidateGenerator.{none}()</metric>
              <metric id="M10">101</metric>
              <metric id="M11">549</metric>
              <metric id="M12">8</metric>
              <metric id="M13">2.49</metric>
              <metric id="M14">5.88</metric>
            </metrics>
            <method_metrics method_count="41">
              <method name="CandidateGenerator.{none}" line="0">
                <complexity>101</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.addCandidateGenerator()" line="299">
                <complexity>2</complexity>
                <statements>6</statements>
                <maximum_depth>3</maximum_depth>
                <calls>6</calls>
              </method>
              <method name="PhraseSuggestionBuilder.build()" line="605">
                <complexity>19</complexity>
                <statements>39</statements>
                <maximum_depth>6</maximum_depth>
                <calls>50</calls>
              </method>
              <method name="PhraseSuggestionBuilder.clearCandidateGenerators()" line="312">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collateParams()" line="427">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collateParams()" line="418">
                <complexity>1</complexity>
                <statements>3</statements>
                <maximum_depth>2</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collatePrune()" line="442">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collatePrune()" line="434">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collateQuery()" line="410">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collateQuery()" line="402">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.collateQuery()" line="394">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="PhraseSuggestionBuilder.confidence()" line="290">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.confidence()" line="279">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.doEquals()" line="704">
                <complexity>14</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>14</calls>
              </method>
              <method name="PhraseSuggestionBuilder.doHashCode()" line="722">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.doWriteTo()" line="159">
                <complexity>5</complexity>
                <statements>24</statements>
                <maximum_depth>4</maximum_depth>
                <calls>24</calls>
              </method>
              <method name="PhraseSuggestionBuilder.ensureNoSmoothing()" line="692">
                <complexity>2</complexity>
                <statements>2</statements>
                <maximum_depth>3</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="PhraseSuggestionBuilder.forceUnigrams()" line="329">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.forceUnigrams()" line="321">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.getShingleFilterFactory()" line="674">
                <complexity>6</complexity>
                <statements>11</statements>
                <maximum_depth>5</maximum_depth>
                <calls>3</calls>
              </method>
              <method name="PhraseSuggestionBuilder.getWriteableName()" line="699">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.gramSize()" line="205">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.gramSize()" line="194">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.highlight()" line="368">
                <complexity>2</complexity>
                <statements>5</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.innerFromXContent()" line="490">
                <complexity>42</complexity>
                <statements>83</statements>
                <maximum_depth>8</maximum_depth>
                <calls>88</calls>
              </method>
              <method name="PhraseSuggestionBuilder.innerToXContent()" line="447">
                <complexity>9</complexity>
                <statements>32</statements>
                <maximum_depth>5</maximum_depth>
                <calls>41</calls>
              </method>
              <method name="PhraseSuggestionBuilder.maxErrors()" line="229">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.maxErrors()" line="218">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.PhraseSuggestionBuilder()" line="128">
                <complexity>4</complexity>
                <statements>24</statements>
                <maximum_depth>4</maximum_depth>
                <calls>22</calls>
              </method>
              <method name="PhraseSuggestionBuilder.PhraseSuggestionBuilder()" line="107">
                <complexity>1</complexity>
                <statements>15</statements>
                <maximum_depth>2</maximum_depth>
                <calls>2</calls>
              </method>
              <method name="PhraseSuggestionBuilder.PhraseSuggestionBuilder()" line="99">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.postTag()" line="387">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.preTag()" line="380">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.realWordErrorLikelihood()" line="266">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.realWordErrorLikelihood()" line="255">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.separator()" line="246">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.separator()" line="237">
                <complexity>1</complexity>
                <statements>3</statements>
                <maximum_depth>2</maximum_depth>
                <calls>1</calls>
              </method>
              <method name="PhraseSuggestionBuilder.smoothingModel()" line="345">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.smoothingModel()" line="337">
                <complexity>1</complexity>
                <statements>2</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.tokenLimit()" line="360">
                <complexity>1</complexity>
                <statements>1</statements>
                <maximum_depth>2</maximum_depth>
                <calls>0</calls>
              </method>
              <method name="PhraseSuggestionBuilder.tokenLimit()" line="349">
                <complexity>2</complexity>
                <statements>4</statements>
                <maximum_depth>3</maximum_depth>
                <calls>1</calls>
              </method>
            </method_metrics>
            <block_depths depth_count="10">
              <block_depth level="0">38</block_depth>
              <block_depth level="1">71</block_depth>
              <block_depth level="2">150</block_depth>
              <block_depth level="3">57</block_depth>
              <block_depth level="4">36</block_depth>
              <block_depth level="5">28</block_depth>
              <block_depth level="6">9</block_depth>
              <block_depth level="7">12</block_depth>
              <block_depth level="8">6</block_depth>
              <block_depth level="9+">0</block_depth>
            </block_depths>
          </file>
        </files>
      </checkpoint>
    </checkpoints>
  </project>
</sourcemonitor_metrics>
